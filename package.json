{
    "name": "gitlens",
    "displayName": "GitLens — Git supercharged",
    "description": "在 VS Code 中增强 Git — 通过 Git 责任注释和 CodeLens 可视化代码作者身份，无缝导航和探索 Git 存储库，通过丰富的可视化和强大的比较命令获得有价值的见解，等等",
    "version": "15.2.3",
    "engines": {
        "vscode": "^1.82.0"
    },
    "license": "SEE LICENSE IN LICENSE",
    "publisher": "eamodio",
    "author": {
        "name": "Eric Amodio",
        "email": "eamodio@gmail.com"
    },
    "homepage": "https://gitkraken.com/gitlens",
    "bugs": {
        "url": "https://github.com/gitkraken/vscode-gitlens/issues"
    },
    "repository": {
        "type": "git",
        "url": "https://github.com/gitkraken/vscode-gitlens.git"
    },
    "main": "./dist/gitlens.js",
    "browser": "./dist/browser/gitlens.js",
    "icon": "images/gitlens-icon.png",
    "preview": false,
    "badges": [
        {
            "url": "https://img.shields.io/badge/gitkraken--community-gitlens-blue.svg?logo=slack&labelColor=555555",
            "href": "https://slack.gitkraken.com/",
            "description": "加入我们的#gitlens 频道"
        }
    ],
    "categories": [
        "Other",
        "SCM Providers"
    ],
    "galleryBanner": {
        "color": "#8647ae",
        "theme": "dark"
    },
    "keywords": [
        "gitlens",
        "git",
        "blame",
        "log",
        "annotation",
        "multi-root ready"
    ],
    "activationEvents": [
        "onAuthenticationRequest:gitlens-gitkraken",
        "onFileSystem:gitlens",
        "onWebviewPanel:gitlens.focus",
        "onWebviewPanel:gitlens.graph",
        "onWebviewPanel:gitlens.patchDetails",
        "onWebviewPanel:gitlens.settings",
        "onWebviewPanel:gitlens.timeline",
        "onWebviewPanel:gitlens.welcome",
        "onStartupFinished"
    ],
    "capabilities": {
        "virtualWorkspaces": true,
        "untrustedWorkspaces": {
            "supported": "limited"
        }
    },
    "contributes": {
        "configuration": [
            {
                "id": "current-line-blame",
                "title": "内联责备",
                "order": 10,
                "properties": {
                    "gitlens.currentLine.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定默认情况下是否为当前行提供内联责备注释。使用“Toggle Line Blame Annotations”命令（“gitlens.toggleLineBlame”）打开和关闭当前窗口的注释",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.currentLine.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否提供有关在内联责备注释中引入提交的拉取请求（如果有）的信息。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.currentLine.format": {
                        "type": "string",
                        "default": "${author, }${agoOrDate}${' via 'pullRequest}${ • message|50?}",
                        "markdownDescription": "指定内联责备注释的格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)。日期格式由“#gitlens.currentLine.dateFormat#”设置控制",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.currentLine.uncommittedChangesFormat": {
                        "type": "string",
                        "default": null,
                        "markdownDescription": "指定内联责备注释的未提交更改格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)。日期格式由“#gitlens.currentLine.dateFormat#”设置控制。\n\n**注意**：将其设置为空字符串将禁用未提交更改的内联责备注释。",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.currentLine.fontFamily": {
                        "type": "string",
                        "default": "",
                        "markdownDescription": "指定内联责备注释的字体系列",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.currentLine.fontSize": {
                        "type": "number",
                        "default": 0,
                        "markdownDescription": "指定内联责备注释的字体大小",
                        "scope": "window",
                        "order": 34
                    },
                    "gitlens.currentLine.fontStyle": {
                        "type": "string",
                        "default": "normal",
                        "markdownDescription": "指定内联责备注释的字体样式",
                        "scope": "window",
                        "order": 35
                    },
                    "gitlens.currentLine.fontWeight": {
                        "type": "string",
                        "default": "normal",
                        "markdownDescription": "指定内联责备注释的字体粗细",
                        "scope": "window",
                        "order": 36
                    },
                    "gitlens.currentLine.scrollable": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定内联责备注释在视口之外时是否可以滚动到视图中。 **注意**：将其设置为“false”将禁止悬停在注释上显示；将 `#gitlens.hovers.currentLine.over#` 设置为 `line` 以使悬停显示在线上的任何位置。",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.currentLine.dateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定如何格式化内联责备注释的绝对日期（例如使用“${date}”标记）。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 50
                    }
                }
            },
            {
                "id": "git-code-lens",
                "title": "Git 代码镜头",
                "order": 11,
                "properties": {
                    "gitlens.codeLens.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定默认情况下是否提供任何 Git CodeLens。使用“Toggle Git CodeLens”命令（“gitlens.toggleCodeLens”）打开和关闭当前窗口的 Git CodeLens",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.codeLens.authors.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否提供 _authors_ CodeLens，显示文件或代码块的作者数量以及最著名的作者（如果有多个作者）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.codeLens.authors.command": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "gitlens.toggleFileBlame",
                            "gitlens.toggleFileHeatmap",
                            "gitlens.toggleFileChanges",
                            "gitlens.toggleFileChangesOnly",
                            "gitlens.diffWithPrevious",
                            "gitlens.revealCommitInView",
                            "gitlens.showCommitsInView",
                            "gitlens.showQuickCommitDetails",
                            "gitlens.showQuickCommitFileDetails",
                            "gitlens.showQuickFileHistory",
                            "gitlens.showQuickRepoHistory",
                            "gitlens.openCommitOnRemote",
                            "gitlens.copyRemoteCommitUrl",
                            "gitlens.openFileOnRemote",
                            "gitlens.copyRemoteFileUrl"
                        ],
                        "enumDescriptions": [
                            "禁用点击交互",
                            "切换文件责任",
                            "切换文件热图",
                            "切换自提交之前以来的文件更改",
                            "切换提交中的文件更改",
                            "将当前提交的文件与先前提交的文件进行比较",
                            "在侧栏中显示提交",
                            "搜索范围内的提交",
                            "显示检查快速选择菜单",
                            "显示提交文件详细信息快速选择菜单",
                            "显示文件历史记录快速选择菜单",
                            "显示分支历史快速选择菜单",
                            "打开远程服务上的提交（如果可用）",
                            "将远程提交 URL 复制到剪贴板（如果可用）",
                            "打开远程服务上的文件修订版（如果可用）",
                            "将远程文件 URL 复制到剪贴板（如果可用）"
                        ],
                        "default": "gitlens.toggleFileBlame",
                        "markdownDescription": "指定单击 _authors_ CodeLens 时要执行的命令",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.codeLens.recentChange.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否提供_最近更改_CodeLens，显示文件或代码块最近提交的作者和日期",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.codeLens.recentChange.command": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "gitlens.toggleFileBlame",
                            "gitlens.toggleFileHeatmap",
                            "gitlens.toggleFileChanges",
                            "gitlens.toggleFileChangesOnly",
                            "gitlens.diffWithPrevious",
                            "gitlens.revealCommitInView",
                            "gitlens.showCommitsInView",
                            "gitlens.showQuickCommitDetails",
                            "gitlens.showQuickCommitFileDetails",
                            "gitlens.showQuickFileHistory",
                            "gitlens.showQuickRepoHistory",
                            "gitlens.openCommitOnRemote",
                            "gitlens.copyRemoteCommitUrl",
                            "gitlens.openFileOnRemote",
                            "gitlens.copyRemoteFileUrl"
                        ],
                        "enumDescriptions": [
                            "禁用点击交互",
                            "切换文件责任",
                            "切换文件热图",
                            "切换自提交之前以来的文件更改",
                            "切换提交中的文件更改",
                            "将当前提交的文件与先前提交的文件进行比较",
                            "在侧栏中显示提交",
                            "显示检查",
                            "显示检查快速选择菜单",
                            "显示提交文件详细信息快速选择菜单",
                            "显示文件历史记录快速选择菜单",
                            "显示分支历史快速选择菜单",
                            "打开远程服务上的提交（如果可用）",
                            "将远程提交 URL 复制到剪贴板（如果可用）",
                            "打开远程服务上的文件修订版（如果可用）",
                            "将远程文件 URL 复制到剪贴板（如果可用）"
                        ],
                        "default": "gitlens.showQuickCommitFileDetails",
                        "markdownDescription": "指定单击“最近更改”CodeLens 时要执行的命令",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.codeLens.scopes": {
                        "type": "array",
                        "default": [
                            "document",
                            "containers"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "document",
                                "containers",
                                "blocks"
                            ],
                            "enumDescriptions": [
                                "在文档顶部添加 CodeLens",
                                "在类似容器的符号（模块、类、接口等）的开头添加 CodeLens",
                                "在块状符号（函数、方法等）行的开头添加 CodeLens"
                            ]
                        },
                        "minItems": 0,
                        "maxItems": 3,
                        "uniqueItems": true,
                        "markdownDescription": "指定 Git CodeLens 将在文档中显示的位置",
                        "scope": "language-overridable",
                        "order": 40
                    },
                    "gitlens.codeLens.symbolScopes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "uniqueItems": true,
                        "markdownDescription": "指定一组文档符号，Git CodeLens 将或不会在文档中显示这些符号。添加前缀“!”以避免为符号提供 Git CodeLens。必须是“SymbolKind”的成员",
                        "scope": "language-overridable",
                        "order": 50
                    },
                    "gitlens.codeLens.includeSingleLineSymbols": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在仅跨越单行的符号上提供任何 Git CodeLens",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors": {
                        "type": "string",
                        "default": "$(ellipsis)",
                        "markdownDescription": "指定当存在未保存的更改时要显示的字符串，以代替_最近更改_和_作者_CodeLens",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly": {
                        "type": "string",
                        "default": "$(ellipsis)",
                        "markdownDescription": "指定当存在未保存的更改时要显示的字符串来代替_最近更改_CodeLens",
                        "scope": "window",
                        "order": 71
                    },
                    "gitlens.strings.codeLens.unsavedChanges.authorsOnly": {
                        "type": "string",
                        "default": "$(ellipsis)",
                        "markdownDescription": "指定当有未保存的更改时要显示的字符串来代替 _authors_ CodeLens",
                        "scope": "window",
                        "order": 72
                    },
                    "gitlens.codeLens.dateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定如何在 Git CodeLens 中格式化绝对日期。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 73
                    },
                    "gitlens.codeLens.scopesByLanguage": {
                        "deprecationMessage": "已弃用。使用每种语言的 `gitlens.codeLens.scopes` 和 `gitlens.codeLens.symbolScopes` 设置",
                        "markdownDeprecationMessage": "已弃用。使用每种语言的 `#gitlens.codeLens.scopes#` 和 `#gitlens.codeLens.symbolScopes#` 设置"
                    }
                }
            },
            {
                "id": "status-bar-blame",
                "title": "状态栏责备",
                "order": 12,
                "properties": {
                    "gitlens.statusBar.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在状态栏中提供指责信息",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.statusBar.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在状态栏中提供有关引入提交的拉取请求（如果有）的信息。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.statusBar.format": {
                        "type": "string",
                        "default": "${author}, ${agoOrDate}${' via 'pullRequest}",
                        "markdownDescription": "指定状态栏中的责怪信息的格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)。日期格式由 `#gitlens.statusBar.dateFormat#` 设置控制",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.statusBar.alignment": {
                        "type": "string",
                        "default": "right",
                        "enum": [
                            "left",
                            "right"
                        ],
                        "enumDescriptions": [
                            "向左对齐",
                            "向右对齐"
                        ],
                        "markdownDescription": "指定状态栏中的责怪对齐方式",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.statusBar.command": {
                        "type": "string",
                        "default": "gitlens.showQuickCommitDetails",
                        "enum": [
                            "gitlens.toggleFileBlame",
                            "gitlens.toggleFileHeatmap",
                            "gitlens.toggleFileChanges",
                            "gitlens.toggleFileChangesOnly",
                            "gitlens.toggleCodeLens",
                            "gitlens.diffWithPrevious",
                            "gitlens.diffWithWorking",
                            "gitlens.revealCommitInView",
                            "gitlens.showCommitsInView",
                            "gitlens.showQuickCommitDetails",
                            "gitlens.showQuickCommitFileDetails",
                            "gitlens.showQuickFileHistory",
                            "gitlens.showQuickRepoHistory",
                            "gitlens.openCommitOnRemote",
                            "gitlens.copyRemoteCommitUrl",
                            "gitlens.openFileOnRemote",
                            "gitlens.copyRemoteFileUrl"
                        ],
                        "enumDescriptions": [
                            "切换文件责任",
                            "切换文件热图",
                            "切换自提交之前以来的文件更改",
                            "切换提交中的文件更改",
                            "切换 Git CodeLens",
                            "将当前行提交与上一个提交进行比较",
                            "将当前行提交与工作树进行比较",
                            "在侧栏中显示提交",
                            "显示检查",
                            "显示检查快速选择菜单",
                            "显示提交文件详细信息快速选择菜单",
                            "显示文件历史记录快速选择菜单",
                            "显示分支历史快速选择菜单",
                            "打开远程服务上的提交（如果可用）",
                            "将远程提交 URL 复制到剪贴板（如果可用）",
                            "打开远程服务上的文件修订版（如果可用）",
                            "将远程文件 URL 复制到剪贴板（如果可用）"
                        ],
                        "markdownDescription": "指定当指责状态栏项被点击时执行的命令",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.statusBar.tooltipFormat": {
                        "type": "string",
                        "default": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
                        "editPresentation": "multilineText",
                        "markdownDescription": "指定状态栏中的错误信息上显示的悬停格式（以 Markdown 形式）。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.statusBar.reduceFlicker": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定换行时是否避免清除之前的怪信息，以减少状态栏“闪烁”",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.statusBar.dateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定如何在状态栏中的指责信息中设置绝对日期的格式（例如使用“${date}”标记）。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 80
                    }
                }
            },
            {
                "id": "hovers",
                "title": "悬停",
                "order": 13,
                "properties": {
                    "gitlens.hovers.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否提供任何悬停",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.hovers.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在悬停时显示头像图像",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.hovers.avatarSize": {
                        "type": "number",
                        "default": 32,
                        "markdownDescription": "指定悬停时头像图像的大小",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.hovers.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否提供有关在悬停中引入提交的拉取请求（如果有）的信息。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.hovers.autolinks.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在提交消息中自动链接外部资源",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.hovers.autolinks.enhanced": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在提交消息中查找有关自动链接外部资源的其他详细信息。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.hovers.currentLine.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否为当前行提供任何悬停",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.hovers.currentLine.over": {
                        "type": "string",
                        "default": "annotation",
                        "enum": [
                            "annotation",
                            "line"
                        ],
                        "enumDescriptions": [
                            "仅当鼠标悬停在线条注释上时显示",
                            "将鼠标悬停在线上任意位置时显示"
                        ],
                        "markdownDescription": "指定何时触发当前行的悬停",
                        "scope": "window",
                        "order": 41
                    },
                    "gitlens.hovers.currentLine.details": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否为当前行提供_提交详细信息_悬停",
                        "scope": "window",
                        "order": 42
                    },
                    "gitlens.hovers.currentLine.changes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否为当前行提供_changes (diff)_hover",
                        "scope": "window",
                        "order": 43
                    },
                    "gitlens.hovers.annotations.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定在显示责任注释时是否提供任何悬停",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.hovers.annotations.over": {
                        "type": "string",
                        "default": "line",
                        "enum": [
                            "annotation",
                            "line"
                        ],
                        "enumDescriptions": [
                            "仅当鼠标悬停在线条注释上时显示",
                            "将鼠标悬停在线上任意位置时显示"
                        ],
                        "markdownDescription": "指定显示责备注释时何时触发悬停",
                        "scope": "window",
                        "order": 51
                    },
                    "gitlens.hovers.annotations.details": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定在显示责备注释时是否为所有行提供_commit细节_悬停",
                        "scope": "window",
                        "order": 52
                    },
                    "gitlens.hovers.annotations.changes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定在显示责备注释时是否为所有行提供_changes (diff)_悬停",
                        "scope": "window",
                        "order": 53
                    },
                    "gitlens.hovers.detailsMarkdownFormat": {
                        "type": "string",
                        "default": "${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}\n\n${commands}",
                        "editPresentation": "multilineText",
                        "markdownDescription": "指定_提交详细信息_悬停的格式（以降价形式）。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.hovers.changesDiff": {
                        "type": "string",
                        "default": "line",
                        "enum": [
                            "line",
                            "hunk"
                        ],
                        "enumDescriptions": [
                            "仅显示该行的更改",
                            "显示相关更改集"
                        ],
                        "markdownDescription": "指定是仅显示对行的更改还是在 _changes (diff)_ 悬停中显示相关更改集",
                        "scope": "window",
                        "order": 70
                    }
                }
            },
            {
                "id": "views",
                "title": "意见",
                "order": 20,
                "properties": {
                    "gitlens.views.collapseWorktreesWhenPossible": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在可能的情况下尝试将打开的工作树折叠到视图中的单个（公共）存储库中",
                        "scope": "window",
                        "order": 1
                    },
                    "gitlens.views.defaultItemLimit": {
                        "type": "number",
                        "default": 10,
                        "markdownDescription": "指定视图列表中显示的默认项目数。使用 0 指定无限制",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.pageItemLimit": {
                        "type": "number",
                        "default": 40,
                        "markdownDescription": "指定对视图列表进行分页时每页中显示的项目数。使用 0 指定无限制",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.showRelativeDateMarkers": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在视图中的修订（提交）历史记录上显示相对日期标记（_不到一周前_、_一周前_、_一个月前_等）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.formats.commits.label": {
                        "type": "string",
                        "default": "${❰ tips|11? ❱➤  }${message}",
                        "markdownDescription": "指定视图中提交的格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.formats.commits.description": {
                        "type": "string",
                        "default": "${author, }${agoOrDate}",
                        "markdownDescription": "指定视图中提交的描述格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.formats.commits.tooltip": {
                        "type": "string",
                        "default": "${link}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips} \\\n${avatar} &nbsp;__${author}__, ${ago}${' via 'pullRequest} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
                        "markdownDescription": "指定视图中提交的工具提示格式（以 Markdown 形式）。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.formats.commits.tooltipWithStatus": {
                        "type": "string",
                        "default": "${link}${' via 'pullRequest}&nbsp;&nbsp;•&nbsp;&nbsp;{{slot-status}}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail}${'&nbsp;&nbsp;&nbsp;&nbsp;'tips}\n\n${avatar} &nbsp;__${author}__, ${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
                        "markdownDescription": "指定视图中“文件”提交的工具提示格式（以 Markdown 形式）。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.formats.files.label": {
                        "type": "string",
                        "default": "${working  }${file}",
                        "markdownDescription": "指定视图中文件的格式。请参阅 GitLens 文档中的 [_文件令牌_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens)",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.formats.files.description": {
                        "type": "string",
                        "default": "${directory}${  ←  originalPath}",
                        "markdownDescription": "指定视图中文件的描述格式。请参阅 GitLens 文档中的 [_文件令牌_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#file-tokens)",
                        "scope": "window",
                        "order": 41
                    },
                    "gitlens.views.formats.stashes.label": {
                        "type": "string",
                        "default": "${message}",
                        "markdownDescription": "指定视图中存储的格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.views.formats.stashes.description": {
                        "type": "string",
                        "default": "${stashOnRef, }${agoOrDate}",
                        "markdownDescription": "指定视图中存储的描述格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 51
                    },
                    "gitlens.views.formats.stashes.tooltip": {
                        "type": "string",
                        "default": "${link}${' on `'stashOnRef`}${'&nbsp;&nbsp;•&nbsp;&nbsp;'changesDetail} \\\n&nbsp;&nbsp;${ago} &nbsp; _(${date})_ \n\n${message}${\n\n---\n\nfootnotes}",
                        "markdownDescription": "指定视图中存储的工具提示格式（以 Markdown 形式）。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)",
                        "scope": "window",
                        "order": 52
                    },
                    "gitlens.views.openChangesInMultiDiffEditor": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在多重差异编辑器（单个选项卡）或单个差异编辑器（多个选项卡）中打开多个更改",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.views.commitFileFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.label` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.label#` 代替"
                    },
                    "gitlens.views.commitFileDescriptionFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.description` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.description#` 代替"
                    },
                    "gitlens.views.commitFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.commits.label` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.commits.files.label#` 代替"
                    },
                    "gitlens.views.commitDescriptionFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.commits.description` 代替",
                        "markdownDeprecationMessage": "已弃用。使用“#gitlens.views.formats.commits.description#”代替"
                    },
                    "gitlens.views.stashFileFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.label` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.label#` 代替"
                    },
                    "gitlens.views.stashFileDescriptionFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.description` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.description#` 代替"
                    },
                    "gitlens.views.stashFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.stashes.label` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.stashes.files.label#` 代替"
                    },
                    "gitlens.views.stashDescriptionFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.stashes.description` 代替",
                        "markdownDeprecationMessage": "已弃用。使用“#gitlens.views.formats.stashes.description#”代替"
                    },
                    "gitlens.views.statusFileFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.label` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.label#` 代替"
                    },
                    "gitlens.views.statusFileDescriptionFormat": {
                        "deprecationMessage": "已弃用。使用 `gitlens.views.formats.files.description` 代替",
                        "markdownDeprecationMessage": "已弃用。使用 `#gitlens.views.formats.files.description#` 代替"
                    }
                }
            },
            {
                "id": "commits-view",
                "title": "提交视图",
                "order": 21,
                "properties": {
                    "gitlens.views.commits.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch",
                            "working"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将当前分支与用户选择的参考进行比较",
                            "将工作树与用户选择的参考进行比较"
                        ],
                        "default": "working",
                        "markdownDescription": "指定是否在 _Commits_ 视图中显示当前分支或工作树与用户选择的参考（分支、标签等）的比较",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.commits.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Commits_ 视图中查询与当前分支关联的拉取请求和提交。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.commits.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Commits_ 视图中显示与当前分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.commits.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Commits_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 23
                    },
                    "gitlens.views.commits.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.commits.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Commits_ 视图将如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.commits.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Commits_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.commits.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.commits.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Commits_ 视图中不必要的嵌套文件。仅当“#gitlens.views.commits.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.commits.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Commits_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.commits.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Commits_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.commits.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Commits_ 视图中显示提交，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 50
                    }
                }
            },
            {
                "id": "commit-details-view",
                "title": "检查视图",
                "order": 22,
                "properties": {
                    "gitlens.views.commitDetails.autolinks.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在提交消息中自动链接外部资源",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.commitDetails.autolinks.enhanced": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在提交消息中查找有关自动链接外部资源的其他详细信息。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.commitDetails.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否查询关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.commitDetails.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.commitDetails.files.threshold#”值和每个嵌套级别的文件数量，自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定_提交详细信息_视图将如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.commitDetails.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据_提交详细信息_视图中嵌套级别中的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.commitDetails.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.commitDetails.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Commit Details_ 视图中不必要的文件嵌套。仅当“#gitlens.views.commitDetails.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.commitDetails.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定“提交详细信息”视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.commitDetails.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在“提交详细信息”视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "repositories-view",
                "title": "存储库视图",
                "order": 23,
                "properties": {
                    "gitlens.views.repositories.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch",
                            "working"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将当前分支与用户选择的参考进行比较",
                            "将工作树与用户选择的参考进行比较"
                        ],
                        "default": "working",
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示当前分支或工作树与用户选择的参考（分支、标签等）的比较",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.repositories.showUpstreamStatus": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的当前分支的上游状态",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.repositories.includeWorkingTree": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中包含每个存储库的工作树文件状态",
                        "scope": "window",
                        "order": 12
                    },
                    "gitlens.views.repositories.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中查询与分支和提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.repositories.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Repositories_ 视图中的分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.repositories.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Repositories_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.repositories.showCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库当前分支上的提交",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.repositories.showBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的分支",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.repositories.showRemotes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的遥控器",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.repositories.showStashes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的存储",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.repositories.showTags": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的标签",
                        "scope": "window",
                        "order": 34
                    },
                    "gitlens.views.repositories.showContributors": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的贡献者",
                        "scope": "window",
                        "order": 35
                    },
                    "gitlens.views.repositories.showWorktrees": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的工作树",
                        "scope": "window",
                        "order": 36
                    },
                    "gitlens.views.repositories.showIncomingActivity": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示每个存储库的实验性传入活动",
                        "scope": "window",
                        "order": 37
                    },
                    "gitlens.views.repositories.autoRefresh": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定当存储库或文件系统更改时是否自动刷新_Repositories_视图",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.repositories.autoReveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定打开文件时是否自动在_Repositories_视图中显示存储库",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.views.repositories.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Repositories_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.views.repositories.branches.layout": {
                        "type": "string",
                        "default": "tree",
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "将分支显示为列表",
                            "当分支名称包含斜杠“/”时，将分支显示为树"
                        ],
                        "markdownDescription": "指定 _Repositories_ 视图如何显示分支",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.views.repositories.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.repositories.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Repositories_ 视图如何显示文件",
                        "scope": "window",
                        "order": 80
                    },
                    "gitlens.views.repositories.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Repositories_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.repositories.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 81
                    },
                    "gitlens.views.repositories.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Repositories_ 视图中不必要的文件嵌套。仅当“#gitlens.views.repositories.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 82
                    },
                    "gitlens.views.repositories.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Repositories_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 83
                    },
                    "gitlens.views.repositories.compact": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否以紧凑显示密度显示_Repositories_视图",
                        "scope": "window",
                        "order": 90
                    },
                    "gitlens.views.repositories.branches.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将分支与用户选择的参考进行比较"
                        ],
                        "default": "branch",
                        "markdownDescription": "指定是否在 _Repositories_ 视图中的每个分支下显示分支与用户选择的引用（分支、标签等）的比较",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.views.repositories.enabled": {
                        "deprecationMessage": "已弃用。该设置不再使用",
                        "markdownDeprecationMessage": "已弃用。该设置不再使用"
                    }
                }
            },
            {
                "id": "pull-request-view",
                "title": "拉取请求视图",
                "order": 21,
                "properties": {
                    "gitlens.views.pullRequest.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.pullRequest.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定_Pull Request_视图将如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.pullRequest.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Pull Request_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.pullRequest.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.pullRequest.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Pull Request_ 视图中不必要的嵌套文件。仅当“#gitlens.views.pullRequest.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.pullRequest.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定_Pull Request_视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.pullRequest.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_Pull Request_视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "file-history-view",
                "title": "文件历史记录视图",
                "order": 24,
                "properties": {
                    "gitlens.views.fileHistory.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _File History_ 视图中查询与提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.fileHistory.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与_文件历史记录_视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.fileHistory.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.fileHistory.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定_文件历史记录_视图将如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.fileHistory.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据_文件历史记录_视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.fileHistory.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.fileHistory.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_文件历史记录_视图中不必要的文件嵌套。仅当“#gitlens.views.fileHistory.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.fileHistory.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定_文件历史记录_视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.fileHistory.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_文件历史记录_视图中显示头像图像而不是状态图标",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.advanced.fileHistoryFollowsRenames": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定文件历史记录是否遵循重命名",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.advanced.fileHistoryShowAllBranches": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定文件历史记录是否显示所有分支的提交",
                        "scope": "window",
                        "order": 101
                    },
                    "gitlens.advanced.fileHistoryShowMergeCommits": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定文件历史记录是否显示合并提交",
                        "scope": "window",
                        "order": 102
                    }
                }
            },
            {
                "id": "line-history-view",
                "title": "线路历史视图",
                "order": 25,
                "properties": {
                    "gitlens.views.lineHistory.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在“线路历史记录”视图中显示头像图像而不是状态图标",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.lineHistory.enabled": {
                        "deprecationMessage": "已弃用。该设置不再使用",
                        "markdownDeprecationMessage": "已弃用。该设置不再使用"
                    }
                }
            },
            {
                "id": "branches-view",
                "title": "分支机构视图",
                "order": 26,
                "properties": {
                    "gitlens.views.branches.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将分支与用户选择的参考进行比较"
                        ],
                        "default": "branch",
                        "markdownDescription": "指定是否在 _Branches_ 视图中显示分支与用户选择的参考（分支、标签等）的比较",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.branches.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Branches_ 视图中查询与每个分支关联的拉取请求和提交。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.branches.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Branches_ 视图中的每个分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.branches.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Branches_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.branches.branches.layout": {
                        "type": "string",
                        "default": "tree",
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "将分支显示为列表",
                            "当分支名称包含斜杠“/”时，将分支显示为树"
                        ],
                        "markdownDescription": "指定 _Branches_ 视图如何显示分支",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.branches.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.branches.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Branches_ 视图如何显示文件",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.views.branches.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Branches_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.branches.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 51
                    },
                    "gitlens.views.branches.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Branches_ 视图中不必要的嵌套文件。仅当“#gitlens.views.branches.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 52
                    },
                    "gitlens.views.branches.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Branches_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 53
                    },
                    "gitlens.views.branches.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Branches_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.views.branches.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Branches_ 视图中显示分支，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 70
                    }
                }
            },
            {
                "id": "remotes-view",
                "title": "遥控器查看",
                "order": 27,
                "properties": {
                    "gitlens.views.remotes.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Remotes_ 视图中查询与每个分支关联的拉取请求和提交。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.remotes.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Remotes_ 视图中的每个分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.remotes.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Remotes_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 12
                    },
                    "gitlens.views.remotes.branches.layout": {
                        "type": "string",
                        "default": "tree",
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "将分支显示为列表",
                            "当分支名称包含斜杠“/”时，将分支显示为树"
                        ],
                        "markdownDescription": "指定 _Remotes_ 视图如何显示分支",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.remotes.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.remotes.files.threshold#”值和每个嵌套级别的文件数量，自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Remotes_ 视图如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.remotes.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Remotes_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.remotes.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.remotes.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Remotes_ 视图中不必要的嵌套文件。仅当“#gitlens.views.remotes.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.remotes.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Remotes_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.remotes.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Remotes_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.remotes.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Remotes_ 视图中显示遥控器，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 50
                    }
                }
            },
            {
                "id": "stashes-view",
                "title": "藏匿视图",
                "order": 28,
                "properties": {
                    "gitlens.views.stashes.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.stashes.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Stashes_ 视图如何显示文件",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.stashes.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Stashes_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.stashes.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.stashes.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Stashes_ 视图中不必要的嵌套文件。仅当“#gitlens.views.stashes.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 12
                    },
                    "gitlens.views.stashes.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Stashes_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 13
                    },
                    "gitlens.views.stashes.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Stashes_ 视图中显示存储，否则它们在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "tags-view",
                "title": "标签查看",
                "order": 29,
                "properties": {
                    "gitlens.views.tags.branches.layout": {
                        "type": "string",
                        "default": "tree",
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "将标签显示为列表",
                            "当标签名称包含斜杠“/”时，将标签显示为树"
                        ],
                        "markdownDescription": "指定 _Tags_ 视图如何显示标签",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.tags.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.tags.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Tags_ 视图如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.tags.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Tags_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.tags.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.tags.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Tags_ 视图中不必要的文件嵌套。仅当“#gitlens.views.tags.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.tags.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Tags_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.tags.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Tags_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.tags.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Tags_ 视图中显示标签，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 50
                    }
                }
            },
            {
                "id": "worktrees-view",
                "title": "工作树视图",
                "order": 30,
                "properties": {
                    "gitlens.worktrees.promptForLocation": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定创建新工作树时是否提示输入路径",
                        "scope": "resource",
                        "order": 10
                    },
                    "gitlens.worktrees.defaultLocation": {
                        "type": "string",
                        "default": null,
                        "markdownDescription": "指定将在其中创建新工作树的默认路径",
                        "scope": "resource",
                        "order": 11
                    },
                    "gitlens.worktrees.openAfterCreate": {
                        "type": "string",
                        "default": "prompt",
                        "enum": [
                            "always",
                            "alwaysNewWindow",
                            "onlyWhenEmpty",
                            "never",
                            "prompt"
                        ],
                        "enumDescriptions": [
                            "始终在当前窗口中打开新工作树",
                            "始终在新窗口中打开新工作树",
                            "没有打开文件夹时仅在当前窗口中打开新的工作树",
                            "切勿打开新工作树",
                            "总是提示打开新工作树"
                        ],
                        "markdownDescription": "指定工作树创建后如何以及何时打开它",
                        "scope": "resource",
                        "order": 12
                    },
                    "gitlens.views.worktrees.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将工作树分支与用户选择的参考进行比较"
                        ],
                        "default": "working",
                        "markdownDescription": "指定是否在 _Worktrees_ 视图中显示工作树分支与用户选择的参考（分支、标签等）的比较",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.worktrees.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Worktrees_ 视图中查询与工作树分支和提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.worktrees.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Worktrees_ 视图中显示与工作树分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.worktrees.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Worktrees_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.worktrees.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.worktrees.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Worktrees_ 视图如何显示文件",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.views.worktrees.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Worktrees_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.worktrees.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 41
                    },
                    "gitlens.views.worktrees.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Worktrees_ 视图中不必要的文件嵌套。仅当“#gitlens.views.worktrees.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 42
                    },
                    "gitlens.views.worktrees.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Worktrees_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 43
                    },
                    "gitlens.views.worktrees.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Worktrees_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.views.worktrees.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Worktrees_ 视图中显示工作树，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 60
                    }
                }
            },
            {
                "id": "contributors-view",
                "title": "贡献者视图",
                "order": 31,
                "properties": {
                    "gitlens.views.contributors.showAllBranches": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _Contributors_ 视图中显示所有分支的提交",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.contributors.showStatistics": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _Contributors_ 视图中显示贡献者统计信息。这可能需要一段时间来计算，具体取决于存储库的大小",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.contributors.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Contributors_ 视图中查询与分支和提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.contributors.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _Contributors_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.contributors.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.contributors.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Contributors_ 视图如何显示文件",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.views.contributors.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Contributors_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.contributors.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 51
                    },
                    "gitlens.views.contributors.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Contributors_ 视图中不必要的文件嵌套。仅当“#gitlens.views.contributors.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 52
                    },
                    "gitlens.views.contributors.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Contributors_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 53
                    },
                    "gitlens.views.contributors.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Contributors_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.views.contributors.reveal": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Contributors_ 视图中显示贡献者，否则在 _Repositories_ 视图中显示",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "search-compare-view",
                "title": "搜索和比较视图",
                "order": 32,
                "properties": {
                    "gitlens.views.searchAndCompare.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Search & Compare_ 视图中查询与提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.searchAndCompare.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_搜索和比较_视图中显示与提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.searchAndCompare.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.searchAndCompare.files.threshold#”值和每个嵌套级别的文件数量，自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定_搜索和比较_视图将如何显示文件",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.searchAndCompare.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据_搜索和比较_视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.searchAndCompare.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.searchAndCompare.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_搜索和比较_视图中不必要的文件嵌套。仅当“#gitlens.views.searchAndCompare.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.searchAndCompare.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定_搜索和比较_视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.searchAndCompare.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_搜索和比较_视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 30
                    }
                }
            },
            {
                "id": "cloud-patches-view",
                "title": "云补丁视图",
                "order": 33,
                "properties": {
                    "gitlens.views.drafts.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.drafts.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _Cloud Patches_ 视图如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.drafts.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _Cloud Patches_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.drafts.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.drafts.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Cloud Patches_ 视图中不必要的嵌套文件。仅当“#gitlens.views.drafts.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.drafts.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _Cloud Patches_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.drafts.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Cloud Patches_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "workspaces-view",
                "title": "GitKraken 工作区视图",
                "order": 34,
                "properties": {
                    "gitlens.views.workspaces.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch",
                            "working"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将当前分支与用户选择的参考进行比较",
                            "将工作树与用户选择的参考进行比较"
                        ],
                        "default": "working",
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示当前分支或工作树与用户选择的参考（分支、标签等）的比较",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.views.workspaces.showUpstreamStatus": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的当前分支的上游状态",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.views.workspaces.includeWorkingTree": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中包含每个存储库的工作树文件状态",
                        "scope": "window",
                        "order": 12
                    },
                    "gitlens.views.workspaces.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中查询与分支和提交关联的拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.views.workspaces.pullRequests.showForBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _GitKraken Workspaces_ 视图中的分支关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.views.workspaces.pullRequests.showForCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否显示与 _GitKraken Workspaces_ 视图中的提交关联的拉取请求（如果有）。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.views.workspaces.showCommits": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库当前分支上的提交",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.workspaces.showBranches": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的分支",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.workspaces.showRemotes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的遥控器",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.workspaces.showStashes": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的存储",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.workspaces.showTags": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的标签",
                        "scope": "window",
                        "order": 34
                    },
                    "gitlens.views.workspaces.showContributors": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的贡献者",
                        "scope": "window",
                        "order": 35
                    },
                    "gitlens.views.workspaces.showWorktrees": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的工作树",
                        "scope": "window",
                        "order": 36
                    },
                    "gitlens.views.workspaces.showIncomingActivity": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示每个存储库的实验性传入活动",
                        "scope": "window",
                        "order": 37
                    },
                    "gitlens.views.workspaces.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.views.workspaces.branches.layout": {
                        "type": "string",
                        "default": "tree",
                        "enum": [
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "将分支显示为列表",
                            "当分支名称包含斜杠“/”时，将分支显示为树"
                        ],
                        "markdownDescription": "指定 _GitKraken Workspaces_ 视图如何显示分支",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.views.workspaces.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.workspaces.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定 _GitKraken Workspaces_ 视图如何显示文件",
                        "scope": "window",
                        "order": 80
                    },
                    "gitlens.views.workspaces.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据 _GitKraken Workspaces_ 视图中嵌套级别的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.workspaces.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 81
                    },
                    "gitlens.views.workspaces.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_GitKraken Workspaces_ 视图中不必要的文件嵌套。仅当“#gitlens.views.workspaces.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 82
                    },
                    "gitlens.views.workspaces.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定 _GitKraken Workspaces_ 视图如何显示文件图标",
                        "scope": "window",
                        "order": 83
                    },
                    "gitlens.views.workspaces.compact": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否以紧凑显示密度显示 _GitKraken Workspaces_ 视图",
                        "scope": "window",
                        "order": 90
                    },
                    "gitlens.views.workspaces.branches.showBranchComparison": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "branch"
                        ],
                        "enumDescriptions": [
                            "隐藏分支比较",
                            "将分支与用户选择的参考进行比较"
                        ],
                        "default": "branch",
                        "markdownDescription": "指定是否在 _GitKraken Workspaces_ 视图中的每个分支下显示分支与用户选择的引用（分支、标签等）的比较",
                        "scope": "window",
                        "order": 100
                    }
                }
            },
            {
                "id": "patch-details-view",
                "title": "补丁详情查看",
                "order": 35,
                "properties": {
                    "gitlens.views.patchDetails.files.layout": {
                        "type": "string",
                        "default": "auto",
                        "enum": [
                            "auto",
                            "list",
                            "tree"
                        ],
                        "enumDescriptions": [
                            "根据“#gitlens.views.patchDetails.files.threshold#”值和每个嵌套级别的文件数量自动切换将文件显示为“树”或“列表”",
                            "将文件显示为列表",
                            "将文件显示为树"
                        ],
                        "markdownDescription": "指定_补丁详细信息_视图将如何显示文件",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.views.patchDetails.files.threshold": {
                        "type": "number",
                        "default": 5,
                        "markdownDescription": "指定何时根据_补丁详细信息_视图中嵌套级别中的文件数量在将文件显示为“树”或“列表”之间进行切换。仅当“#gitlens.views.patchDetails.files.layout#”设置为“auto”时适用",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.views.patchDetails.files.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（展平）_Patch Details_ 视图中不必要的文件嵌套。仅当“#gitlens.views.patchDetails.files.layout#”设置为“tree”或“auto”时适用",
                        "scope": "window",
                        "order": 32
                    },
                    "gitlens.views.patchDetails.files.icon": {
                        "type": "string",
                        "default": "type",
                        "enum": [
                            "status",
                            "type"
                        ],
                        "enumDescriptions": [
                            "将文件的状态显示为图标",
                            "将文件类型（主题图标）显示为图标"
                        ],
                        "markdownDescription": "指定_补丁详细信息_视图将如何显示文件图标",
                        "scope": "window",
                        "order": 33
                    },
                    "gitlens.views.patchDetails.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_补丁详细信息_视图中显示头像图像而不是提交（或状态）图标",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "file-annotations",
                "title": "文件注释",
                "order": 14,
                "properties": {
                    "gitlens.fileAnnotations.dismissOnEscape": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定按“ESC”键是否消除活动文件注释",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.fileAnnotations.command": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            null,
                            "blame",
                            "heatmap",
                            "changes"
                        ],
                        "enumDescriptions": [
                            "显示一个菜单以选择要切换的文件注释",
                            "切换文件责任注释",
                            "切换文件热图注释",
                            "切换文件更改注释"
                        ],
                        "markdownDescription": "指定编辑器标题中的文件注释按钮是显示菜单还是立即切换指定的文件注释",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.fileAnnotations.preserveWhileEditing": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定编辑时是否保留文件注释。使用 #gitlens.advanced.blame.delayAfterEdit#` 控制在文件仍然脏时更新注释之前等待的时间",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.advanced.blame.delayAfterEdit": {
                        "type": "number",
                        "default": 5000,
                        "markdownDescription": "指定在编辑后但保存之前重新责备未保存的文档之前等待的时间（以毫秒为单位）。使用 0 指定无限等待。仅当文件位于“#gitlens.advanced.sizeThresholdAfterEdit#”下时适用",
                        "scope": "window",
                        "order": 90
                    },
                    "gitlens.advanced.blame.sizeThresholdAfterEdit": {
                        "type": "number",
                        "default": 5000,
                        "markdownDescription": "指定编辑后未保存时允许重新编辑的最大文档大小（以行为单位）。使用 0 指定无最大值",
                        "scope": "window",
                        "order": 91
                    }
                }
            },
            {
                "id": "file-blame",
                "title": "文件责备",
                "order": 15,
                "properties": {
                    "gitlens.blame.toggleMode": {
                        "type": "string",
                        "default": "file",
                        "enum": [
                            "file",
                            "window"
                        ],
                        "enumDescriptions": [
                            "单独切换每个文件",
                            "切换窗口，即一次切换所有文件"
                        ],
                        "markdownDescription": "指定如何切换文件责任注释",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.blame.format": {
                        "type": "string",
                        "default": "${message|50?} ${agoOrDate|14-}",
                        "markdownDescription": "指定文件责备注释的格式。请参阅 GitLens 文档中的 [_Commit Tokens_](https://github.com/gitkraken/vscode-gitlens/wiki/Custom-Formatting#commit-tokens)。日期格式由“#gitlens.blame.dateFormat#”设置控制",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.blame.fontFamily": {
                        "type": "string",
                        "default": "",
                        "markdownDescription": "指定文件责备注释的字体系列",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.blame.fontSize": {
                        "type": "number",
                        "default": 0,
                        "markdownDescription": "指定文件责备注释的字体大小",
                        "scope": "window",
                        "order": 23
                    },
                    "gitlens.blame.fontStyle": {
                        "type": "string",
                        "default": "normal",
                        "markdownDescription": "指定文件责备注释的字体样式",
                        "scope": "window",
                        "order": 24
                    },
                    "gitlens.blame.fontWeight": {
                        "type": "string",
                        "default": "normal",
                        "markdownDescription": "指定文件责备注释的字体粗细",
                        "scope": "window",
                        "order": 25
                    },
                    "gitlens.blame.heatmap.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在文件指责注释中提供热图指示器",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.blame.heatmap.location": {
                        "type": "string",
                        "default": "right",
                        "enum": [
                            "left",
                            "right"
                        ],
                        "enumDescriptions": [
                            "在文件责任注释的左边缘添加热图指示器",
                            "在文件责备注释的右边缘添加热图指示器"
                        ],
                        "markdownDescription": "指定热图指示器将在文件责备注释中显示的位置",
                        "scope": "window",
                        "order": 31
                    },
                    "gitlens.blame.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在文件责备注释中显示头像图片",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.blame.compact": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否压缩（删除重复）匹配的相邻文件责任注释",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.blame.highlight.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否突出显示与当前行关联的行",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.blame.highlight.locations": {
                        "type": "array",
                        "default": [
                            "gutter",
                            "line",
                            "overview"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "gutter",
                                "line",
                                "overview"
                            ],
                            "enumDescriptions": [
                                "向装订线添加指示器",
                                "添加全行突出显示背景颜色",
                                "向滚动条添加指示器"
                            ]
                        },
                        "minItems": 1,
                        "maxItems": 3,
                        "uniqueItems": true,
                        "markdownDescription": "指定关联线高亮显示的位置",
                        "scope": "window",
                        "order": 61
                    },
                    "gitlens.blame.separateLines": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定文件责备注释是否以小间隙分隔",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.blame.dateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定如何在文件责备注释中格式化绝对日期（例如使用“${date}”标记）。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 80
                    }
                }
            },
            {
                "id": "file-changes",
                "title": "文件更改",
                "order": 16,
                "properties": {
                    "gitlens.changes.toggleMode": {
                        "type": "string",
                        "default": "file",
                        "enum": [
                            "file",
                            "window"
                        ],
                        "enumDescriptions": [
                            "单独切换每个文件",
                            "切换窗口，即一次切换所有文件"
                        ],
                        "markdownDescription": "指定文件更改注释的切换方式",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.changes.locations": {
                        "type": "array",
                        "default": [
                            "gutter",
                            "line",
                            "overview"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "gutter",
                                "line",
                                "overview"
                            ],
                            "enumDescriptions": [
                                "向装订线添加指示器",
                                "添加全行突出显示背景颜色",
                                "向滚动条添加指示器"
                            ]
                        },
                        "minItems": 1,
                        "maxItems": 3,
                        "uniqueItems": true,
                        "markdownDescription": "指定文件更改注释的指示符将显示在何处",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "file-heatmap",
                "title": "文件热图",
                "order": 17,
                "properties": {
                    "gitlens.heatmap.toggleMode": {
                        "type": "string",
                        "default": "file",
                        "enum": [
                            "file",
                            "window"
                        ],
                        "enumDescriptions": [
                            "单独切换每个文件",
                            "切换窗口，即一次切换所有文件"
                        ],
                        "markdownDescription": "指定如何切换文件热图注释",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.heatmap.locations": {
                        "type": "array",
                        "default": [
                            "gutter",
                            "overview"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "gutter",
                                "line",
                                "overview"
                            ],
                            "enumDescriptions": [
                                "向装订线添加指示器",
                                "添加全行突出显示背景颜色",
                                "向滚动条添加指示器"
                            ]
                        },
                        "minItems": 1,
                        "maxItems": 3,
                        "uniqueItems": true,
                        "markdownDescription": "指定文件热图注释指示符的显示位置",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.heatmap.fadeLines": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否淡出旧行",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.heatmap.ageThreshold": {
                        "type": "number",
                        "default": 90,
                        "markdownDescription": "指定最近更改的时间（以天为单位），在此之后文件热图注释将是冷的而不是热的（即将使用“#gitlens.heatmap.coldColor#”而不是“#gitlens.heatmap.hotColor#”）",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.heatmap.coldColor": {
                        "type": "string",
                        "default": "#0a60f6",
                        "markdownDescription": "指定当最近的更改比“#gitlens.heatmap.ageThreshold#”值旧（冷）时文件热图注释的基色",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.heatmap.hotColor": {
                        "type": "string",
                        "default": "#f66a0a",
                        "markdownDescription": "指定当最近的更改比“#gitlens.heatmap.ageThreshold#”值新（热）时文件热图注释的基色",
                        "scope": "window",
                        "order": 50
                    }
                }
            },
            {
                "id": "graph",
                "title": "提交图",
                "order": 200,
                "properties": {
                    "gitlens.graph.allowMultiple": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否允许在编辑器区域打开_Commit Graph_的多个实例",
                        "scope": "window",
                        "order": 5
                    },
                    "gitlens.graph.defaultItemLimit": {
                        "type": "number",
                        "default": 500,
                        "markdownDescription": "指定在_提交图表_中显示的默认项目数。使用 0 指定无限制",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.graph.pageItemLimit": {
                        "type": "number",
                        "default": 200,
                        "markdownDescription": "指定在_Commit Graph_ 中分页时要获取的附加项目数。使用 0 指定无限制",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.graph.searchItemLimit": {
                        "type": "number",
                        "default": 100,
                        "markdownDescription": "指定在_Commit Graph_中搜索时要收集的结果数。使用 0 指定无限制",
                        "scope": "window",
                        "order": 12
                    },
                    "gitlens.graph.scrollMarkers.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_Commit Graph_中的滚动条上显示标记",
                        "scope": "window",
                        "order": 13
                    },
                    "gitlens.graph.scrollMarkers.additionalTypes": {
                        "type": "array",
                        "default": [
                            "localBranches",
                            "stashes"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "localBranches",
                                "remoteBranches",
                                "pullRequests",
                                "stashes",
                                "tags"
                            ],
                            "enumDescriptions": [
                                "标记当地分支机构的位置",
                                "标记远程分支的位置",
                                "标记拉取请求的位置",
                                "标记藏匿位置",
                                "标记标签的位置"
                            ]
                        },
                        "minItems": 0,
                        "maxItems": 5,
                        "uniqueItems": true,
                        "markdownDescription": "指定要在_Commit Graph_中的滚动条上显示的其他标记",
                        "scope": "window",
                        "order": 14
                    },
                    "gitlens.graph.scrollRowPadding": {
                        "type": "number",
                        "default": 0,
                        "markdownDescription": "指定使用键盘或搜索更改所选行时图表将滚动的距离边缘的行数",
                        "scope": "window",
                        "order": 14
                    },
                    "gitlens.graph.showDetailsView": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "default": "selection",
                        "enum": [
                            false,
                            "open",
                            "selection"
                        ],
                        "enumDescriptions": [
                            "从不自动显示_提交详细信息_视图",
                            "仅在打开_Commit Graph_时自动显示_Commit Details_视图",
                            "当_提交图表_中的选择发生更改时，自动显示_提交详细信息_视图"
                        ],
                        "markdownDescription": "指定何时显示_提交图表_中所选行的_提交详细信息_视图",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.graph.showGhostRefsOnRowHover": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定当鼠标悬停在_Commit Graph_中的行上或选择行时是否显示幽灵分支/标签",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.graph.highlightRowsOnRefHover": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定当鼠标悬停在_Commit Graph_中的分支/标签上时是否突出显示与该分支/标签关联的行",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.graph.dimMergeCommits": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在_Commit Graph_中淡化（不再强调）合并提交行",
                        "scope": "window",
                        "order": 23
                    },
                    "gitlens.graph.showRemoteNames": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在_Commit Graph_中显示远程分支上的远程名称",
                        "scope": "window",
                        "order": 24
                    },
                    "gitlens.graph.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_Commit Graph_中显示头像图像而不是作者姓名首字母和远程图标",
                        "scope": "window",
                        "order": 25
                    },
                    "gitlens.graph.showUpstreamStatus": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_Commit Graph_中显示本地分支的上游状态",
                        "scope": "window",
                        "order": 26
                    },
                    "gitlens.graph.pullRequests.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_Commit Graph_中显示远程分支上的关联拉取请求。需要连接到受支持的远程服务（例如 GitHub）",
                        "scope": "window",
                        "order": 27
                    },
                    "gitlens.graph.commitOrdering": {
                        "type": "string",
                        "default": "date",
                        "enum": [
                            "date",
                            "author-date",
                            "topo"
                        ],
                        "enumDescriptions": [
                            "按提交时间戳的逆时间顺序显示提交",
                            "按作者时间戳的逆时间顺序显示提交",
                            "按提交时间戳的逆时间顺序显示提交，但避免混合多行历史记录"
                        ],
                        "markdownDescription": "指定提交在_提交图_上显示的顺序",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.graph.onlyFollowFirstParent": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定在_Commit Graph_上显示提交时是否仅遵循第一个父级",
                        "order": 31
                    },
                    "gitlens.graph.dateStyle": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            "relative",
                            "absolute"
                        ],
                        "enumDescriptions": [
                            "例如1 天前",
                            "例如2018年7月25日晚上7点18分"
                        ],
                        "markdownDescription": "指定日期在_提交图表_中的显示方式",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.graph.dateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定绝对日期在_提交图表_中的格式。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 41
                    },
                    "gitlens.graph.statusBar.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在状态栏中显示_Commit Graph_",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.graph.layout": {
                        "type": "string",
                        "default": "panel",
                        "enum": [
                            "editor",
                            "panel"
                        ],
                        "enumDescriptions": [
                            "更喜欢在编辑器区域显示提交图",
                            "更喜欢在底部面板中显示提交图"
                        ],
                        "markdownDescription": "指定_Commit Graph_的首选布局",
                        "scope": "window",
                        "order": 99
                    },
                    "gitlens.graph.minimap.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在_提交图_上方显示提交活动的小地图",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.graph.minimap.dataType": {
                        "type": "string",
                        "default": "commits",
                        "enum": [
                            "commits",
                            "lines"
                        ],
                        "enumDescriptions": [
                            "在小地图中显示每天的提交数量",
                            "显示小地图中每天更改的行数"
                        ],
                        "markdownDescription": "指定要在_Commit Graph_中的小地图上显示的数据",
                        "scope": "window",
                        "order": 101
                    },
                    "gitlens.graph.minimap.additionalTypes": {
                        "type": "array",
                        "default": [
                            "localBranches",
                            "stashes"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "localBranches",
                                "remoteBranches",
                                "pullRequests",
                                "stashes",
                                "tags"
                            ],
                            "enumDescriptions": [
                                "标记当地分支机构的位置",
                                "标记远程分支的位置",
                                "标记拉取请求的位置",
                                "标记藏匿位置",
                                "标记标签的位置"
                            ]
                        },
                        "minItems": 0,
                        "maxItems": 5,
                        "uniqueItems": true,
                        "markdownDescription": "指定要在_Commit Graph_中的小地图上显示的其他标记",
                        "scope": "window",
                        "order": 102
                    }
                }
            },
            {
                "id": "cloud-patches",
                "title": "云补丁（预览）",
                "order": 300,
                "properties": {
                    "gitlens.cloudPatches.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用_云补丁_的预览，这使您可以轻松安全地与团队成员或其他开发人员共享代码",
                        "scope": "window",
                        "order": 10
                    }
                }
            },
            {
                "id": "focus",
                "title": "启动板（预览）",
                "order": 400,
                "properties": {
                    "gitlens.launchpad.ignoredRepositories": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        },
                        "markdownDescription": "指定要在 _Launchpad_ 中忽略的存储库",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.launchpad.ignoredOrganizations": {
                        "type": "array",
                        "default": [],
                        "items": {
                            "type": "string"
                        },
                        "markdownDescription": "指定要在 _Launchpad_ 中忽略的组织",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.launchpad.staleThreshold": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定拉取请求被视为过时并移至 _Launchpad_ 中的其他的天数",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.launchpad.indicator.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用_Launchpad_的状态栏指示器",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.launchpad.indicator.icon": {
                        "type": "string",
                        "enum": [
                            "default",
                            "group"
                        ],
                        "enumDescriptions": [
                            "显示启动板图标",
                            "显示最高优先级组的图标"
                        ],
                        "default": "default",
                        "markdownDescription": "指定_Launchpad_状态栏指示器图标的样式",
                        "scope": "window",
                        "order": 110
                    },
                    "gitlens.launchpad.indicator.label": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "enum": [
                            false,
                            "item",
                            "counts"
                        ],
                        "enumDescriptions": [
                            "隐藏标签",
                            "显示需要您注意的最高优先级项目",
                            "显示需要您注意的项目的状态计数"
                        ],
                        "default": "item",
                        "markdownDescription": "指定 _Launchpad_ 状态栏指示器标签的显示",
                        "scope": "window",
                        "order": 120
                    },
                    "gitlens.launchpad.indicator.groups": {
                        "type": "array",
                        "default": [
                            "mergeable",
                            "blocked",
                            "needs-review",
                            "follow-up"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "mergeable",
                                "blocked",
                                "needs-review",
                                "follow-up"
                            ],
                            "enumDescriptions": [
                                "显示可合并的拉取请求",
                                "显示被阻止的拉取请求",
                                "显示需要您审核的拉取请求",
                                "显示需要跟进的拉取请求"
                            ]
                        },
                        "minItems": 1,
                        "uniqueItems": true,
                        "markdownDescription": "指定要在 _Launchpad_ 状态栏指示器上显示的拉取请求组",
                        "scope": "window",
                        "order": 130
                    },
                    "gitlens.launchpad.indicator.useColors": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在 _Launchpad_ 状态栏指示器上使用颜色",
                        "scope": "window",
                        "order": 140
                    },
                    "gitlens.launchpad.indicator.polling.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定状态栏指示器是否将获取并显示 _Launchpad_ 的拉取请求数据",
                        "scope": "window",
                        "order": 150
                    },
                    "gitlens.launchpad.indicator.polling.interval": {
                        "type": "number",
                        "default": 30,
                        "markdownDescription": "指定状态栏指示器为 _Launchpad_ 获取拉取请求数据的速率（以分钟为单位）。使用 0 禁用自动轮询",
                        "scope": "window",
                        "order": 160
                    },
                    "gitlens.launchpad.indicator.openInEditor": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定单击状态栏指示器时是否将 _Launchpad_ 作为编辑器选项卡打开",
                        "scope": "window",
                        "order": 170
                    },
                    "gitlens.launchpad.allowMultiple": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否允许将 _Launchpad_ 的多个实例作为编辑器选项卡打开",
                        "scope": "window",
                        "order": 1000
                    },
                    "gitlens.launchpad.experimental.queryLimit": {
                        "type": "number",
                        "default": 100,
                        "markdownDescription": "指定要在 _Launchpad_ 中查询的拉取请求数量的实验限制",
                        "scope": "window",
                        "order": 1100
                    },
                    "gitlens.launchpad.experimental.queryUseInvolvesFilter": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在 _Launchpad_ 的 GraphQL 查询中使用“involves”过滤器的实验标志",
                        "scope": "window",
                        "order": 1110
                    }
                }
            },
            {
                "id": "visual-history",
                "title": "可视文件历史记录",
                "order": 500,
                "properties": {
                    "gitlens.visualHistory.allowMultiple": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否允许在编辑器区域中打开_Visual File History_的多个实例",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.visualHistory.queryLimit": {
                        "type": "number",
                        "default": 20,
                        "markdownDescription": "由于速率限制，指定可以在 _Visual File History_ 中查询统计信息的提交数量的限制。仅适用于虚拟工作空间。",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "rebase-editor",
                "title": "交互式变基编辑器",
                "order": 600,
                "properties": {
                    "gitlens.rebaseEditor.ordering": {
                        "type": "string",
                        "default": "desc",
                        "enum": [
                            "asc",
                            "desc"
                        ],
                        "enumDescriptions": [
                            "首先显示最旧的提交",
                            "首先显示最新的提交"
                        ],
                        "markdownDescription": "指定如何在_交互式变基编辑器_中显示 Git 提交",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.rebaseEditor.showDetailsView": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "default": "selection",
                        "enum": [
                            false,
                            "open",
                            "selection"
                        ],
                        "enumDescriptions": [
                            "从不自动显示_提交详细信息_视图",
                            "仅在打开_交互式变基编辑器_时自动显示_提交详细信息_视图",
                            "当“交互式变基编辑器”中的选择更改时，自动显示“提交详细信息”视图"
                        ],
                        "markdownDescription": "指定何时在_交互式变基编辑器_中显示所选行的_提交详细信息_视图",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "git-command-palette",
                "title": "Git 命令面板",
                "order": 700,
                "properties": {
                    "gitlens.gitCommands.avatars": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在适用时在快速选择菜单中显示头像图像",
                        "scope": "window",
                        "order": 5
                    },
                    "gitlens.gitCommands.sortBy": {
                        "type": "string",
                        "default": "usage",
                        "enum": [
                            "name",
                            "usage"
                        ],
                        "enumDescriptions": [
                            "按名称对命令进行排序",
                            "按上次使用日期对命令进行排序"
                        ],
                        "markdownDescription": "指定 Git 命令在 _Git 命令面板_ 中的排序方式",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.gitCommands.skipConfirmations": {
                        "type": "array",
                        "default": [
                            "fetch:command",
                            "stash-push:command"
                        ],
                        "items": {
                            "type": "string",
                            "enum": [
                                "branch-create:command",
                                "branch-create:menu",
                                "co-authors:command",
                                "co-authors:menu",
                                "fetch:command",
                                "fetch:menu",
                                "pull:command",
                                "pull:menu",
                                "push:command",
                                "push:menu",
                                "stash-apply:command",
                                "stash-apply:menu",
                                "stash-pop:command",
                                "stash-pop:menu",
                                "stash-push:command",
                                "stash-push:menu",
                                "switch:command",
                                "switch:menu",
                                "tag-create:command",
                                "tag-create:menu"
                            ],
                            "enumDescriptions": [
                                "从命令运行时跳过分支创建确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过分支创建确认",
                                "从命令运行时跳过共同作者确认，例如一个视图动作",
                                "从 Git Command Palette 运行时跳过共同作者确认",
                                "从命令运行时跳过获取确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过获取确认",
                                "从命令运行时跳过拉取确认，例如一个视图动作",
                                "从 Git Command Palette 运行时跳过拉取确认",
                                "从命令运行时跳过推送确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过推送确认",
                                "从命令运行时跳过存储应用确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过存储应用确认",
                                "从命令运行时跳过存储弹出确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过存储弹出确认",
                                "从命令运行时跳过存储推送确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过存储推送确认",
                                "从命令运行时跳过切换确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过切换确认",
                                "从命令运行时跳过标签创建确认，例如一个视图动作",
                                "从 Git 命令面板运行时跳过标签创建确认"
                            ]
                        },
                        "minItems": 0,
                        "maxItems": 14,
                        "uniqueItems": true,
                        "markdownDescription": "指定哪些（以及何时）Git 命令将跳过确认步骤，使用格式：`git-command-name:(menu|command)`",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.gitCommands.closeOnFocusOut": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定当焦点丢失时是否关闭_Git 命令面板_（如果没有，请按“ESC”关闭）",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.gitCommands.search.showResultsInSideBar": {
                        "type": [
                            "boolean",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定是否直接在快速选择菜单、侧边栏中显示提交搜索结果，或者基于上下文",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.gitCommands.search.matchAll": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否匹配所有或任何提交消息搜索模式",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.gitCommands.search.matchCase": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否在考虑或不考虑大小写的情况下匹配提交搜索模式",
                        "scope": "window",
                        "order": 51
                    },
                    "gitlens.gitCommands.search.matchRegex": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否使用正则表达式匹配提交搜索模式",
                        "scope": "window",
                        "order": 52
                    },
                    "gitlens.gitCommands.search.showResultsInView": {
                        "deprecationMessage": "已弃用。此设置已重命名为 gitlens.gitCommands.search.showResultsInSideBar",
                        "markdownDeprecationMessage": "已弃用。此设置已重命名为“#gitlens.gitCommands.search.showResultsInSideBar#”"
                    }
                }
            },
            {
                "id": "integrations",
                "title": "集成",
                "order": 800,
                "properties": {
                    "gitlens.autolinks": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "default": null,
                        "items": {
                            "type": "object",
                            "required": [
                                "prefix",
                                "url"
                            ],
                            "properties": {
                                "prefix": {
                                    "type": "string",
                                    "description": "指定用于生成外部资源自动链接的短前缀"
                                },
                                "title": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "default": null,
                                    "description": "为生成的自动链接指定可选标题。使用 `<num>` 作为参考编号的变量"
                                },
                                "url": {
                                    "type": "string",
                                    "description": "指定要链接到的外部资源的 URL。使用 `<num>` 作为参考编号的变量"
                                },
                                "alphanumeric": {
                                    "type": "boolean",
                                    "description": "指定“<num>”中是否允许使用字母数字字符",
                                    "default": false
                                },
                                "ignoreCase": {
                                    "type": "boolean",
                                    "description": "指定匹配前缀时是否忽略大小写",
                                    "default": false
                                }
                            },
                            "additionalProperties": false
                        },
                        "uniqueItems": true,
                        "markdownDescription": "指定提交消息中自动链接到外部资源。使用 `<num>` 作为参考编号的变量",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.integrations.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用与任何支持的远程服务的丰富集成",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.remotes": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "default": null,
                        "items": {
                            "type": "object",
                            "required": [
                                "type"
                            ],
                            "oneOf": [
                                {
                                    "required": [
                                        "domain"
                                    ]
                                },
                                {
                                    "required": [
                                        "regex"
                                    ]
                                }
                            ],
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "enum": [
                                        "Custom",
                                        "AzureDevOps",
                                        "Bitbucket",
                                        "BitbucketServer",
                                        "Gerrit",
                                        "GoogleSource",
                                        "Gitea",
                                        "GitHub",
                                        "GitLab"
                                    ],
                                    "description": "指定自定义远程服务的类型"
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "指定用于将此自定义配置与 Git 远程匹配的域名"
                                },
                                "regex": {
                                    "type": "string",
                                    "description": "指定用于将此自定义配置与 Git 远程匹配并捕获“域名”和“路径”的正则表达式"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "为自定义远程服务指定可选的友好名称"
                                },
                                "protocol": {
                                    "type": "string",
                                    "default": "https",
                                    "description": "为自定义远程服务指定可选的 URL 协议"
                                },
                                "ignoreSSLErrors": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "指定连接远程服务时是否忽略无效的 SSL 证书错误"
                                },
                                "urls": {
                                    "type": "object",
                                    "required": [
                                        "repository",
                                        "branches",
                                        "branch",
                                        "commit",
                                        "file",
                                        "fileInCommit",
                                        "fileInBranch",
                                        "fileLine",
                                        "fileRange"
                                    ],
                                    "properties": {
                                        "repository": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的存储库 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径"
                                        },
                                        "branches": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的分支 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${branch}` — 分支"
                                        },
                                        "branch": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的分支 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${branch}` — 分支"
                                        },
                                        "commit": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的提交 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${id}` — 提交 SHA"
                                        },
                                        "file": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的文件 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${file}` — 文件名\\\n`${line}` — 格式化的行信息"
                                        },
                                        "fileInBranch": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的分支文件 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${file}` — 文件名\\\n`${branch}` — 分支\\\n`${line}` — 格式化的行信息"
                                        },
                                        "fileInCommit": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的提交文件 URL 的格式\n\n可用代币\\\n`${repo}` — 存储库路径\\\n`${file}` — 文件名\\\n`${id}` — 提交 SHA\\\n`${line}` — 格式化的行信息"
                                        },
                                        "fileLine": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的文件 URL 中的行格式\n\n可用代币\\\n`${line}` — 行"
                                        },
                                        "fileRange": {
                                            "type": "string",
                                            "markdownDescription": "指定自定义远程服务的文件 URL 中的范围格式\n\n可用代币\\\n`${start}` — 起始行\\\n`${end}` — 结束行"
                                        }
                                    },
                                    "additionalProperties": false
                                }
                            }
                        },
                        "uniqueItems": true,
                        "markdownDescription": "指定与 Git 远程匹配的自定义远程服务，以检测内置远程服务的自定义域或为自定义远程服务提供支持",
                        "scope": "resource",
                        "order": 30
                    },
                    "gitlens.partners": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "additionalProperties": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "指定是否应显示合作伙伴集成"
                                }
                            },
                            "additionalProperties": true,
                            "description": "指定合作伙伴集成的配置"
                        },
                        "default": null,
                        "description": "指定合作伙伴集成的配置",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.liveshare.enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "指定是否启用与 Visual Studio Live Share 的集成",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.liveshare.allowGuestAccess": {
                        "type": "boolean",
                        "default": true,
                        "description": "指定在使用 Visual Studio Live Share 时是否允许来宾访问 GitLens 功能",
                        "scope": "window",
                        "order": 51
                    }
                }
            },
            {
                "id": "terminal",
                "title": "终端",
                "order": 900,
                "properties": {
                    "gitlens.terminalLinks.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用终端链接 - 集成终端中的自动链接可快速跳转到提交、分支、标签等的更多详细信息",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.terminalLinks.showDetailsView": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定在集成终端中单击提交链接时是否显示_提交详细信息_视图",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.terminal.overrideGitEditor": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否使用 VS Code 作为 Gitlens 终端命令的 Git 的 `core.editor`",
                        "scope": "window",
                        "order": 100
                    }
                }
            },
            {
                "id": "ai",
                "title": "人工智能（实验）",
                "order": 1000,
                "properties": {
                    "gitlens.ai.experimental.generateCommitMessage.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用 GitLens 实验性的、人工智能驱动的、按需提交消息生成",
                        "scope": "window",
                        "order": 1
                    },
                    "gitlens.experimental.generateCommitMessagePrompt": {
                        "type": "string",
                        "default": "Now, please generate a commit message. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
                        "markdownDescription": "指定用于告诉 AI 提供者如何构建或格式化生成的提交消息的提示",
                        "scope": "window",
                        "order": 2
                    },
                    "gitlens.experimental.generateCloudPatchMessagePrompt": {
                        "type": "string",
                        "default": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
                        "markdownDescription": "指定用于告诉 AI 提供者如何构建或格式化生成的标题和描述的提示",
                        "scope": "window",
                        "order": 3
                    },
                    "gitlens.experimental.generateCodeSuggestMessagePrompt": {
                        "type": "string",
                        "default": "Now, please generate a title and optional description. Ensure that it includes a precise and informative subject line that succinctly summarizes the crux of the changes in under 50 characters. If necessary, follow with an explanatory body providing insight into the nature of the changes, the reasoning behind them, and any significant consequences or considerations arising from them. Conclude with any relevant issue references at the end of the message.",
                        "markdownDescription": "指定用于告诉 AI 提供者如何构建或格式化生成的标题和描述的提示",
                        "scope": "window",
                        "order": 3
                    },
                    "gitlens.ai.experimental.model": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            "openai:gpt-4o",
                            "openai:gpt-4o-mini",
                            "openai:gpt-4-turbo",
                            "openai:gpt-4-turbo-preview",
                            "openai:gpt-4",
                            "openai:gpt-4-32k",
                            "openai:gpt-3.5-turbo",
                            "openai:gpt-3.5-turbo-16k",
                            "anthropic:claude-3-opus-20240229",
                            "anthropic:claude-3-5-sonnet-20240620",
                            "anthropic:claude-3-sonnet-20240229",
                            "anthropic:claude-3-haiku-20240307",
                            "anthropic:claude-2.1",
                            "anthropic:claude-2",
                            "anthropic:claude-instant-1",
                            "google:gemini-1.5-pro-latest",
                            "google:gemini-1.5-flash-latest",
                            "google:gemini-1.0-pro",
                            "vscode"
                        ],
                        "enumDescriptions": [
                            "OpenAI GPT-4 Omni",
                            "OpenAI GPT-4 Omni Mini",
                            "OpenAI GPT-4 Turbo 与视觉",
                            "OpenAI GPT-4 Turbo 预览版",
                            "OpenAI GPT-4",
                            "OpenAI GPT-4 32k",
                            "OpenAI GPT-3.5 Turbo",
                            "OpenAI GPT-3.5 Turbo 16k",
                            "人类克劳德 3 作品",
                            "人择克劳德 3.5 十四行诗",
                            "人择克劳德第 3 首十四行诗",
                            "人性克劳德 3 俳句",
                            "人类克劳德 2.1",
                            "人类克劳德 2",
                            "人类克劳德即时 1.2",
                            "谷歌双子座 1.5 Pro（最新）",
                            "谷歌双子座 1.5 闪存",
                            "谷歌双子座 1.0 专业版",
                            "VS 代码扩展"
                        ],
                        "markdownDescription": "指定用于 GitLens 实验性 AI 功能的 AI 模型",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.ai.experimental.openai.url": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定用于通过 Azure 访问 OpenAI 模型的自定义 URL。 Azure URL 应采用以下格式：https://{your-resource-name}.openai.azure.com/openai/deployments/{deployment-id}/chat/completions?api-version={api-version}",
                        "scope": "window",
                        "order": 102
                    },
                    "gitlens.ai.experimental.vscode.model": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "pattern": "^(.*):(.*)$",
                        "markdownDescription": "指定 VS Code 提供的模型用于 GitLens 的实验性 AI 功能，格式为 `vendor:family`",
                        "scope": "window",
                        "order": 105
                    }
                }
            },
            {
                "id": "date-times",
                "title": "日期和时间",
                "order": 1100,
                "properties": {
                    "gitlens.defaultDateStyle": {
                        "type": "string",
                        "default": "relative",
                        "enum": [
                            "relative",
                            "absolute"
                        ],
                        "enumDescriptions": [
                            "例如1 天前",
                            "例如2018年7月25日晚上7点18分"
                        ],
                        "markdownDescription": "指定默认情况下如何显示日期",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.defaultDateFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定默认情况下绝对日期的格式。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.defaultDateLocale": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定用于日期格式设置的区域设置，即 [BCP 47 语言标记](https://en.wikipedia.org/wiki/IETF_language_tag#List_of_major_primary_language_subtags)，默认为 VS Code 区域设置。使用 `system` 遵循当前系统区域设置，或选择特定区域设置，例如 `en-US` — 美国英语、`en-GB` — 英式英语、`de-DE` — 德语、`ja-JP` =日语等",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.defaultDateShortFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定默认情况下格式化多短的绝对日期。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 22
                    },
                    "gitlens.defaultTimeFormat": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定默认情况下时间的格式。请参阅 [Moment.js 文档](https://momentjs.com/docs/#/displaying/format/) 了解支持的格式",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.defaultDateSource": {
                        "type": "string",
                        "default": "authored",
                        "enum": [
                            "authored",
                            "committed"
                        ],
                        "enumDescriptions": [
                            "使用更改的创作日期（即最初编写的日期）",
                            "使用提交更改的日期"
                        ],
                        "markdownDescription": "指定提交日期是否应使用创作日期或提交日期",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "sorting",
                "title": "排序",
                "order": 1200,
                "properties": {
                    "gitlens.sortRepositoriesBy": {
                        "type": "string",
                        "default": "discovered",
                        "enum": [
                            "discovered",
                            "lastFetched:desc",
                            "lastFetched:asc",
                            "name:asc",
                            "name:desc"
                        ],
                        "enumDescriptions": [
                            "按发现或工作区顺序对存储库进行排序",
                            "按上次获取日期降序对存储库进行排序",
                            "按上次获取日期升序对存储库进行排序",
                            "按名称升序对存储库进行排序",
                            "按名称降序对存储库进行排序"
                        ],
                        "markdownDescription": "指定存储库在快速选择菜单和视图中的排序方式",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.sortBranchesBy": {
                        "type": "string",
                        "default": "date:desc",
                        "enum": [
                            "date:desc",
                            "date:asc",
                            "name:asc",
                            "name:desc"
                        ],
                        "enumDescriptions": [
                            "按最近提交日期降序对分支进行排序",
                            "按最近提交日期升序对分支进行排序",
                            "按名称升序对分支进行排序",
                            "按名称降序对分支进行排序"
                        ],
                        "markdownDescription": "指定分支在快速选择菜单和视图中的排序方式",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.sortTagsBy": {
                        "type": "string",
                        "default": "date:desc",
                        "enum": [
                            "date:desc",
                            "date:asc",
                            "name:asc",
                            "name:desc"
                        ],
                        "enumDescriptions": [
                            "按日期降序对标签进行排序",
                            "按日期升序对标签进行排序",
                            "按名称升序对标签进行排序",
                            "按名称降序对标签进行排序"
                        ],
                        "markdownDescription": "指定标签在快速选择菜单和视图中的排序方式",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.sortContributorsBy": {
                        "type": "string",
                        "default": "count:desc",
                        "enum": [
                            "count:desc",
                            "count:asc",
                            "date:desc",
                            "date:asc",
                            "name:asc",
                            "name:desc"
                        ],
                        "enumDescriptions": [
                            "按提交数量降序对贡献者进行排序",
                            "按提交计数升序对贡献者进行排序",
                            "按最近提交日期降序对贡献者进行排序",
                            "按最近提交日期升序对贡献者进行排序",
                            "按贡献者姓名升序排序",
                            "按贡献者姓名降序排序"
                        ],
                        "markdownDescription": "指定如何在快速选择菜单和视图中对贡献者进行排序",
                        "scope": "window",
                        "order": 40
                    }
                }
            },
            {
                "id": "menus-toolbars",
                "title": "菜单和工具栏",
                "order": 1300,
                "properties": {
                    "gitlens.menus": {
                        "anyOf": [
                            {
                                "enum": [
                                    false
                                ]
                            },
                            {
                                "type": "object",
                                "properties": {
                                    "editor": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "blame": {
                                                        "type": "boolean"
                                                    },
                                                    "clipboard": {
                                                        "type": "boolean"
                                                    },
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "history": {
                                                        "type": "boolean"
                                                    },
                                                    "remote": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "editorGroup": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "blame": {
                                                        "type": "boolean"
                                                    },
                                                    "compare": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "editorGutter": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "remote": {
                                                        "type": "boolean"
                                                    },
                                                    "share": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "editorTab": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "clipboard": {
                                                        "type": "boolean"
                                                    },
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "history": {
                                                        "type": "boolean"
                                                    },
                                                    "remote": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "explorer": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "clipboard": {
                                                        "type": "boolean"
                                                    },
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "history": {
                                                        "type": "boolean"
                                                    },
                                                    "remote": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "ghpr": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "worktree": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scm": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "graph": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmRepositoryInline": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "graph": {
                                                        "type": "boolean"
                                                    },
                                                    "stash": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmRepository": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "authors": {
                                                        "type": "boolean"
                                                    },
                                                    "generateCommitMessage": {
                                                        "type": "boolean"
                                                    },
                                                    "graph": {
                                                        "type": "boolean"
                                                    },
                                                    "patch": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmGroupInline": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "stash": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmGroup": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "openClose": {
                                                        "type": "boolean"
                                                    },
                                                    "patch": {
                                                        "type": "boolean"
                                                    },
                                                    "stash": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmItemInline": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "stash": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "scmItem": {
                                        "anyOf": [
                                            {
                                                "enum": [
                                                    false
                                                ]
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "clipboard": {
                                                        "type": "boolean"
                                                    },
                                                    "compare": {
                                                        "type": "boolean"
                                                    },
                                                    "history": {
                                                        "type": "boolean"
                                                    },
                                                    "remote": {
                                                        "type": "boolean"
                                                    },
                                                    "share": {
                                                        "type": "boolean"
                                                    },
                                                    "stash": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                "additionalProperties": false
                            }
                        ],
                        "default": {
                            "editor": {
                                "blame": true,
                                "clipboard": true,
                                "compare": true,
                                "history": true,
                                "remote": true
                            },
                            "editorGroup": {
                                "blame": true,
                                "compare": true
                            },
                            "editorGutter": {
                                "compare": true,
                                "remote": true,
                                "share": true
                            },
                            "editorTab": {
                                "clipboard": true,
                                "compare": true,
                                "history": true,
                                "remote": true
                            },
                            "explorer": {
                                "clipboard": true,
                                "compare": true,
                                "history": true,
                                "remote": true
                            },
                            "ghpr": {
                                "worktree": true
                            },
                            "scm": {
                                "graph": true
                            },
                            "scmRepositoryInline": {
                                "graph": true,
                                "stash": false
                            },
                            "scmRepository": {
                                "authors": true,
                                "generateCommitMessage": true,
                                "patch": true,
                                "graph": false
                            },
                            "scmGroupInline": {
                                "stash": true
                            },
                            "scmGroup": {
                                "compare": true,
                                "openClose": true,
                                "patch": true,
                                "stash": true
                            },
                            "scmItemInline": {
                                "stash": false
                            },
                            "scmItem": {
                                "clipboard": true,
                                "compare": true,
                                "history": true,
                                "remote": true,
                                "share": true,
                                "stash": true
                            }
                        },
                        "markdownDescription": "指定哪些命令将添加到哪些菜单",
                        "scope": "window",
                        "order": 10
                    }
                }
            },
            {
                "id": "keyboard",
                "title": "键盘快捷键",
                "order": 1400,
                "properties": {
                    "gitlens.keymap": {
                        "type": "string",
                        "default": "chorded",
                        "enum": [
                            "alternate",
                            "chorded",
                            "none"
                        ],
                        "enumDescriptions": [
                            "添加一组以“Alt”开头的备用快捷键（在 macOS 上为 ⌥）",
                            "添加一组以“Ctrl+Shift+G”开头的快捷键（macOS 上为“⌥⌘G”）",
                            "不会添加快捷键"
                        ],
                        "markdownDescription": "指定用于 GitLens 快捷键的键盘映射",
                        "scope": "window",
                        "order": 10
                    }
                }
            },
            {
                "id": "modes",
                "title": "模式",
                "order": 1500,
                "properties": {
                    "gitlens.mode.statusBar.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在状态栏中提供活动的 GitLens 模式",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.mode.statusBar.alignment": {
                        "type": "string",
                        "default": "right",
                        "enum": [
                            "left",
                            "right"
                        ],
                        "enumDescriptions": [
                            "向左对齐",
                            "向右对齐"
                        ],
                        "markdownDescription": "指定状态栏中活动的 GitLens 模式对齐方式",
                        "scope": "window",
                        "order": 11
                    },
                    "gitlens.mode.active": {
                        "type": "string",
                        "markdownDescription": "指定活动的 GitLens 模式（如果有）",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.modes": {
                        "type": "object",
                        "properties": {
                            "zen": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "指定此用户定义模式的友好名称"
                                    },
                                    "statusBarItemName": {
                                        "type": "string",
                                        "description": "指定当用户定义模式处于活动状态时状态栏中显示的名称"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "指定该用户自定义模式的描述"
                                    },
                                    "codeLens": {
                                        "type": "boolean",
                                        "description": "指定当此用户定义模式处于活动状态时是否显示任何 Git CodeLens"
                                    },
                                    "currentLine": {
                                        "type": "boolean",
                                        "description": "指定当用户定义模式处于活动状态时是否显示当前行的内联责任注释"
                                    },
                                    "hovers": {
                                        "type": "boolean",
                                        "description": "指定当此用户定义模式处于活动状态时是否显示任何悬停"
                                    },
                                    "statusBar": {
                                        "type": "boolean",
                                        "description": "指定当用户定义模式处于活动状态时是否在状态栏中显示责备信息"
                                    }
                                }
                            },
                            "review": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "指定此用户定义模式的友好名称"
                                    },
                                    "statusBarItemName": {
                                        "type": "string",
                                        "description": "指定当用户定义模式处于活动状态时状态栏中显示的名称"
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "指定该用户自定义模式的描述"
                                    },
                                    "codeLens": {
                                        "type": "boolean",
                                        "description": "指定当此用户定义模式处于活动状态时是否显示任何 Git CodeLens"
                                    },
                                    "currentLine": {
                                        "type": "boolean",
                                        "description": "指定当用户定义模式处于活动状态时是否显示当前行的内联责任注释"
                                    },
                                    "hovers": {
                                        "type": "boolean",
                                        "description": "指定当此用户定义模式处于活动状态时是否显示任何悬停"
                                    },
                                    "statusBar": {
                                        "type": "boolean",
                                        "description": "指定当用户定义模式处于活动状态时是否在状态栏中显示责备信息"
                                    }
                                }
                            }
                        },
                        "additionalProperties": {
                            "type": "object",
                            "required": [
                                "name"
                            ],
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "指定此用户定义模式的友好名称"
                                },
                                "statusBarItemName": {
                                    "type": "string",
                                    "description": "指定当用户定义模式处于活动状态时状态栏中显示的名称"
                                },
                                "description": {
                                    "type": "string",
                                    "description": "指定该用户自定义模式的描述"
                                },
                                "annotations": {
                                    "type": "string",
                                    "enum": [
                                        "blame",
                                        "changes",
                                        "heatmap"
                                    ],
                                    "enumDescriptions": [
                                        "显示文件责备注释",
                                        "显示文件更改注释",
                                        "显示文件热图注释"
                                    ],
                                    "description": "指定当用户定义模式处于活动状态时将显示哪个（如果有）文件注释"
                                },
                                "codeLens": {
                                    "type": "boolean",
                                    "description": "指定当此用户定义模式处于活动状态时是否显示任何 Git CodeLens"
                                },
                                "currentLine": {
                                    "type": "boolean",
                                    "description": "指定当用户定义模式处于活动状态时是否显示当前行的内联责任注释"
                                },
                                "hovers": {
                                    "type": "boolean",
                                    "description": "指定当此用户定义模式处于活动状态时是否显示任何悬停"
                                },
                                "statusBar": {
                                    "type": "boolean",
                                    "description": "指定当用户定义模式处于活动状态时是否在状态栏中显示责备信息"
                                }
                            }
                        },
                        "default": {
                            "zen": {
                                "name": "Zen",
                                "statusBarItemName": "Zen",
                                "description": "为了获得禅宗般的体验，禁用许多视觉功能",
                                "codeLens": false,
                                "currentLine": false,
                                "hovers": false,
                                "statusBar": false
                            },
                            "review": {
                                "name": "Review",
                                "statusBarItemName": "Reviewing",
                                "description": "用于审查代码，启用许多视觉功能",
                                "codeLens": true,
                                "currentLine": true,
                                "hovers": true
                            }
                        },
                        "markdownDescription": "指定用户定义的 GitLens 模式",
                        "scope": "window",
                        "order": 30
                    }
                }
            },
            {
                "id": "gitkraken",
                "title": "吉特克拉肯",
                "order": 9000,
                "properties": {
                    "gitlens.gitKraken.activeOrganizationId": {
                        "type": "string",
                        "markdownDescription": "指定用户在 GitLens 中活跃的 GitKraken 组织的 ID",
                        "scope": "window",
                        "order": 1
                    }
                }
            },
            {
                "id": "experimental",
                "title": "实验性的",
                "order": 9500,
                "properties": {
                    "gitlens.cloudPatches.experimental.layout": {
                        "type": "string",
                        "default": "view",
                        "enum": [
                            "editor",
                            "view"
                        ],
                        "enumDescriptions": [
                            "更喜欢在编辑器区域显示云补丁",
                            "更喜欢在视图中显示云补丁"
                        ],
                        "markdownDescription": "（实验性）指定 _Cloud Patches_ 的首选布局",
                        "scope": "window",
                        "order": 20
                    }
                }
            },
            {
                "id": "advanced",
                "title": "先进的",
                "order": 10000,
                "properties": {
                    "gitlens.detectNestedRepositories": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定打开文件时是否尝试检测嵌套存储库",
                        "scope": "resource",
                        "order": 0
                    },
                    "gitlens.telemetry.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否允许 GitLens 发送产品使用情况遥测数据。\n\n_**注意：** 为了让 GitLens 发送任何遥测数据，必须启用此设置和 VS Code 遥测数据。如果其中之一被禁用，则不会发送遥测数据。_",
                        "scope": "window",
                        "order": 1
                    },
                    "gitlens.advanced.messages": {
                        "type": "object",
                        "default": {
                            "suppressCommitHasNoPreviousCommitWarning": false,
                            "suppressCommitNotFoundWarning": false,
                            "suppressCreatePullRequestPrompt": false,
                            "suppressDebugLoggingWarning": false,
                            "suppressFileNotUnderSourceControlWarning": false,
                            "suppressGitDisabledWarning": false,
                            "suppressGitMissingWarning": false,
                            "suppressGitVersionWarning": false,
                            "suppressLineUncommittedWarning": false,
                            "suppressNoRepositoryWarning": false,
                            "suppressRebaseSwitchToTextWarning": false,
                            "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": false,
                            "suppressIntegrationRequestFailed500Warning": false,
                            "suppressIntegrationRequestTimedOutWarning": false,
                            "suppressBlameInvalidIgnoreRevsFileWarning": false,
                            "suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": false
                        },
                        "properties": {
                            "suppressCommitHasNoPreviousCommitWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "提交没有先前的提交警告"
                            },
                            "suppressCommitNotFoundWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "未找到提交警告"
                            },
                            "suppressCreatePullRequestPrompt": {
                                "type": "boolean",
                                "default": false,
                                "description": "创建拉取请求提示"
                            },
                            "suppressDebugLoggingWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "调试日志警告"
                            },
                            "suppressFileNotUnderSourceControlWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "文件不受源代码控制警告"
                            },
                            "suppressGitDisabledWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "Git 禁用警告"
                            },
                            "suppressGitMissingWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "Git 缺失警告"
                            },
                            "suppressGitVersionWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "Git 版本警告"
                            },
                            "suppressLineUncommittedWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "线路未提交警告"
                            },
                            "suppressNoRepositoryWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "无存储库警告"
                            },
                            "suppressRebaseSwitchToTextWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "变基切换到文本警告"
                            },
                            "suppressIntegrationDisconnectedTooManyFailedRequestsWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "集成已断开；太多失败的请求警告"
                            },
                            "suppressIntegrationRequestFailed500Warning": {
                                "type": "boolean",
                                "default": false,
                                "description": "集成请求失败（500 状态代码）警告"
                            },
                            "suppressIntegrationRequestTimedOutWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "集成请求超时警告"
                            },
                            "suppressBlameInvalidIgnoreRevsFileWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "无效 Blame IgnoreRevs 文件警告"
                            },
                            "suppressBlameInvalidIgnoreRevsFileBadRevisionWarning": {
                                "type": "boolean",
                                "default": false,
                                "description": "Blame IgnoreRevs 文件警告中的无效修订"
                            }
                        },
                        "additionalProperties": false,
                        "markdownDescription": "指定应抑制哪些消息",
                        "scope": "window",
                        "order": 5
                    },
                    "gitlens.advanced.repositorySearchDepth": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定搜索存储库的文件夹深度。默认为“#git.repositoryScanMaxDepth#”",
                        "scope": "resource",
                        "order": 10
                    },
                    "gitlens.advanced.abbreviatedShaLength": {
                        "type": "number",
                        "default": 7,
                        "markdownDescription": "指定缩写提交 SHA 的长度",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.advanced.abbreviateShaOnCopy": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定是否将完整或缩写的提交 SHA 复制到剪贴板。缩写为“#gitlens.advanced.abbreviatedShaLength#”的长度。",
                        "scope": "window",
                        "order": 21
                    },
                    "gitlens.advanced.commitOrdering": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "enum": [
                            null,
                            "date",
                            "author-date",
                            "topo"
                        ],
                        "enumDescriptions": [
                            "按时间倒序显示提交",
                            "按提交时间戳的逆时间顺序显示提交",
                            "按作者时间戳的逆时间顺序显示提交",
                            "按提交时间戳的逆时间顺序显示提交，但避免混合多行历史记录"
                        ],
                        "markdownDescription": "指定提交的显示顺序。如果未指定，提交将按时间倒序显示",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.blame.ignoreWhitespace": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定在责备操作期间比较修订时是否忽略空格",
                        "scope": "resource",
                        "order": 40
                    },
                    "gitlens.advanced.blame.customArguments": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "default": null,
                        "items": {
                            "type": "string"
                        },
                        "markdownDescription": "指定传递给“gitblame”命令的附加参数",
                        "scope": "resource",
                        "order": 41
                    },
                    "gitlens.advanced.similarityThreshold": {
                        "type": [
                            "number",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定删除和添加的文件对必须被视为重命名的相似度（百分比）",
                        "scope": "window",
                        "order": 50
                    },
                    "gitlens.advanced.externalDiffTool": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定比较文件时要使用的可选外部差异工具。必须是已配置的 [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool)。",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.advanced.externalDirectoryDiffTool": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "default": null,
                        "markdownDescription": "指定比较目录时要使用的可选外部差异工具。必须是已配置的 [Git difftool](https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool)。",
                        "scope": "window",
                        "order": 61
                    },
                    "gitlens.advanced.quickPick.closeOnFocusOut": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定当焦点丢失时是否关闭快速选择菜单（如果没有，请按“ESC”关闭）",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.advanced.maxListItems": {
                        "type": "number",
                        "default": 200,
                        "markdownDescription": "指定列表中显示的最大项目数。使用 0 指定无最大值",
                        "scope": "window",
                        "order": 80
                    },
                    "gitlens.advanced.maxSearchItems": {
                        "type": "number",
                        "default": 200,
                        "markdownDescription": "指定搜索中显示的最大项目数。使用 0 指定无最大值",
                        "scope": "window",
                        "order": 81
                    },
                    "gitlens.advanced.caching.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否缓存 git 输出 - 不建议更改默认值",
                        "scope": "window",
                        "order": 90
                    },
                    "gitlens.debug": {
                        "type": "boolean",
                        "default": false,
                        "markdownDescription": "指定调试模式",
                        "scope": "window",
                        "order": 100
                    },
                    "gitlens.deepLinks.schemeOverride": {
                        "type": [
                            "boolean",
                            "string"
                        ],
                        "default": false,
                        "markdownDescription": "指定是否使用环境值或指定值覆盖默认深度链接方案 (vscode://)",
                        "scope": "window",
                        "order": 110
                    },
                    "gitlens.advanced.useSymmetricDifferenceNotation": {
                        "deprecationMessage": "已弃用。该设置不再使用",
                        "markdownDescription": "已弃用。该设置不再使用"
                    }
                }
            },
            {
                "id": "general",
                "title": "一般的",
                "order": 0,
                "properties": {
                    "gitlens.showWelcomeOnInstall": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否在首次安装时显示欢迎体验",
                        "scope": "window",
                        "order": 10
                    },
                    "gitlens.showWhatsNewAfterUpgrades": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定升级到新功能版本后是否显示新增功能通知",
                        "scope": "window",
                        "order": 20
                    },
                    "gitlens.outputLevel": {
                        "type": "string",
                        "default": "warn",
                        "enum": [
                            "off",
                            "error",
                            "warn",
                            "info",
                            "debug"
                        ],
                        "enumDescriptions": [
                            "不记录任何内容",
                            "仅记录错误",
                            "记录错误和警告",
                            "记录错误、警告和消息",
                            "记录详细错误、警告和消息。最适合问题报告。"
                        ],
                        "markdownDescription": "指定将有多少（如果有）输出发送到 GitLens 输出通道",
                        "scope": "window",
                        "order": 30
                    },
                    "gitlens.defaultGravatarsStyle": {
                        "type": "string",
                        "default": "robohash",
                        "enum": [
                            "identicon",
                            "mp",
                            "monsterid",
                            "retro",
                            "robohash",
                            "wavatar"
                        ],
                        "enumDescriptions": [
                            "几何图案",
                            "一个简单的卡通风格的人物轮廓（不因电子邮件哈希而变化）",
                            "具有不同颜色、面孔等的怪物",
                            "8 位街机风格像素化面孔",
                            "具有不同颜色、面孔等的机器人",
                            "具有不同特征和背景的面孔"
                        ],
                        "markdownDescription": "指定头像默认（后备）图像的样式",
                        "scope": "window",
                        "order": 40
                    },
                    "gitlens.proxy": {
                        "type": [
                            "object",
                            "null"
                        ],
                        "default": null,
                        "items": {
                            "type": "object",
                            "required": [
                                "url",
                                "strictSSL"
                            ],
                            "properties": {
                                "url": {
                                    "type": [
                                        "string",
                                        "null"
                                    ],
                                    "default": null,
                                    "description": "指定要使用的代理服务器的 URL"
                                },
                                "strictSSL": {
                                    "type": "boolean",
                                    "description": "指定是否应根据提供的 CA 列表验证代理服务器证书",
                                    "default": true
                                }
                            },
                            "additionalProperties": false
                        },
                        "uniqueItems": true,
                        "description": "指定要使用的代理配置。如果未指定，代理配置将根据 VS Code 或操作系统设置确定",
                        "scope": "window",
                        "order": 55
                    },
                    "gitlens.plusFeatures.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否隐藏或显示需要试用或付费计划且在打开的存储库和当前试用或计划的情况下无法访问的功能",
                        "scope": "window",
                        "order": 60
                    },
                    "gitlens.virtualRepositories.enabled": {
                        "type": "boolean",
                        "default": true,
                        "markdownDescription": "指定是否启用虚拟存储库支持",
                        "scope": "window",
                        "order": 70
                    },
                    "gitlens.insiders": {
                        "deprecationMessage": "已弃用。请改用 GitLens 的预发行版本",
                        "markdownDeprecationMessage": "已弃用。请改用 GitLens 的预发行版"
                    }
                }
            }
        ],
        "configurationDefaults": {
            "[ansible][azure-pipelines][css][dockerfile][dockercompose][html][json][jsonc][less][postcss][scss][stylus][vue][yaml]": {
                "gitlens.codeLens.scopes": [
                    "document"
                ]
            },
            "[python]": {
                "gitlens.codeLens.symbolScopes": [
                    "!Module"
                ]
            }
        },
        "colors": [
            {
                "id": "gitlens.gutterBackgroundColor",
                "description": "指定文件责备注释的背景颜色",
                "defaults": {
                    "dark": "#FFFFFF13",
                    "light": "#0000000C",
                    "highContrast": "#FFFFFF13"
                }
            },
            {
                "id": "gitlens.gutterForegroundColor",
                "description": "指定文件责备注释的前景色",
                "defaults": {
                    "dark": "#BEBEBE",
                    "light": "#747474",
                    "highContrast": "#BEBEBE"
                }
            },
            {
                "id": "gitlens.gutterUncommittedForegroundColor",
                "description": "指定文件责备注释中未提交行的前景色",
                "defaults": {
                    "dark": "#00BCF299",
                    "light": "#00BCF299",
                    "highContrast": "#00BCF2FF"
                }
            },
            {
                "id": "gitlens.trailingLineBackgroundColor",
                "description": "指定当前行的内联责备注释的背景颜色",
                "defaults": {
                    "dark": "#00000000",
                    "light": "#00000000",
                    "highContrast": "#00000000"
                }
            },
            {
                "id": "gitlens.trailingLineForegroundColor",
                "description": "指定当前行的内联责备注释的前景色",
                "defaults": {
                    "dark": "#99999959",
                    "light": "#99999959",
                    "highContrast": "#99999999"
                }
            },
            {
                "id": "gitlens.lineHighlightBackgroundColor",
                "description": "指定责任注释中关联线突出显示的背景颜色",
                "defaults": {
                    "dark": "#00BCF233",
                    "light": "#00BCF233",
                    "highContrast": "#00BCF233"
                }
            },
            {
                "id": "gitlens.lineHighlightOverviewRulerColor",
                "description": "指定责任注释中关联行突出显示的滚动条颜色",
                "defaults": {
                    "dark": "#00BCF299",
                    "light": "#00BCF299",
                    "highContrast": "#00BCF299"
                }
            },
            {
                "id": "gitlens.openAutolinkedIssueIconColor",
                "defaults": {
                    "dark": "#3fb950",
                    "light": "#1a7f37",
                    "highContrast": "#68ff79"
                },
                "description": "指定 GitLens 视图中未解决问题的图标颜色"
            },
            {
                "id": "gitlens.closedAutolinkedIssueIconColor",
                "defaults": {
                    "dark": "#a371f7",
                    "light": "#8250df",
                    "highContrast": "#8945ff"
                },
                "description": "指定 GitLens 视图中已关闭问题的图标颜色"
            },
            {
                "id": "gitlens.closedPullRequestIconColor",
                "description": "指定 GitLens 视图中已关闭拉取请求的图标颜色",
                "defaults": {
                    "dark": "#f85149",
                    "light": "#cf222e",
                    "highContrast": "#ff544b"
                }
            },
            {
                "id": "gitlens.openPullRequestIconColor",
                "description": "指定 GitLens 视图中打开的拉取请求的图标颜色",
                "defaults": {
                    "dark": "#3fb950",
                    "light": "#1a7f37",
                    "highContrast": "#68ff79"
                }
            },
            {
                "id": "gitlens.mergedPullRequestIconColor",
                "description": "指定 GitLens 视图中合并拉取请求的图标颜色",
                "defaults": {
                    "dark": "#a371f7",
                    "light": "#8250df",
                    "highContrast": "#8945ff"
                }
            },
            {
                "id": "gitlens.unpublishedChangesIconColor",
                "description": "指定 GitLens 视图中未发布更改的图标颜色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.unpublishedCommitIconColor",
                "description": "指定 GitLens 视图中未发布提交的图标颜色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.unpulledChangesIconColor",
                "description": "指定 GitLens 视图中未拉取的更改的图标颜色",
                "defaults": {
                    "dark": "#b15e35",
                    "light": "#b15e35",
                    "highContrast": "#ff874c"
                }
            },
            {
                "id": "gitlens.decorations.addedForegroundColor",
                "description": "指定添加文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.addedResourceForeground",
                    "dark": "gitDecoration.addedResourceForeground",
                    "highContrast": "gitDecoration.addedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.copiedForegroundColor",
                "description": "指定复制文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.renamedResourceForeground",
                    "dark": "gitDecoration.renamedResourceForeground",
                    "highContrast": "gitDecoration.renamedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.deletedForegroundColor",
                "description": "指定已删除文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.deletedResourceForeground",
                    "dark": "gitDecoration.deletedResourceForeground",
                    "highContrast": "gitDecoration.deletedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.ignoredForegroundColor",
                "description": "指定被忽略文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.ignoredResourceForeground",
                    "dark": "gitDecoration.ignoredResourceForeground",
                    "highContrast": "gitDecoration.ignoredResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.modifiedForegroundColor",
                "description": "指定修改文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.modifiedResourceForeground",
                    "dark": "gitDecoration.modifiedResourceForeground",
                    "highContrast": "gitDecoration.modifiedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.untrackedForegroundColor",
                "description": "指定未跟踪文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.untrackedResourceForeground",
                    "dark": "gitDecoration.untrackedResourceForeground",
                    "highContrast": "gitDecoration.untrackedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.renamedForegroundColor",
                "description": "指定重命名文件的装饰前景色",
                "defaults": {
                    "light": "gitDecoration.renamedResourceForeground",
                    "dark": "gitDecoration.renamedResourceForeground",
                    "highContrast": "gitDecoration.renamedResourceForeground"
                }
            },
            {
                "id": "gitlens.decorations.branchAheadForegroundColor",
                "description": "指定上游分支之前的装饰前景色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.decorations.branchBehindForegroundColor",
                "description": "指定上游分支后面的装饰前景色",
                "defaults": {
                    "dark": "#b15e35",
                    "light": "#b15e35",
                    "highContrast": "#ff874c"
                }
            },
            {
                "id": "gitlens.decorations.branchDivergedForegroundColor",
                "description": "指定上游前后分支的装饰前景色",
                "defaults": {
                    "dark": "#D8AF1B",
                    "light": "#D8AF1B",
                    "highContrast": "#D8AF1B"
                }
            },
            {
                "id": "gitlens.decorations.branchUpToDateForegroundColor",
                "description": "指定与其上游同步的分支的装饰前景色",
                "defaults": {
                    "dark": "sideBar.foreground",
                    "light": "sideBar.foreground",
                    "highContrast": "sideBar.foreground"
                }
            },
            {
                "id": "gitlens.decorations.branchUnpublishedForegroundColor",
                "description": "指定尚未发布到上游的分支的装饰前景色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.decorations.branchMissingUpstreamForegroundColor",
                "description": "指定缺少上游的分支的装饰前景色",
                "defaults": {
                    "light": "#ad0707",
                    "dark": "#c74e39",
                    "highContrast": "#c74e39"
                }
            },
            {
                "id": "gitlens.decorations.statusMergingOrRebasingConflictForegroundColor",
                "description": "指定在有冲突的变基操作期间状态的装饰前景色",
                "defaults": {
                    "light": "#ad0707",
                    "dark": "#c74e39",
                    "highContrast": "#c74e39"
                }
            },
            {
                "id": "gitlens.decorations.statusMergingOrRebasingForegroundColor",
                "description": "指定变基操作期间状态的装饰前景色",
                "defaults": {
                    "dark": "#D8AF1B",
                    "light": "#D8AF1B",
                    "highContrast": "#D8AF1B"
                }
            },
            {
                "id": "gitlens.decorations.workspaceRepoMissingForegroundColor",
                "description": "指定缺少本地路径的工作区存储库的装饰前景色",
                "defaults": {
                    "dark": "#909090",
                    "light": "#949494",
                    "highContrast": "#d3d3d3"
                }
            },
            {
                "id": "gitlens.decorations.workspaceCurrentForegroundColor",
                "description": "指定当前作为代码工作区文件打开的工作区的装饰前景色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.decorations.workspaceRepoOpenForegroundColor",
                "description": "指定当前工作区中打开的工作区存储库的装饰前景色",
                "defaults": {
                    "dark": "#35b15e",
                    "light": "#35b15e",
                    "highContrast": "#4dff88"
                }
            },
            {
                "id": "gitlens.decorations.worktreeHasUncommittedChangesForegroundColor",
                "description": "指定具有未提交更改的工作树的装饰前景色",
                "defaults": {
                    "light": "#895503",
                    "dark": "#E2C08D",
                    "highContrast": "#E2C08D"
                }
            },
            {
                "id": "gitlens.decorations.worktreeMissingForegroundColor",
                "description": "指定在磁盘上找不到工作树的装饰前景色",
                "defaults": {
                    "light": "#ad0707",
                    "dark": "#c74e39",
                    "highContrast": "#c74e39"
                }
            },
            {
                "id": "gitlens.graphLane1Color",
                "description": "指定_Commit Graph_可视化的第一个提交通道的颜色",
                "defaults": {
                    "light": "#15a0bf",
                    "dark": "#15a0bf",
                    "highContrast": "#15a0bf"
                }
            },
            {
                "id": "gitlens.graphLane2Color",
                "description": "指定_Commit Graph_可视化的第二个提交通道的颜色",
                "defaults": {
                    "light": "#0669f7",
                    "dark": "#0669f7",
                    "highContrast": "#0669f7"
                }
            },
            {
                "id": "gitlens.graphLane3Color",
                "description": "指定_Commit Graph_可视化的第三个提交通道的颜色",
                "defaults": {
                    "light": "#8e00c2",
                    "dark": "#8e00c2",
                    "highContrast": "#8e00c2"
                }
            },
            {
                "id": "gitlens.graphLane4Color",
                "description": "指定_Commit Graph_可视化的第四个提交通道的颜色",
                "defaults": {
                    "light": "#c517b6",
                    "dark": "#c517b6",
                    "highContrast": "#c517b6"
                }
            },
            {
                "id": "gitlens.graphLane5Color",
                "description": "指定_Commit Graph_可视化的第五个提交通道的颜色",
                "defaults": {
                    "light": "#d90171",
                    "dark": "#d90171",
                    "highContrast": "#d90171"
                }
            },
            {
                "id": "gitlens.graphLane6Color",
                "description": "指定_Commit Graph_可视化的第六个提交通道的颜色",
                "defaults": {
                    "light": "#cd0101",
                    "dark": "#cd0101",
                    "highContrast": "#cd0101"
                }
            },
            {
                "id": "gitlens.graphLane7Color",
                "description": "指定_Commit Graph_可视化的第七个提交通道的颜色",
                "defaults": {
                    "light": "#f25d2e",
                    "dark": "#f25d2e",
                    "highContrast": "#f25d2e"
                }
            },
            {
                "id": "gitlens.graphLane8Color",
                "description": "指定_Commit Graph_可视化的第八个提交通道的颜色",
                "defaults": {
                    "light": "#f2ca33",
                    "dark": "#f2ca33",
                    "highContrast": "#f2ca33"
                }
            },
            {
                "id": "gitlens.graphLane9Color",
                "description": "指定_Commit Graph_可视化的第九个提交通道的颜色",
                "defaults": {
                    "light": "#7bd938",
                    "dark": "#7bd938",
                    "highContrast": "#7bd938"
                }
            },
            {
                "id": "gitlens.graphLane10Color",
                "description": "指定_Commit Graph_可视化的第十个提交通道的颜色",
                "defaults": {
                    "light": "#2ece9d",
                    "dark": "#2ece9d",
                    "highContrast": "#2ece9d"
                }
            },
            {
                "id": "gitlens.graphChangesColumnAddedColor",
                "description": "指定用于表示_Commit Graph_上的_Changes_列中添加的线条的颜色",
                "defaults": {
                    "light": "#2da44e",
                    "highContrastLight": "#2da44e",
                    "dark": "#347d39",
                    "highContrast": "#347d39"
                }
            },
            {
                "id": "gitlens.graphChangesColumnDeletedColor",
                "description": "指定颜色以表示在_Commit Graph_上的_Changes_列中删除的行",
                "defaults": {
                    "light": "#cf222e",
                    "highContrastLight": "#cf222e",
                    "dark": "#c93c37",
                    "highContrast": "#c93c37"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerHeadColor",
                "description": "指定 _Commit Graph_ 的小地图上的 HEAD 颜色标记",
                "defaults": {
                    "light": "#04c814",
                    "highContrastLight": "#04c814",
                    "dark": "#05e617",
                    "highContrast": "#05e617"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerHeadColor",
                "description": "指定_Commit Graph_滚动条上的颜色标记 HEAD",
                "defaults": {
                    "light": "#04c814",
                    "highContrastLight": "#04c814",
                    "dark": "#05e617",
                    "highContrast": "#05e617"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerUpstreamColor",
                "description": "指定_Commit Graph_小地图上标记 HEAD 上游的颜色",
                "defaults": {
                    "light": "#8cd993",
                    "highContrastLight": "#8cd993",
                    "dark": "#09ae17",
                    "highContrast": "#09ae17"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerUpstreamColor",
                "description": "指定 _Commit Graph_ 滚动条上 HEAD 上游的颜色标记",
                "defaults": {
                    "light": "#8cd993",
                    "highContrastLight": "#8cd993",
                    "dark": "#09ae17",
                    "highContrast": "#09ae17"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerHighlightsColor",
                "description": "指定_Commit Graph_小地图上的颜色标记突出显示（匹配）",
                "defaults": {
                    "light": "#f5cc00",
                    "highContrastLight": "#f5cc00",
                    "dark": "#fbff0a",
                    "highContrast": "#fbff0a"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerHighlightsColor",
                "description": "指定_Commit Graph_滚动条上的颜色标记突出显示（匹配）",
                "defaults": {
                    "light": "#f5cc00",
                    "highContrastLight": "#f5cc00",
                    "dark": "#fbff0a",
                    "highContrast": "#fbff0a"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerLocalBranchesColor",
                "description": "指定_Commit Graph_小地图上标记本地分支的颜色",
                "defaults": {
                    "light": "#3095e8",
                    "highContrastLight": "#3095e8",
                    "dark": "#3087cf",
                    "highContrast": "#3087cf"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerLocalBranchesColor",
                "description": "指定_Commit Graph_滚动条上标记本地分支的颜色",
                "defaults": {
                    "light": "#3095e8",
                    "highContrastLight": "#3095e8",
                    "dark": "#3087cf",
                    "highContrast": "#3087cf"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerPullRequestsColor",
                "description": "指定 _Commit Graph_ 的小地图上标记拉取请求的颜色",
                "defaults": {
                    "light": "#ff8f18",
                    "highContrastLight": "#ff8f18",
                    "dark": "#c76801",
                    "highContrast": "#c76801"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerPullRequestsColor",
                "description": "指定_Commit Graph_滚动条上的颜色标记拉取请求",
                "defaults": {
                    "light": "#ff8f18",
                    "highContrastLight": "#ff8f18",
                    "dark": "#c76801",
                    "highContrast": "#c76801"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerRemoteBranchesColor",
                "description": "指定_Commit Graph_小地图上标记远程分支的颜色",
                "defaults": {
                    "light": "#67ace4",
                    "highContrastLight": "#67ace4",
                    "dark": "#2b5e88",
                    "highContrast": "#2b5e88"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerRemoteBranchesColor",
                "description": "指定_Commit Graph_滚动条上标记远程分支的颜色",
                "defaults": {
                    "light": "#67ace4",
                    "highContrastLight": "#67ace4",
                    "dark": "#2b5e88",
                    "highContrast": "#2b5e88"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerStashesColor",
                "description": "指定_Commit Graph_小地图上的颜色标记隐藏",
                "defaults": {
                    "light": "#e467e4",
                    "highContrastLight": "#e467e4",
                    "dark": "#b34db3",
                    "highContrast": "#b34db3"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerStashesColor",
                "description": "指定_Commit Graph_滚动条上的颜色标记隐藏",
                "defaults": {
                    "light": "#e467e4",
                    "highContrastLight": "#e467e4",
                    "dark": "#b34db3",
                    "highContrast": "#b34db3"
                }
            },
            {
                "id": "gitlens.graphMinimapMarkerTagsColor",
                "description": "指定_Commit Graph_小地图上的颜色标记标签",
                "defaults": {
                    "light": "#d2a379",
                    "highContrastLight": "#d2a379",
                    "dark": "#6b562e",
                    "highContrast": "#6b562e"
                }
            },
            {
                "id": "gitlens.graphScrollMarkerTagsColor",
                "description": "指定_Commit Graph_滚动条上的颜色标记标签",
                "defaults": {
                    "light": "#d2a379",
                    "highContrastLight": "#d2a379",
                    "dark": "#6b562e",
                    "highContrast": "#6b562e"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorMergeableColor",
                "description": "指定当优先级可合并时_Launchpad_指示器图标的颜色",
                "defaults": {
                    "light": "#42c954",
                    "dark": "#3fb950",
                    "highContrast": "#68ff79"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorMergeableHoverColor",
                "description": "指定优先级可合并时悬停中_Launchpad_指示器图标的颜色",
                "defaults": {
                    "light": "#42c954",
                    "dark": "#3fb950",
                    "highContrast": "#68ff79"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorBlockedColor",
                "description": "指定优先级被阻止时_Launchpad_指示器图标的颜色",
                "defaults": {
                    "light": "#ad0707",
                    "dark": "#c74e39",
                    "highContrast": "#ff003c"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorBlockedHoverColor",
                "description": "指定当优先级被阻止时悬停中_Launchpad_指示器图标的颜色",
                "defaults": {
                    "light": "#ad0707",
                    "dark": "#c74e39",
                    "highContrast": "#ff003c"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorAttentionColor",
                "description": "指定当优先级为后续或需要审核时_Launchpad_指示器图标的颜色",
                "defaults": {
                    "dark": "#D8AF1B",
                    "light": "#cc9b15",
                    "highContrast": "#D8AF1B"
                }
            },
            {
                "id": "gitlens.launchpadIndicatorAttentionHoverColor",
                "description": "指定当优先级为后续或需要审核时悬停中_Launchpad_指示器图标的颜色",
                "defaults": {
                    "dark": "#D8AF1B",
                    "light": "#cc9b15",
                    "highContrast": "#D8AF1B"
                }
            }
        ],
        "commands": [
            {
                "command": "gitlens.generateCommitMessage",
                "title": "生成提交消息 (GitLens)...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.reset",
                "title": "重置存储的数据...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.resetAIKey",
                "title": "重置存储的 AI 密钥...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.login",
                "title": "登录 GitKraken...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.logout",
                "title": "退出 GitKraken",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.signUp",
                "title": "注册 GitKraken...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.startPreviewTrial",
                "title": "预览专业版",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.reactivateProTrial",
                "title": "重新激活专业试用版",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.manage",
                "title": "管理您的帐户...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.cloudIntegrations.manage",
                "title": "管理云集成...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.upgrade",
                "title": "升级到专业版...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.hide",
                "title": "隐藏专业版功能",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.restore",
                "title": "恢复专业版功能",
                "category": "GitLens"
            },
            {
                "command": "gitlens.plus.refreshRepositoryAccess",
                "title": "刷新存储库访问",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gk.switchOrganization",
                "title": "切换组织...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.getStarted",
                "title": "开始使用",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showPatchDetailsPage",
                "title": "显示补丁详细信息",
                "category": "GitLens"
            },
            {
                "command": "gitlens.applyPatchFromClipboard",
                "title": "应用复制的补丁",
                "category": "GitLens"
            },
            {
                "command": "gitlens.copyPatchToClipboard",
                "title": "复制为补丁",
                "category": "GitLens"
            },
            {
                "command": "gitlens.copyWorkingChangesToWorktree",
                "title": "将工作更改复制到工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.copyWorkingChangesToWorktree",
                "title": "将工作更改复制到工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.createPatch",
                "title": "创建补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.createCloudPatch",
                "title": "创建补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.shareAsCloudPatch",
                "title": "分享为云补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openCloudPatch",
                "title": "打开云补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openPatch",
                "title": "打开补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showBranchesView",
                "title": "显示分支视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showCommitDetailsView",
                "title": "显示检查视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showCommitsView",
                "title": "显示提交视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showContributorsView",
                "title": "显示贡献者视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showDraftsView",
                "title": "显示云补丁视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showFileHistoryView",
                "title": "显示文件历史记录视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showLaunchpad",
                "title": "打开启动板",
                "category": "GitLens",
                "icon": "$(rocket)"
            },
            {
                "command": "gitlens.showFocusPage",
                "title": "在编辑器中打开启动板",
                "category": "GitLens",
                "icon": "$(rocket)"
            },
            {
                "command": "gitlens.launchpad.split",
                "title": "在编辑器中拆分启动板",
                "category": "GitLens",
                "icon": "$(split-horizontal)"
            },
            {
                "command": "gitlens.launchpad.indicator.toggle",
                "title": "切换启动板指示器",
                "category": "GitLens",
                "icon": "$(rocket)"
            },
            {
                "command": "gitlens.showGraph",
                "title": "显示提交图",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.showGraphPage",
                "title": "在编辑器中显示提交图",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.graph.split",
                "title": "分割提交图",
                "category": "GitLens",
                "icon": "$(split-horizontal)"
            },
            {
                "command": "gitlens.showGraphView",
                "title": "显示提交图视图",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.toggleGraph",
                "title": "切换提交图",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.toggleMaximizedGraph",
                "title": "Toggle 最大化提交图",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.showHomeView",
                "title": "显示主页视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showAccountView",
                "title": "显示帐户视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showInCommitGraph",
                "title": "在提交图中打开",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.showInCommitGraphView",
                "title": "在提交图中打开",
                "category": "GitLens",
                "icon": "$(gitlens-graph)"
            },
            {
                "command": "gitlens.showLineHistoryView",
                "title": "显示线路历史视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showRemotesView",
                "title": "显示遥控器视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showRepositoriesView",
                "title": "显示存储库视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showSearchAndCompareView",
                "title": "显示搜索和比较提交视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showSettingsPage",
                "title": "打开设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!views",
                "title": "打开设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!autolinks",
                "title": "配置自动链接",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!file-annotations",
                "title": "打开文件注释设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!branches-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!commits-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!contributors-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!file-history-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!line-history-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!remotes-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!repositories-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!search-compare-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!stashes-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!tags-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!worktrees-view",
                "title": "打开视图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showSettingsPage!commit-graph",
                "title": "打开提交图设置",
                "category": "GitLens",
                "icon": "$(gear)"
            },
            {
                "command": "gitlens.showTimelinePage",
                "title": "显示可视文件历史记录",
                "category": "GitLens",
                "icon": "$(graph-scatter)"
            },
            {
                "command": "gitlens.showInTimeline",
                "title": "打开可视文件历史记录",
                "category": "GitLens",
                "icon": "$(graph-scatter)"
            },
            {
                "command": "gitlens.timeline.split",
                "title": "分割视觉文件历史记录",
                "category": "GitLens",
                "icon": "$(split-horizontal)"
            },
            {
                "command": "gitlens.showStashesView",
                "title": "显示隐藏视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showTagsView",
                "title": "显示标签视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showTimelineView",
                "title": "显示可视文件历史记录视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showWelcomePage",
                "title": "欢迎",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showWorktreesView",
                "title": "显示工作树视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showWorkspacesView",
                "title": "显示 GitKraken 工作区视图",
                "category": "GitLens"
            },
            {
                "command": "gitlens.compareWith",
                "title": "比较参考文献...",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.compareHeadWith",
                "title": "比较 HEAD 与...",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.compareWorkingWith",
                "title": "将工作树与...进行比较",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.diffDirectory",
                "title": "打开目录比较 (difftool) 与...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffDirectoryWithHead",
                "title": "开放目录比较（difftool）",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffWithNext",
                "title": "打开下一个修订版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-next-commit)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
            },
            {
                "command": "gitlens.diffWithNextInDiffLeft",
                "title": "打开下一个修订版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-next-commit)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
            },
            {
                "command": "gitlens.diffWithNextInDiffRight",
                "title": "打开下一个修订版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-next-commit)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
            },
            {
                "command": "gitlens.diffWithPrevious",
                "title": "打开先前版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-prev-commit)"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffLeft",
                "title": "打开先前版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-prev-commit)"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffRight",
                "title": "打开先前版本的更改",
                "category": "GitLens",
                "icon": "$(gitlens-prev-commit)"
            },
            {
                "command": "gitlens.diffLineWithPrevious",
                "title": "打开先前版本的行更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffFolderWithRevision",
                "title": "打开文件夹更改与修订...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffFolderWithRevisionFrom",
                "title": "打开文件夹更改与分支或标签...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffWithRevision",
                "title": "打开修订更改...",
                "category": "GitLens",
                "icon": "$(gitlens-prev-commit-menu)"
            },
            {
                "command": "gitlens.diffWithRevisionFrom",
                "title": "使用分支或标签打开更改...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.diffWithWorking",
                "title": "使用工作文件打开更改",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.diffWithWorkingInDiffLeft",
                "title": "使用工作文件打开更改",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.diffWithWorkingInDiffRight",
                "title": "使用工作文件打开更改",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.diffLineWithWorking",
                "title": "使用工作文件打开行更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.disableRebaseEditor",
                "title": "禁用交互式变基编辑器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.enableRebaseEditor",
                "title": "启用交互式变基编辑器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.toggleFileBlame",
                "title": "切换文件指责",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileBlameInDiffLeft",
                "title": "切换文件指责",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileBlameInDiffRight",
                "title": "切换文件指责",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.annotations.nextChange",
                "title": "下一步更改",
                "icon": "$(arrow-down)"
            },
            {
                "command": "gitlens.annotations.previousChange",
                "title": "之前的变更",
                "icon": "$(arrow-up)"
            },
            {
                "command": "gitlens.clearFileAnnotations",
                "title": "清除文件注释",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens-filled)"
            },
            {
                "command": "gitlens.computingFileAnnotations",
                "title": "计算文件注释...",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens-filled)"
            },
            {
                "command": "gitlens.toggleFileHeatmap",
                "title": "切换文件热图",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileHeatmapInDiffLeft",
                "title": "切换文件热图",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileHeatmapInDiffRight",
                "title": "切换文件热图",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileChanges",
                "title": "切换文件更改",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleFileChangesOnly",
                "title": "切换文件更改",
                "category": "GitLens",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "command": "gitlens.toggleLineBlame",
                "title": "切换线路责备",
                "category": "GitLens"
            },
            {
                "command": "gitlens.toggleCodeLens",
                "title": "切换 Git CodeLens",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands",
                "title": "Git 命令面板",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.branch",
                "title": "吉特分支...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.branch.create",
                "title": "Git 创建分支...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.branch.delete",
                "title": "Git 删除分支...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.branch.prune",
                "title": "Git 修剪分支...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.branch.rename",
                "title": "Git 重命名分支...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.checkout",
                "title": "git 签出...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.cherryPick",
                "title": "吉特樱桃精选...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.history",
                "title": "Git 历史记录（日志）...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.merge",
                "title": "git 合并...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.rebase",
                "title": "Git 变基...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.remote",
                "title": "git 远程...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.remote.add",
                "title": "Git 添加远程...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.remote.prune",
                "title": "Git 修剪远程...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.remote.remove",
                "title": "Git 删除远程...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.reset",
                "title": "git 重置...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.revert",
                "title": "git 恢复...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.show",
                "title": "吉特显示...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash",
                "title": "吉特藏...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash.drop",
                "title": "Git 删除存储...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash.list",
                "title": "Git 存储列表...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash.pop",
                "title": "Git 流行存储...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash.push",
                "title": "Git 推送存储...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.stash.rename",
                "title": "Git 重命名存储...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.status",
                "title": "git 状态...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.switch",
                "title": "Git 切换到...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.tag",
                "title": "git 标签...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.tag.create",
                "title": "Git 创建标签...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.tag.delete",
                "title": "Git 删除标签...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.worktree",
                "title": "Git 工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.worktree.create",
                "title": "Git 创建工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.worktree.delete",
                "title": "Git 删除工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.gitCommands.worktree.open",
                "title": "Git 打开工作树...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.switchAIModel",
                "title": "切换AI模型",
                "category": "GitLens"
            },
            {
                "command": "gitlens.switchMode",
                "title": "切换模式",
                "category": "GitLens"
            },
            {
                "command": "gitlens.toggleReviewMode",
                "title": "切换审阅模式",
                "category": "GitLens"
            },
            {
                "command": "gitlens.toggleZenMode",
                "title": "切换禅宗模式",
                "category": "GitLens"
            },
            {
                "command": "gitlens.resetViewsLayout",
                "title": "重置视图布局",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showCommitSearch",
                "title": "搜索提交",
                "category": "GitLens",
                "icon": "$(search)"
            },
            {
                "command": "gitlens.showLastQuickPick",
                "title": "显示上次打开的快速选择",
                "category": "GitLens"
            },
            {
                "command": "gitlens.revealCommitInView",
                "title": "在侧栏中显示提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showCommitInView",
                "title": "检查提交详细信息",
                "category": "GitLens",
                "icon": "$(eye)"
            },
            {
                "command": "gitlens.showLineCommitInView",
                "title": "检查行提交详细信息",
                "category": "GitLens",
                "icon": "$(eye)"
            },
            {
                "command": "gitlens.showInDetailsView",
                "title": "检查详情",
                "category": "GitLens",
                "icon": "$(eye)"
            },
            {
                "command": "gitlens.showCommitsInView",
                "title": "在选择中搜索提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showFileHistoryInView",
                "title": "打开文件历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openFileHistory",
                "title": "打开文件历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openFolderHistory",
                "title": "打开文件夹历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickCommitDetails",
                "title": "快速显示提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickCommitFileDetails",
                "title": "快速显示行提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickRevisionDetails",
                "title": "显示修订提交",
                "category": "GitLens",
                "icon": "$(gitlens-commit-horizontal)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
                "title": "显示修订提交",
                "category": "GitLens",
                "icon": "$(gitlens-commit-horizontal)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.showQuickRevisionDetailsInDiffRight",
                "title": "显示修订提交",
                "category": "GitLens",
                "icon": "$(gitlens-commit-horizontal)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.showQuickFileHistory",
                "title": "显示文件历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.quickOpenFileHistory",
                "title": "快速打开文件历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickBranchHistory",
                "title": "显示分行历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickRepoHistory",
                "title": "显示当前分支历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickRepoStatus",
                "title": "显示存储库状态",
                "category": "GitLens"
            },
            {
                "command": "gitlens.showQuickStashList",
                "title": "显示藏品",
                "category": "GitLens"
            },
            {
                "command": "gitlens.addAuthors",
                "title": "添加共同作者...",
                "category": "GitLens",
                "icon": "$(person-add)"
            },
            {
                "command": "gitlens.connectRemoteProvider",
                "title": "连接远程集成",
                "category": "GitLens",
                "icon": "$(plug)"
            },
            {
                "command": "gitlens.disconnectRemoteProvider",
                "title": "断开远程集成",
                "category": "GitLens",
                "icon": "$(gitlens-unplug)"
            },
            {
                "command": "gitlens.copyCurrentBranch",
                "title": "复制当前分支名称",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyMessageToClipboard",
                "title": "复制留言",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyShaToClipboard",
                "title": "复制SHA",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyRelativePathToClipboard",
                "title": "复制相对路径",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.closeUnchangedFiles",
                "title": "关闭未更改的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openChangedFiles",
                "title": "打开更改的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openOnlyChangedFiles",
                "title": "打开已更改和关闭未更改的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openBranchesOnRemote",
                "title": "在远程打开分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyDeepLinkToBranch",
                "title": "复制链接到分支",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToCommit",
                "title": "复制链接以提交",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToComparison",
                "title": "复制比较链接",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToFile",
                "title": "将链接复制到文件",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToFileAtRevision",
                "title": "将链接复制到修订版的文件...",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToLines",
                "title": "复制链接到代码",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToRepo",
                "title": "复制链接到存储库",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToWorkspace",
                "title": "将链接复制到工作区",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyDeepLinkToTag",
                "title": "将链接复制到标签",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyRemoteBranchesUrl",
                "title": "复制远程分支 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openBranchOnRemote",
                "title": "在远程打开分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.openBranchOnRemote",
                "title": "在远程打开分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.openBranchOnRemote.multi",
                "title": "在远程打开分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.openCurrentBranchOnRemote",
                "title": "在远程打开当前分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteBranchUrl",
                "title": "复制远程分支 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openCommitOnRemote",
                "title": "远程开放提交",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.openCommitOnRemote",
                "title": "远程开放提交",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.openCommitOnRemote.multi",
                "title": "远程开放提交",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteCommitUrl",
                "title": "复制远程提交 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.copyRemoteCommitUrl",
                "title": "复制远程提交 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.copyRemoteCommitUrl.multi",
                "title": "复制远程提交 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openComparisonOnRemote",
                "title": "远程公开比较",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteComparisonUrl",
                "title": "复制远程比较 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openFileFromRemote",
                "title": "从远程打开文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openFileOnRemote",
                "title": "远程打开文件",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteFileUrlToClipboard",
                "title": "复制远程文件 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.copyRemoteFileUrlWithoutRange",
                "title": "复制远程文件 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openFileOnRemoteFrom",
                "title": "从远程打开文件...",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteFileUrlFrom",
                "title": "复制远程文件 URL 来自...",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openBlamePriorToChange",
                "title": "变革之前公开指责",
                "icon": "$(versions)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openFileRevision",
                "title": "打开修订处的文件...",
                "icon": "$(gitlens-open-revision)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openFileRevisionFrom",
                "title": "打开文件的修订版本...",
                "icon": "$(gitlens-open-revision)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.openPullRequestOnRemote",
                "title": "在远程打开拉取请求",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemotePullRequestUrl",
                "title": "复制拉取请求 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openAssociatedPullRequestOnRemote",
                "title": "打开关联的拉取请求",
                "category": "GitLens",
                "icon": "$(git-pull-request)"
            },
            {
                "command": "gitlens.openRepoOnRemote",
                "title": "在远程打开存储库",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.copyRemoteRepositoryUrl",
                "title": "复制远程存储库 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.openRevisionFile",
                "title": "打开修订版文件",
                "category": "GitLens",
                "icon": "$(gitlens-open-revision)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.openRevisionFileInDiffLeft",
                "title": "打开修订版文件",
                "category": "GitLens",
                "icon": "$(gitlens-open-revision)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.openRevisionFileInDiffRight",
                "title": "打开修订版文件",
                "category": "GitLens",
                "icon": "$(gitlens-open-revision)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ "
            },
            {
                "command": "gitlens.openWorkingFile",
                "title": "打开文件",
                "category": "GitLens",
                "icon": "$(go-to-file)"
            },
            {
                "command": "gitlens.openWorkingFileInDiffLeft",
                "title": "打开文件",
                "category": "GitLens",
                "icon": "$(go-to-file)"
            },
            {
                "command": "gitlens.openWorkingFileInDiffRight",
                "title": "打开文件",
                "category": "GitLens",
                "icon": "$(go-to-file)"
            },
            {
                "command": "gitlens.stashApply",
                "title": "应用隐藏...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-pop)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.stash.apply",
                "title": "应用隐藏...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-pop)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.stash.delete",
                "title": "放下藏...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.stash.delete.multi",
                "title": "掉落藏品...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.stash.rename",
                "title": "重命名存储...",
                "category": "GitLens",
                "icon": "$(edit)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.stashSave",
                "title": "隐藏所有更改...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-save)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.stashSaveFiles",
                "title": "隐藏变化...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-save)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.externalDiff",
                "title": "打开更改 (difftool)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.externalDiffAll",
                "title": "打开所有更改 (difftool)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.inviteToLiveShare",
                "title": "邀请实时分享",
                "category": "GitLens",
                "icon": "$(live-share)"
            },
            {
                "command": "gitlens.browseRepoAtRevision",
                "title": "从修订版浏览存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.browseRepoAtRevisionInNewWindow",
                "title": "在新窗口中浏览修订版本的存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.browseRepoBeforeRevision",
                "title": "浏览修订前的存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.browseRepoBeforeRevisionInNewWindow",
                "title": "在新窗口中浏览修订前的存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)",
                "enablement": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/"
            },
            {
                "command": "gitlens.views.browseRepoAtRevision",
                "title": "存储库来自这里",
                "category": "GitLens",
                "icon": "$(folder-opened)"
            },
            {
                "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
                "title": "新窗口中的存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)"
            },
            {
                "command": "gitlens.views.browseRepoBeforeRevision",
                "title": "之前的存储库在这里",
                "category": "GitLens",
                "icon": "$(folder-opened)"
            },
            {
                "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
                "title": "之前在新窗口中的存储库",
                "category": "GitLens",
                "icon": "$(folder-opened)"
            },
            {
                "command": "gitlens.fetchRepositories",
                "title": "拿来",
                "category": "GitLens",
                "icon": "$(gitlens-repo-fetch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.pullRepositories",
                "title": "拉",
                "category": "GitLens",
                "icon": "$(gitlens-repo-pull)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.pushRepositories",
                "title": "推",
                "category": "GitLens",
                "icon": "$(gitlens-repo-push)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.addRemote",
                "title": "添加遥控器",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.highlightChanges",
                "title": "突出显示自此提交之前以来的所有更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.highlightRevisionChanges",
                "title": "突出显示此提交的更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.restore",
                "title": "恢复（结账）",
                "category": "GitLens",
                "icon": "$(gitlens-switch)"
            },
            {
                "command": "gitlens.views.switchToAnotherBranch",
                "title": "切换到另一个分支...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.switchToBranch",
                "title": "切换至分行...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.switchToCommit",
                "title": "切换到提交...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.switchToTag",
                "title": "切换到标签...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.copy",
                "title": "复制",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.copyAsMarkdown",
                "title": "复制为 Markdown",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.copyUrl",
                "title": "复制网址",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.copyUrl.multi",
                "title": "复制网址",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.views.openUrl",
                "title": "打开网址",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.openUrl.multi",
                "title": "打开网址",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.pruneRemote",
                "title": "修剪",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.fetch",
                "title": "拿来",
                "category": "GitLens",
                "icon": "$(gitlens-repo-fetch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.publishBranch",
                "title": "发布分支",
                "category": "GitLens",
                "icon": "$(cloud-upload)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.publishRepository",
                "title": "发布存储库",
                "category": "GitLens",
                "icon": "$(cloud-upload)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.pull",
                "title": "拉",
                "category": "GitLens",
                "icon": "$(gitlens-repo-pull)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.push",
                "title": "推",
                "category": "GitLens",
                "icon": "$(gitlens-repo-push)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.pushWithForce",
                "title": "推（力）",
                "category": "GitLens",
                "icon": "$(gitlens-repo-force-push)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.openInTerminal",
                "title": "在终端中打开",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openInIntegratedTerminal",
                "title": "在集成终端中打开",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.setAsDefault",
                "title": "设置为默认值",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.unsetAsDefault",
                "title": "取消设置为默认值",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.stageDirectory",
                "title": "暂存所有变更",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.stageFile",
                "title": "阶段变化",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.unstageDirectory",
                "title": "取消所有更改",
                "category": "GitLens",
                "icon": "$(remove)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.unstageFile",
                "title": "取消暂存更改",
                "category": "GitLens",
                "icon": "$(remove)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.star",
                "title": "添加到收藏夹",
                "category": "GitLens",
                "icon": "$(star-empty)"
            },
            {
                "command": "gitlens.views.star.multi",
                "title": "添加到收藏夹",
                "category": "GitLens",
                "icon": "$(star-empty)"
            },
            {
                "command": "gitlens.views.unstar",
                "title": "从收藏夹中删除",
                "category": "GitLens",
                "icon": "$(star-full)"
            },
            {
                "command": "gitlens.views.unstar.multi",
                "title": "从收藏夹中删除",
                "category": "GitLens",
                "icon": "$(star-full)"
            },
            {
                "command": "gitlens.views.openDirectoryDiff",
                "title": "打开目录比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openDirectoryDiffWithWorking",
                "title": "开放目录与工作树的比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChanges",
                "title": "公开变更",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.openChangesWithWorking",
                "title": "使用工作文件打开更改",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.views.openPreviousChangesWithWorking",
                "title": "使用工作文件打开以前的更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openFile",
                "title": "打开文件",
                "category": "GitLens",
                "icon": "$(go-to-file)"
            },
            {
                "command": "gitlens.views.openFileRevision",
                "title": "打开修订版文件",
                "category": "GitLens",
                "icon": "$(gitlens-open-revision)"
            },
            {
                "command": "gitlens.views.openChangedFiles",
                "title": "打开文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileDiffs",
                "title": "打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileDiffsWithWorking",
                "title": "使用工作树打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileDiffsIndividually",
                "title": "单独打开所有更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
                "title": "使用工作树单独打开所有更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileRevisions",
                "title": "打开修订时的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openOnlyChangedFiles",
                "title": "打开已更改和关闭未更改的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.applyChanges",
                "title": "应用更改",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.closeRepository",
                "title": "关闭存储库",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareAncestryWithWorking",
                "title": "将公共基础与工作树进行比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareWithMergeBase",
                "title": "与普通底座比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
                "title": "使用 Common Base 打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareWithHead",
                "title": "与 HEAD 比较",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.compareWithUpstream",
                "title": "与上游比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareWithSelected",
                "title": "与选定的比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.selectForCompare",
                "title": "选择进行比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareFileWithSelected",
                "title": "与选定的比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.selectFileForCompare",
                "title": "选择进行比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.compareWithWorking",
                "title": "与工作树比较",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.views.addAuthors",
                "title": "添加共同作者...",
                "category": "GitLens",
                "icon": "$(person-add)"
            },
            {
                "command": "gitlens.views.addAuthor",
                "title": "添加为共同作者",
                "category": "GitLens",
                "icon": "$(person-add)"
            },
            {
                "command": "gitlens.views.addAuthor.multi",
                "title": "添加为共同作者",
                "category": "GitLens",
                "icon": "$(person-add)"
            },
            {
                "command": "gitlens.views.createWorktree",
                "title": "创建工作树...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.ghpr.views.openOrCreateWorktree",
                "title": "在 Worktree (GitLens) 中签出拉取请求...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.title.createWorktree",
                "title": "创建工作树...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteWorktree",
                "title": "删除工作树...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteWorktree.multi",
                "title": "删除工作树...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.openWorktree",
                "title": "打开工作树",
                "category": "GitLens",
                "icon": "$(window)"
            },
            {
                "command": "gitlens.views.openWorktreeInNewWindow",
                "title": "在新窗口中打开工作树",
                "category": "GitLens",
                "icon": "$(empty-window)"
            },
            {
                "command": "gitlens.views.openWorktreeInNewWindow.multi",
                "title": "在新窗口中打开工作树",
                "category": "GitLens",
                "icon": "$(empty-window)"
            },
            {
                "command": "gitlens.views.revealRepositoryInExplorer",
                "title": "在文件资源管理器中显示",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.revealWorktreeInExplorer",
                "title": "在文件资源管理器中显示",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.cherryPick",
                "title": "樱桃采摘承诺...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.cherryPick.multi",
                "title": "樱桃精选承诺...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.createBranch",
                "title": "创建分支...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.title.createBranch",
                "title": "创建分支...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteBranch",
                "title": "删除分支...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteBranch.multi",
                "title": "删除分支...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.renameBranch",
                "title": "重命名分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.createTag",
                "title": "创建标签...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.title.createTag",
                "title": "创建标签...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteTag",
                "title": "删除标签...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.deleteTag.multi",
                "title": "删除标签...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.mergeBranchInto",
                "title": "将分支合并到当前分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.pushToCommit",
                "title": "推动提交...",
                "category": "GitLens",
                "icon": "$(gitlens-repo-push)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.rebaseOntoBranch",
                "title": "将当前分支重新设置为分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.rebaseOntoCommit",
                "title": "将当前分支重新设置为提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.rebaseOntoUpstream",
                "title": "将当前分支重新定位到上游...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.removeRemote",
                "title": "删除远程...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.resetCommit",
                "title": "将当前分支重置为上一个提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.resetToCommit",
                "title": "重置当前分支以提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.resetToTip",
                "title": "将当前分支重置为提示...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.revert",
                "title": "恢复提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.undoCommit",
                "title": "撤消提交",
                "category": "GitLens",
                "icon": "$(discard)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.views.setBranchComparisonToWorking",
                "title": "与工作树比较",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.setBranchComparisonToBranch",
                "title": "与分支（HEAD）比较",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.createPullRequest",
                "title": "创建拉取请求...",
                "category": "GitLens",
                "icon": "$(git-pull-request-create)"
            },
            {
                "command": "gitlens.views.openPullRequest",
                "title": "打开拉取请求",
                "category": "GitLens",
                "icon": "$(git-pull-request)"
            },
            {
                "command": "gitlens.views.openPullRequestChanges",
                "title": "打开拉取请求更改",
                "category": "GitLens",
                "icon": "$(diff-multiple)"
            },
            {
                "command": "gitlens.views.openPullRequestComparison",
                "title": "比较拉取请求",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.clearComparison",
                "title": "清晰的比较",
                "category": "GitLens",
                "icon": "$(close)"
            },
            {
                "command": "gitlens.views.clearReviewed",
                "title": "清除已审阅的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.collapseNode",
                "title": "坍塌",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.dismissNode",
                "title": "解雇",
                "category": "GitLens",
                "icon": "$(close)"
            },
            {
                "command": "gitlens.views.editNode",
                "title": "编辑...",
                "category": "GitLens",
                "icon": "$(edit)"
            },
            {
                "command": "gitlens.views.expandNode",
                "title": "扩张",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.refreshNode",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.loadMoreChildren",
                "title": "加载更多",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.loadAllChildren",
                "title": "加载全部",
                "category": "GitLens",
                "icon": "$(gitlens-expand)"
            },
            {
                "command": "gitlens.views.setShowRelativeDateMarkersOn",
                "title": "显示日期标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.setShowRelativeDateMarkersOff",
                "title": "隐藏日期标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.branches.setLayoutToList",
                "title": "以列表形式查看",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.branches.setLayoutToTree",
                "title": "以树形式查看",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.branches.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.branches.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.branches.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.branches.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.setShowBranchComparisonOn",
                "title": "显示分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.setShowBranchComparisonOff",
                "title": "隐藏分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.setShowBranchPullRequestOn",
                "title": "显示分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.branches.setShowBranchPullRequestOff",
                "title": "隐藏分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commitDetails.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.patchDetails.close",
                "title": "关闭补丁",
                "category": "GitLens",
                "icon": "$(close)"
            },
            {
                "command": "gitlens.views.patchDetails.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.commits.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.commits.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.commits.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.commits.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.commits.setCommitsFilterAuthors",
                "title": "按作者过滤提交...",
                "category": "GitLens",
                "icon": "$(filter)"
            },
            {
                "command": "gitlens.views.commits.setCommitsFilterOff",
                "title": "清除过滤器",
                "category": "GitLens",
                "icon": "$(filter-filled)"
            },
            {
                "command": "gitlens.views.commits.setShowMergeCommitsOff",
                "title": "隐藏合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowMergeCommitsOn",
                "title": "显示合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowBranchComparisonOn",
                "title": "显示分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowBranchComparisonOff",
                "title": "隐藏分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowBranchPullRequestOn",
                "title": "显示当前分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.commits.setShowBranchPullRequestOff",
                "title": "隐藏当前分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.contributors.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.contributors.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.contributors.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.contributors.setShowAllBranchesOn",
                "title": "查看所有分行",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowAllBranchesOff",
                "title": "仅查看当前分支",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowMergeCommitsOff",
                "title": "隐藏合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowMergeCommitsOn",
                "title": "显示合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowStatisticsOn",
                "title": "显示统计数据",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.contributors.setShowStatisticsOff",
                "title": "隐藏统计数据",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.drafts.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.drafts.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.drafts.info",
                "title": "了解云补丁...",
                "category": "GitLens",
                "icon": "$(info)"
            },
            {
                "command": "gitlens.views.drafts.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.drafts.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.drafts.create",
                "title": "创建云补丁...",
                "category": "GitLens",
                "icon": "$(add)"
            },
            {
                "command": "gitlens.views.drafts.delete",
                "title": "删除云补丁...",
                "category": "GitLens",
                "icon": "$(trash)"
            },
            {
                "command": "gitlens.views.draft.open",
                "title": "打开",
                "category": "GitLens",
                "icon": "$(eye)"
            },
            {
                "command": "gitlens.views.draft.openOnWeb",
                "title": "在 gitkraken.dev 上打开",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.views.fileHistory.changeBase",
                "title": "改变基地...",
                "category": "GitLens",
                "icon": "$(history)"
            },
            {
                "command": "gitlens.views.fileHistory.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.fileHistory.setCursorFollowingOn",
                "title": "查看线路历史记录",
                "category": "GitLens",
                "icon": "$(file)",
                "enablement": "gitlens:views:fileHistory:editorFollowing"
            },
            {
                "command": "gitlens.views.fileHistory.setCursorFollowingOff",
                "title": "查看文件历史记录",
                "category": "GitLens",
                "icon": "$(list-selection)",
                "enablement": "gitlens:views:fileHistory:editorFollowing || gitlens:views:fileHistory:cursorFollowing"
            },
            {
                "command": "gitlens.views.fileHistory.setEditorFollowingOn",
                "title": "取消固定当前历史记录",
                "category": "GitLens",
                "icon": "$(pinned)"
            },
            {
                "command": "gitlens.views.fileHistory.setEditorFollowingOff",
                "title": "固定当前历史记录",
                "category": "GitLens",
                "icon": "$(pin)"
            },
            {
                "command": "gitlens.views.fileHistory.setRenameFollowingOn",
                "title": "关注重命名",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setRenameFollowingOff",
                "title": "不要遵循重命名",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
                "title": "查看所有分行的历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
                "title": "仅查看当前分支的历史记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
                "title": "显示合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
                "title": "隐藏合并提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.fileHistory.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.graph.openInTab",
                "title": "在编辑器中打开",
                "category": "GitLens",
                "icon": "$(link-external)"
            },
            {
                "command": "gitlens.views.graph.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.graphDetails.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.home.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.account.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.lineHistory.changeBase",
                "title": "改变基地...",
                "category": "GitLens",
                "icon": "$(history)"
            },
            {
                "command": "gitlens.views.lineHistory.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.lineHistory.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.lineHistory.setEditorFollowingOn",
                "title": "取消固定当前历史记录",
                "category": "GitLens",
                "icon": "$(pinned)"
            },
            {
                "command": "gitlens.views.lineHistory.setEditorFollowingOff",
                "title": "固定当前历史记录",
                "category": "GitLens",
                "icon": "$(pin)"
            },
            {
                "command": "gitlens.views.lineHistory.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.lineHistory.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.pullRequest.close",
                "title": "关闭",
                "category": "GitLens",
                "icon": "$(close)"
            },
            {
                "command": "gitlens.views.pullRequest.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.pullRequest.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.pullRequest.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.pullRequest.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.pullRequest.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.remotes.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.remotes.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.remotes.setLayoutToList",
                "title": "以列表形式查看",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.remotes.setLayoutToTree",
                "title": "以树形式查看",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.remotes.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.remotes.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.remotes.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.remotes.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.remotes.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
                "title": "显示分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
                "title": "隐藏分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.repositories.setAutoRefreshToOn",
                "title": "启用自动刷新",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setAutoRefreshToOff",
                "title": "禁用自动刷新",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setBranchesLayoutToList",
                "title": "以列表形式查看分支机构",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.repositories.setBranchesLayoutToTree",
                "title": "将分支视为树",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.repositories.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.repositories.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.repositories.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.repositories.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowBranchComparisonOn",
                "title": "显示分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowBranchComparisonOff",
                "title": "隐藏分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
                "title": "显示分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
                "title": "隐藏分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowBranchesOn",
                "title": "显示分支机构",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowBranchesOff",
                "title": "隐藏分支",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowCommitsOn",
                "title": "显示提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowCommitsOff",
                "title": "隐藏提交",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowContributorsOn",
                "title": "显示贡献者",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowContributorsOff",
                "title": "隐藏贡献者",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowRemotesOn",
                "title": "显示遥控器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowRemotesOff",
                "title": "隐藏遥控器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowStashesOn",
                "title": "显示藏品",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowStashesOff",
                "title": "隐藏藏品",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowTagsOn",
                "title": "显示标签",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowTagsOff",
                "title": "隐藏标签",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowWorktreesOn",
                "title": "显示工作树",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowWorktreesOff",
                "title": "隐藏工作树",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
                "title": "显示当前分支状态",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
                "title": "隐藏当前分支状态",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.repositories.setShowSectionOff",
                "title": "隐藏",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.searchAndCompare.clear",
                "title": "清晰的结果",
                "category": "GitLens",
                "icon": "$(clear-all)"
            },
            {
                "command": "gitlens.views.searchAndCompare.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.searchAndCompare.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.searchAndCompare.searchCommits",
                "title": "搜索提交...",
                "category": "GitLens",
                "icon": "$(search)"
            },
            {
                "command": "gitlens.views.searchAndCompare.selectForCompare",
                "title": "比较参考文献...",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.setResultsCommitsFilterAuthors",
                "title": "按作者过滤提交...",
                "category": "GitLens",
                "icon": "$(filter)"
            },
            {
                "command": "gitlens.views.setResultsCommitsFilterOff",
                "title": "清除过滤器",
                "category": "GitLens",
                "icon": "$(filter-filled)"
            },
            {
                "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.searchAndCompare.swapComparison",
                "title": "掉期比较",
                "category": "GitLens",
                "icon": "$(arrow-swap)",
                "enablement": "viewItem =~ /gitlens:compare:results(?!:)\\b(?!.*?\\b\\+working\\b)/"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                "title": "仅显示左侧文件",
                "category": "GitLens",
                "enablement": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                "title": "仅显示右侧文件",
                "category": "GitLens",
                "enablement": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/"
            },
            {
                "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                "title": "清除过滤器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.stashes.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.stashes.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.stashes.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.stashes.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.stashes.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.tags.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.tags.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.tags.setLayoutToList",
                "title": "以列表形式查看",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.tags.setLayoutToTree",
                "title": "以树形式查看",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.tags.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.tags.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.tags.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.tags.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.tags.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.timeline.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.workspaces.addRepos",
                "title": "添加存储库...",
                "category": "GitLens",
                "icon": "$(add)"
            },
            {
                "command": "gitlens.views.workspaces.addReposFromLinked",
                "title": "从链接工作区添加存储库...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.workspaces.info",
                "title": "了解 GitKraken 工作区...",
                "category": "GitLens",
                "icon": "$(info)"
            },
            {
                "command": "gitlens.views.workspaces.convert",
                "title": "转换为云工作区...",
                "category": "GitLens",
                "icon": "$(cloud-upload)"
            },
            {
                "command": "gitlens.views.workspaces.create",
                "title": "创建云工作空间...",
                "category": "GitLens",
                "icon": "$(add)"
            },
            {
                "command": "gitlens.views.workspaces.delete",
                "title": "删除工作区...",
                "category": "GitLens",
                "icon": "$(trash)"
            },
            {
                "command": "gitlens.views.workspaces.locateAllRepos",
                "title": "找到存储库...",
                "category": "GitLens",
                "icon": "$(location)"
            },
            {
                "command": "gitlens.views.workspaces.createLocal",
                "title": "创建 VS Code 工作区...",
                "category": "GitLens",
                "icon": "$(empty-window)"
            },
            {
                "command": "gitlens.views.workspaces.openLocal",
                "title": "在当前窗口中打开 VS Code 工作区...",
                "category": "GitLens",
                "icon": "$(window)"
            },
            {
                "command": "gitlens.views.workspaces.openLocalNewWindow",
                "title": "在新窗口中打开 VS Code 工作区...",
                "category": "GitLens",
                "icon": "$(window)"
            },
            {
                "command": "gitlens.views.workspaces.changeAutoAddSetting",
                "title": "更改链接工作区自动添加行为...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.workspaces.repo.locate",
                "title": "找到存储库...",
                "category": "GitLens",
                "icon": "$(location)"
            },
            {
                "command": "gitlens.views.workspaces.repo.open",
                "title": "打开存储库",
                "category": "GitLens",
                "icon": "$(window)"
            },
            {
                "command": "gitlens.views.workspaces.repo.openInNewWindow",
                "title": "在新窗口中打开存储库",
                "category": "GitLens",
                "icon": "$(empty-window)"
            },
            {
                "command": "gitlens.views.workspaces.repo.addToWindow",
                "title": "将存储库添加到 VS Code 工作区",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.workspaces.repo.remove",
                "title": "从工作区中删除...",
                "category": "GitLens",
                "icon": "$(trash)"
            },
            {
                "command": "gitlens.views.workspaces.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.workspaces.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.worktrees.copy",
                "title": "复制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
                "title": "以自动方式查看文件",
                "category": "GitLens",
                "icon": "$(list-tree)"
            },
            {
                "command": "gitlens.views.worktrees.setFilesLayoutToList",
                "title": "以列表形式查看文件",
                "category": "GitLens",
                "icon": "$(gitlens-list-auto)"
            },
            {
                "command": "gitlens.views.worktrees.setFilesLayoutToTree",
                "title": "以树形式查看文件",
                "category": "GitLens",
                "icon": "$(list-flat)"
            },
            {
                "command": "gitlens.views.worktrees.setShowAvatarsOn",
                "title": "显示头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.setShowAvatarsOff",
                "title": "隐藏头像",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
                "title": "显示分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
                "title": "隐藏分支比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
                "title": "显示分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
                "title": "隐藏分支拉取请求",
                "category": "GitLens"
            },
            {
                "command": "gitlens.enableDebugLogging",
                "title": "启用调试日志记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.disableDebugLogging",
                "title": "禁用调试日志记录",
                "category": "GitLens"
            },
            {
                "command": "gitlens.launchpad.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.graph.switchToEditorLayout",
                "title": "更喜欢在编辑器中提交图表",
                "category": "GitLens",
                "enablement": "config.gitlens.graph.layout != editor"
            },
            {
                "command": "gitlens.graph.switchToPanelLayout",
                "title": "更喜欢面板中的提交图",
                "category": "GitLens",
                "enablement": "config.gitlens.graph.layout != panel"
            },
            {
                "command": "gitlens.graph.push",
                "title": "推",
                "category": "GitLens",
                "icon": "$(gitlens-repo-push)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.pull",
                "title": "拉",
                "category": "GitLens",
                "icon": "$(gitlens-repo-pull)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.fetch",
                "title": "拿来",
                "category": "GitLens",
                "icon": "$(gitlens-repo-fetch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.switchToAnotherBranch",
                "title": "切换到另一个分支...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            },
            {
                "command": "gitlens.graph.copyDeepLinkToBranch",
                "title": "复制链接到分支",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyDeepLinkToCommit",
                "title": "复制链接以提交",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyDeepLinkToRepo",
                "title": "复制链接到存储库",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyDeepLinkToTag",
                "title": "将链接复制到标签",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyRemoteBranchUrl",
                "title": "复制远程分支 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.createBranch",
                "title": "创建分支...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.deleteBranch",
                "title": "删除分支...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.openBranchOnRemote",
                "title": "在远程打开分支",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.graph.mergeBranchInto",
                "title": "将分支合并到当前分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.publishBranch",
                "title": "发布分支",
                "category": "GitLens",
                "icon": "$(cloud-upload)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.rebaseOntoBranch",
                "title": "将当前分支重新设置为分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.rebaseOntoUpstream",
                "title": "将当前分支重新设置为上游...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.renameBranch",
                "title": "重命名分支...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.switchToBranch",
                "title": "切换至分行...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.hideLocalBranch",
                "title": "隐藏本地分支机构",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.hideRemoteBranch",
                "title": "隐藏远程分支",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.hideRemote",
                "title": "隐藏遥控器",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.hideTag",
                "title": "隐藏标签",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.hideRefGroup",
                "title": "隐藏",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.cherryPick",
                "title": "樱桃采摘承诺...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.copyMessage",
                "title": "复制留言",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copySha",
                "title": "复制SHA",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyRemoteCommitUrl",
                "title": "复制远程提交 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.copyRemoteCommitUrl.multi",
                "title": "复制远程提交 URL",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.showInDetailsView",
                "title": "检查详情",
                "category": "GitLens",
                "icon": "$(eye)"
            },
            {
                "command": "gitlens.graph.openSCM",
                "title": "开源控制",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openCommitOnRemote",
                "title": "远程开放提交",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.graph.openCommitOnRemote.multi",
                "title": "远程开放提交",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.graph.rebaseOntoCommit",
                "title": "将当前分支重新设置为提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.resetCommit",
                "title": "将当前分支重置为上一个提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.resetToCommit",
                "title": "重置当前分支以提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.resetToTip",
                "title": "将当前分支重置为提示...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.revert",
                "title": "恢复提交...",
                "category": "GitLens",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.switchToCommit",
                "title": "切换到提交...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.undoCommit",
                "title": "撤消提交",
                "category": "GitLens",
                "icon": "$(discard)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.stash.save",
                "title": "隐藏所有更改...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-save)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.stash.apply",
                "title": "应用隐藏...",
                "category": "GitLens",
                "icon": "$(gitlens-stash-pop)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.stash.delete",
                "title": "放下藏...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.stash.rename",
                "title": "重命名存储...",
                "category": "GitLens",
                "icon": "$(edit)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.createTag",
                "title": "创建标签...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.deleteTag",
                "title": "删除标签...",
                "category": "GitLens",
                "icon": "$(trash)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.switchToTag",
                "title": "切换到标签...",
                "category": "GitLens",
                "icon": "$(gitlens-switch)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.createWorktree",
                "title": "创建工作树...",
                "category": "GitLens",
                "icon": "$(add)",
                "enablement": "!operationInProgress"
            },
            {
                "command": "gitlens.graph.createPullRequest",
                "title": "创建拉取请求...",
                "category": "GitLens",
                "icon": "$(git-pull-request-create)"
            },
            {
                "command": "gitlens.graph.openPullRequest",
                "title": "打开拉取请求",
                "category": "GitLens",
                "icon": "$(git-pull-request)"
            },
            {
                "command": "gitlens.graph.openPullRequestChanges",
                "title": "打开拉取请求更改",
                "category": "GitLens",
                "icon": "$(diff-multiple)"
            },
            {
                "command": "gitlens.graph.openPullRequestComparison",
                "title": "比较拉取请求",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.graph.openPullRequestOnRemote",
                "title": "在远程打开拉取请求",
                "category": "GitLens",
                "icon": "$(globe)"
            },
            {
                "command": "gitlens.graph.compareAncestryWithWorking",
                "title": "将公共基础与工作树进行比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.compareWithMergeBase",
                "title": "与普通底座比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
                "title": "使用 Common Base 打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.compareWithHead",
                "title": "与 HEAD 比较",
                "category": "GitLens",
                "icon": "$(compare-changes)"
            },
            {
                "command": "gitlens.graph.compareWithUpstream",
                "title": "与上游比较",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.compareWithWorking",
                "title": "与工作树比较",
                "category": "GitLens",
                "icon": "$(gitlens-compare-ref-working)"
            },
            {
                "command": "gitlens.graph.openChangedFiles",
                "title": "打开文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileDiffs",
                "title": "打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileDiffsWithWorking",
                "title": "使用工作树打开所有更改",
                "icon": "$(diff-multiple)",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileDiffsIndividually",
                "title": "单独打开所有更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
                "title": "单独打开工作树的所有更改",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openChangedFileRevisions",
                "title": "打开修订时的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.openOnlyChangedFiles",
                "title": "打开已更改和关闭未更改的文件",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.addAuthor",
                "title": "添加为共同作者",
                "category": "GitLens",
                "icon": "$(person-add)"
            },
            {
                "command": "gitlens.graph.copy",
                "title": "复制",
                "category": "GitLens",
                "icon": "$(copy)"
            },
            {
                "command": "gitlens.graph.columnAuthorOn",
                "title": "显示作者专栏",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnAuthorOff",
                "title": "隐藏作者栏",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnDateTimeOn",
                "title": "显示日期列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnDateTimeOff",
                "title": "隐藏日期列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnShaOn",
                "title": "显示 SHA 列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnShaOff",
                "title": "隐藏 SHA 列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnChangesOn",
                "title": "显示更改列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnChangesOff",
                "title": "隐藏更改列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnGraphOn",
                "title": "显示图表列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnGraphOff",
                "title": "隐藏图表列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnMessageOn",
                "title": "显示提交消息列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnMessageOff",
                "title": "隐藏提交消息列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnRefOn",
                "title": "显示分支/标签列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnRefOff",
                "title": "隐藏分支/标签列",
                "category": "GitLens",
                "enablement": "webviewItemValue =~ /\\bcolumns:canHide\\b/"
            },
            {
                "command": "gitlens.graph.columnGraphCompact",
                "title": "使用紧凑图列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.columnGraphDefault",
                "title": "使用扩展图列",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.resetColumnsDefault",
                "title": "将列重置为默认布局",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.resetColumnsCompact",
                "title": "将列重置为紧凑布局",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerLocalBranchOn",
                "title": "显示本地分支标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerLocalBranchOff",
                "title": "隐藏本地分支标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
                "title": "显示远程分支标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
                "title": "隐藏远程分支标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerStashOn",
                "title": "显示隐藏标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerStashOff",
                "title": "隐藏隐藏标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerTagOn",
                "title": "显示标签标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerTagOff",
                "title": "隐藏标签标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerPullRequestOn",
                "title": "显示拉取请求标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.scrollMarkerPullRequestOff",
                "title": "隐藏拉取请求标记",
                "category": "GitLens"
            },
            {
                "command": "gitlens.graph.shareAsCloudPatch",
                "title": "分享为云补丁...",
                "category": "GitLens"
            },
            {
                "command": "gitlens.timeline.refresh",
                "title": "刷新",
                "category": "GitLens",
                "icon": "$(refresh)"
            }
        ],
        "icons": {
            "gitlens-commit-horizontal": {
                "description": "提交水平图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f101"
                }
            },
            "gitlens-graph": {
                "description": "图形图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f102"
                }
            },
            "gitlens-next-commit": {
                "description": "下一次提交图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f103"
                }
            },
            "gitlens-prev-commit-menu": {
                "description": "上一个提交菜单图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f104"
                }
            },
            "gitlens-prev-commit": {
                "description": "上一次提交图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f105"
                }
            },
            "gitlens-compare-ref-working": {
                "description": "比较参考工作图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f106"
                }
            },
            "gitlens-branches-view": {
                "description": "分支视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f107"
                }
            },
            "gitlens-commit-view": {
                "description": "提交视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f108"
                }
            },
            "gitlens-commits-view": {
                "description": "提交视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f109"
                }
            },
            "gitlens-compare-view": {
                "description": "比较视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10a"
                }
            },
            "gitlens-contributors-view": {
                "description": "贡献者视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10b"
                }
            },
            "gitlens-history-view": {
                "description": "历史视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10c"
                }
            },
            "gitlens-history": {
                "description": "历史图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10c"
                }
            },
            "gitlens-remotes-view": {
                "description": "遥控器视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10d"
                }
            },
            "gitlens-repositories-view": {
                "description": "存储库视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10e"
                }
            },
            "gitlens-search-view": {
                "description": "搜索视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f10f"
                }
            },
            "gitlens-stashes-view": {
                "description": "隐藏视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f110"
                }
            },
            "gitlens-stashes": {
                "description": "隐藏图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f110"
                }
            },
            "gitlens-tags-view": {
                "description": "标签视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f111"
                }
            },
            "gitlens-worktrees-view": {
                "description": "工作树视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f112"
                }
            },
            "gitlens-gitlens": {
                "description": "吉特伦斯图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f113"
                }
            },
            "gitlens-stash-pop": {
                "description": "隐藏流行图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f114"
                }
            },
            "gitlens-stash-save": {
                "description": "隐藏保存图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f115"
                }
            },
            "gitlens-unplug": {
                "description": "拔掉插头图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f116"
                }
            },
            "gitlens-open-revision": {
                "description": "打开修订图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f117"
                }
            },
            "gitlens-switch": {
                "description": "开关图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f118"
                }
            },
            "gitlens-expand": {
                "description": "展开图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f119"
                }
            },
            "gitlens-list-auto": {
                "description": "列表自动图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11a"
                }
            },
            "gitlens-repo-force-push": {
                "description": "回购强制推送图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11b"
                }
            },
            "gitlens-pinned-filled": {
                "description": "固定填充图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11c"
                }
            },
            "gitlens-clock": {
                "description": "时钟图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11d"
                }
            },
            "gitlens-provider-azdo": {
                "description": "提供商 azdo 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11e"
                }
            },
            "gitlens-provider-bitbucket": {
                "description": "提供商位桶图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f11f"
                }
            },
            "gitlens-provider-gerrit": {
                "description": "提供商-gerrit 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f120"
                }
            },
            "gitlens-provider-gitea": {
                "description": "提供商-gitea 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f121"
                }
            },
            "gitlens-provider-github": {
                "description": "供应商-github 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f122"
                }
            },
            "gitlens-provider-gitlab": {
                "description": "供应商-gitlab 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f123"
                }
            },
            "gitlens-gitlens-inspect": {
                "description": "gitlens 检查图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f124"
                }
            },
            "gitlens-workspaces-view": {
                "description": "工作区视图图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f125"
                }
            },
            "gitlens-confirm-checked": {
                "description": "确认选中图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f126"
                }
            },
            "gitlens-confirm-unchecked": {
                "description": "确认未选中的图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f127"
                }
            },
            "gitlens-cloud-patch": {
                "description": "云补丁图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f128"
                }
            },
            "gitlens-cloud-patch-share": {
                "description": "云补丁共享图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f129"
                }
            },
            "gitlens-inspect": {
                "description": "检查图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12a"
                }
            },
            "gitlens-repository-filled": {
                "description": "存储库填充的图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12b"
                }
            },
            "gitlens-gitlens-filled": {
                "description": "吉特伦斯填充图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12c"
                }
            },
            "gitlens-code-suggestion": {
                "description": "代码建议图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12d"
                }
            },
            "gitlens-diff-multiple": {
                "description": "差异多个图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12e"
                }
            },
            "gitlens-diff-single": {
                "description": "差异单个图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f12f"
                }
            },
            "gitlens-repo-fetch": {
                "description": "回购获取图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f130"
                }
            },
            "gitlens-repo-pull": {
                "description": "回购拉动图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f131"
                }
            },
            "gitlens-repo-push": {
                "description": "回购推送图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f132"
                }
            },
            "gitlens-provider-jira": {
                "description": "供应商-jira 图标",
                "default": {
                    "fontPath": "dist/glicons.woff2",
                    "fontCharacter": "\\f133"
                }
            }
        },
        "menus": {
            "commandPalette": [
                {
                    "command": "gitlens.plus.login",
                    "when": "!gitlens:plus"
                },
                {
                    "command": "gitlens.plus.logout",
                    "when": "true"
                },
                {
                    "command": "gitlens.plus.signUp",
                    "when": "!gitlens:plus"
                },
                {
                    "command": "gitlens.plus.startPreviewTrial",
                    "when": "!gitlens:plus"
                },
                {
                    "command": "gitlens.plus.reactivateProTrial",
                    "when": "gitlens:plus:state == 5"
                },
                {
                    "command": "gitlens.plus.manage",
                    "when": "gitlens:plus"
                },
                {
                    "command": "gitlens.plus.cloudIntegrations.manage",
                    "when": "gitlens:plus"
                },
                {
                    "command": "gitlens.plus.hide",
                    "when": "config.gitlens.plusFeatures.enabled"
                },
                {
                    "command": "gitlens.plus.restore",
                    "when": "!config.gitlens.plusFeatures.enabled"
                },
                {
                    "command": "gitlens.plus.refreshRepositoryAccess",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.gk.switchOrganization",
                    "when": "gitlens:gk:hasOrganizations"
                },
                {
                    "command": "gitlens.showPatchDetailsPage",
                    "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
                },
                {
                    "command": "gitlens.applyPatchFromClipboard",
                    "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.copyWorkingChangesToWorktree",
                    "when": "gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.graph.copyWorkingChangesToWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.createPatch",
                    "when": "false && gitlens:enabled && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.createCloudPatch",
                    "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
                },
                {
                    "command": "gitlens.shareAsCloudPatch",
                    "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled"
                },
                {
                    "command": "gitlens.openCloudPatch",
                    "when": "false"
                },
                {
                    "command": "gitlens.openPatch",
                    "when": "false && gitlens:enabled"
                },
                {
                    "command": "gitlens.timeline.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.showBranchesView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showCommitDetailsView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showCommitsView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showContributorsView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showDraftsView",
                    "when": "gitlens:enabled && gitlens:gk:organization:drafts:enabled"
                },
                {
                    "command": "gitlens.showFileHistoryView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showLaunchpad",
                    "when": "gitlens:prerelease"
                },
                {
                    "command": "gitlens.showFocusPage",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.launchpad.split",
                    "when": "gitlens:enabled && config.gitlens.launchpad.allowMultiple"
                },
                {
                    "command": "gitlens.launchpad.indicator.toggle",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showGraphPage",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.graph.split",
                    "when": "gitlens:enabled && config.gitlens.graph.allowMultiple"
                },
                {
                    "command": "gitlens.showGraphView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.toggleGraph",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.toggleMaximizedGraph",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showHomeView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showAccountView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showInCommitGraph",
                    "when": "false"
                },
                {
                    "command": "gitlens.showInCommitGraphView",
                    "when": "false"
                },
                {
                    "command": "gitlens.showLineHistoryView",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.showRemotesView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showRepositoriesView",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.showSearchAndCompareView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showSettingsPage!views",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!file-annotations",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!branches-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!commits-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!contributors-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!file-history-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!line-history-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!remotes-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!repositories-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!search-compare-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!stashes-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!tags-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!worktrees-view",
                    "when": "false"
                },
                {
                    "command": "gitlens.showSettingsPage!commit-graph",
                    "when": "false"
                },
                {
                    "command": "gitlens.showStashesView",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.showTagsView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showTimelinePage",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showInTimeline",
                    "when": "gitlens:enabled && resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.timeline.split",
                    "when": "gitlens:enabled && config.gitlens.visualHistory.allowMultiple"
                },
                {
                    "command": "gitlens.showTimelineView",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showWorktreesView",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.showWorkspacesView",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.compareWith",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.compareHeadWith",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.compareWorkingWith",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.diffDirectory",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.diffDirectoryWithHead",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.diffWithNext",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && !isInDiffEditor"
                },
                {
                    "command": "gitlens.diffWithNextInDiffLeft",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffEditor && !isInDiffRightEditor"
                },
                {
                    "command": "gitlens.diffWithNextInDiffRight",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffRightEditor"
                },
                {
                    "command": "gitlens.diffWithPrevious",
                    "when": "resource in gitlens:tabs:tracked && !isInDiffEditor"
                },
                {
                    "command": "gitlens.diffWithPreviousInDiffLeft",
                    "when": "resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
                },
                {
                    "command": "gitlens.diffWithPreviousInDiffRight",
                    "when": "resource in gitlens:tabs:tracked && isInDiffRightEditor"
                },
                {
                    "command": "gitlens.diffLineWithPrevious",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.diffFolderWithRevision",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.diffFolderWithRevisionFrom",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.diffWithRevision",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.diffWithWorking",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.diffWithWorkingInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.diffWithWorkingInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.diffLineWithWorking",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.disableRebaseEditor",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.enableRebaseEditor",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.externalDiff",
                    "when": "!gitlens:hasVirtualFolders && resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.externalDiffAll",
                    "when": "gitlens:enabled && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.toggleFileBlame",
                    "when": "resource in gitlens:tabs:blameable || config.gitlens.blame.toggleMode == window"
                },
                {
                    "command": "gitlens.toggleFileBlameInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.toggleFileBlameInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.annotations.nextChange",
                    "when": "false"
                },
                {
                    "command": "gitlens.annotations.previousChange",
                    "when": "false"
                },
                {
                    "command": "gitlens.clearFileAnnotations",
                    "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated || resource in gitlens:tabs:annotated)"
                },
                {
                    "command": "gitlens.computingFileAnnotations",
                    "when": "false"
                },
                {
                    "command": "gitlens.toggleFileHeatmap",
                    "when": "resource in gitlens:tabs:blameable || config.gitlens.heatmap.toggleMode == window"
                },
                {
                    "command": "gitlens.toggleFileHeatmapInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.toggleFileHeatmapInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.toggleFileChanges",
                    "when": "(resource in gitlens:tabs:blameable  || config.gitlens.changes.toggleMode == window) && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.toggleFileChangesOnly",
                    "when": "false"
                },
                {
                    "command": "gitlens.toggleLineBlame",
                    "when": "!gitlens:disabled"
                },
                {
                    "command": "gitlens.toggleCodeLens",
                    "when": "!gitlens:disabled && !gitlens:disabledToggleCodeLens"
                },
                {
                    "command": "gitlens.gitCommands",
                    "when": "!gitlens:disabled"
                },
                {
                    "command": "gitlens.gitCommands.branch",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.branch.create",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.branch.delete",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.branch.prune",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.branch.rename",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.checkout",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.cherryPick",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.history",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.merge",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.rebase",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.remote",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.remote.add",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.remote.prune",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.remote.remove",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.reset",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.revert",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.show",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash.drop",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash.list",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash.pop",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash.push",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.stash.rename",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.status",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.switch",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.tag",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.tag.create",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.tag.delete",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.worktree",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.worktree.create",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.worktree.delete",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.gitCommands.worktree.open",
                    "when": "!gitlens:disabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.switchAIModel",
                    "when": "gitlens:enabled && gitlens:gk:organization:ai:enabled"
                },
                {
                    "command": "gitlens.switchMode",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.toggleReviewMode",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.toggleZenMode",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showCommitSearch",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showLastQuickPick",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.revealCommitInView",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.showCommitInView",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.showInDetailsView",
                    "when": "false"
                },
                {
                    "command": "gitlens.showCommitsInView",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.showFileHistoryInView",
                    "when": "false"
                },
                {
                    "command": "gitlens.openFileHistory",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.openFolderHistory",
                    "when": "false"
                },
                {
                    "command": "gitlens.showQuickCommitDetails",
                    "when": "false"
                },
                {
                    "command": "gitlens.showLineCommitInView",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.showQuickCommitFileDetails",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.showQuickRevisionDetails",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.showQuickFileHistory",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.quickOpenFileHistory",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.showQuickBranchHistory",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showQuickRepoHistory",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showQuickRepoStatus",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.showQuickStashList",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.addAuthors",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.connectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected"
                },
                {
                    "command": "gitlens.disconnectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && gitlens:repos:withHostingIntegrationsConnected"
                },
                {
                    "command": "gitlens.copyCurrentBranch",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.copyMessageToClipboard",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "resource in gitlens:tabs:blameable"
                },
                {
                    "command": "gitlens.copyRelativePathToClipboard",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.closeUnchangedFiles",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.openChangedFiles",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.openOnlyChangedFiles",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.openBranchesOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyRemoteBranchesUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.openBranchOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.openCurrentBranchOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyDeepLinkToBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToComparison",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToFile",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToFileAtRevision",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToLines",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToRepo",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.copyDeepLinkToTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyDeepLinkToWorkspace",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyRemoteBranchUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.openCommitOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyRemoteCommitUrl",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.views.copyRemoteCommitUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.copyRemoteCommitUrl.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.openComparisonOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyRemoteComparisonUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.openPullRequestOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.copyRemotePullRequestUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.openAssociatedPullRequestOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.openFileFromRemote",
                    "when": "gitlens:enabled"
                },
                {
                    "command": "gitlens.openFileOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlToClipboard",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlWithoutRange",
                    "when": "false"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.openBlamePriorToChange",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.openFileRevision",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.openFileRevisionFrom",
                    "when": "resource in gitlens:tabs:tracked"
                },
                {
                    "command": "gitlens.openRepoOnRemote",
                    "when": "gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.copyRemoteRepositoryUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.openRevisionFile",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffEditor"
                },
                {
                    "command": "gitlens.openRevisionFileInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.openRevisionFileInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.openWorkingFile",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.openWorkingFileInDiffLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.openWorkingFileInDiffRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.views.stash.apply",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stash.delete",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stash.delete.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stash.rename",
                    "when": "false"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.stashSaveFiles",
                    "when": "false"
                },
                {
                    "command": "gitlens.inviteToLiveShare",
                    "when": "false"
                },
                {
                    "command": "gitlens.browseRepoAtRevision",
                    "when": "!gitlens:hasVirtualFolders && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.browseRepoAtRevisionInNewWindow",
                    "when": "!gitlens:hasVirtualFolders && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.browseRepoBeforeRevision",
                    "when": "!gitlens:hasVirtualFolders && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.browseRepoBeforeRevisionInNewWindow",
                    "when": "!gitlens:hasVirtualFolders && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
                },
                {
                    "command": "gitlens.views.browseRepoAtRevision",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.browseRepoBeforeRevision",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.fetchRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.pullRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.pushRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders"
                },
                {
                    "command": "gitlens.views.addRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.highlightChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.highlightRevisionChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.restore",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.switchToBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.switchToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.switchToTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.copyAsMarkdown",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.copyUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.copyUrl.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openUrl.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pruneRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.publishBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.publishRepository",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pushWithForce",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openInTerminal",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openInIntegratedTerminal",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setAsDefault",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.unsetAsDefault",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stageDirectory",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stageFile",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.unstageDirectory",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.unstageFile",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.star.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.unstar.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openDirectoryDiff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openDirectoryDiffWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangesWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openPreviousChangesWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openFile",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openFileRevision",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFiles",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffs",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsIndividually",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileRevisions",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openOnlyChangedFiles",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.applyChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.closeRepository",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareAncestryWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareWithMergeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareWithHead",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareWithUpstream",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareWithSelected",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.selectForCompare",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareFileWithSelected",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.selectFileForCompare",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.compareWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.addAuthors",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.addAuthor",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.addAuthor.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.createWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.ghpr.views.openOrCreateWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.title.createWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteWorktree.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openWorktreeInNewWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openWorktreeInNewWindow.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.revealRepositoryInExplorer",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.revealWorktreeInExplorer",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.title.createBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteBranch.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.renameBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.cherryPick",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.cherryPick.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.mergeBranchInto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pushToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.rebaseOntoBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.rebaseOntoCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.rebaseOntoUpstream",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.resetCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.resetToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.resetToTip",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.revert",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.undoCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.removeRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.title.createTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.deleteTag.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.createPullRequest",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openPullRequest",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openPullRequestChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.openPullRequestComparison",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.clearComparison",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.clearReviewed",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.collapseNode",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.dismissNode",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.editNode",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.expandNode",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.refreshNode",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.loadMoreChildren",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.loadAllChildren",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setShowRelativeDateMarkersOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setShowRelativeDateMarkersOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchComparisonOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchComparisonOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchPullRequestOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchPullRequestOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commitDetails.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.patchDetails.close",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.patchDetails.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterAuthors",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowMergeCommitsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowMergeCommitsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchComparisonOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchComparisonOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchPullRequestOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchPullRequestOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowAllBranchesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowAllBranchesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowMergeCommitsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowMergeCommitsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowStatisticsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.contributors.setShowStatisticsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.info",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.create",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.drafts.delete",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.draft.open",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.draft.openOnWeb",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.changeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setCursorFollowingOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setCursorFollowingOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setEditorFollowingOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setEditorFollowingOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setRenameFollowingOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setRenameFollowingOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.graph.openInTab",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.graph.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.graphDetails.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.home.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.account.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.changeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.setEditorFollowingOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.setEditorFollowingOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.lineHistory.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.close",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.pullRequest.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setAutoRefreshToOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setAutoRefreshToOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchComparisonOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchComparisonOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowCommitsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowCommitsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowContributorsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowContributorsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowRemotesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowRemotesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowStashesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowStashesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowTagsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowTagsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowWorktreesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowWorktreesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.repositories.setShowSectionOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.clear",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.searchCommits",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.selectForCompare",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setResultsCommitsFilterAuthors",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.setResultsCommitsFilterOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.swapComparison",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stashes.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stashes.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.tags.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.timeline.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.info",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.convert",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.create",
                    "when": "gitlens:plus"
                },
                {
                    "command": "gitlens.views.workspaces.delete",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.addRepos",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.addReposFromLinked",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.repo.locate",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.locateAllRepos",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.createLocal",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.openLocal",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.openLocalNewWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.changeAutoAddSetting",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.repo.openInNewWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.repo.open",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.repo.addToWindow",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.repo.remove",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.workspaces.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToList",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToTree",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowAvatarsOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowAvatarsOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.switchToEditorLayout",
                    "when": "gitlens:enabled && config.gitlens.graph.layout != editor"
                },
                {
                    "command": "gitlens.graph.switchToPanelLayout",
                    "when": "gitlens:enabled && config.gitlens.graph.layout != panel"
                },
                {
                    "command": "gitlens.graph.push",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.pull",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.fetch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openSCM",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.switchToAnotherBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToRepo",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.launchpad.refresh",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyRemoteBranchUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.createBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.deleteBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openBranchOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.mergeBranchInto",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.publishBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.rebaseOntoBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.rebaseOntoUpstream",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.renameBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.switchToBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.hideLocalBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.hideRemoteBranch",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.hideRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.hideTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.hideRefGroup",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.cherryPick",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyMessage",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copySha",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyRemoteCommitUrl",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copyRemoteCommitUrl.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.showInDetailsView",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openCommitOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openCommitOnRemote.multi",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.rebaseOntoCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.resetCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.resetToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.resetToTip",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.revert",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.switchToCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.undoCommit",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.stash.save",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.stash.apply",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.stash.delete",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.stash.rename",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.createTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.deleteTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.switchToTag",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.createWorktree",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.createPullRequest",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openPullRequest",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openPullRequestChanges",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openPullRequestComparison",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openPullRequestOnRemote",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.compareAncestryWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.compareWithMergeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.compareWithHead",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.compareWithUpstream",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.compareWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFiles",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffs",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithWorking",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsIndividually",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openChangedFileRevisions",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.openOnlyChangedFiles",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.addAuthor",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.copy",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnAuthorOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnAuthorOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnDateTimeOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnDateTimeOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnShaOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnShaOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnGraphCompact",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnGraphDefault",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnChangesOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnChangesOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnGraphOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnGraphOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnMessageOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnMessageOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnRefOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.columnRefOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.resetColumnsDefault",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.resetColumnsCompact",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerLocalBranchOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerLocalBranchOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerStashOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerStashOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerTagOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerTagOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerPullRequestOn",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.scrollMarkerPullRequestOff",
                    "when": "false"
                },
                {
                    "command": "gitlens.graph.shareAsCloudPatch",
                    "when": "false"
                },
                {
                    "command": "gitlens.enableDebugLogging",
                    "when": "config.gitlens.outputLevel != debug"
                },
                {
                    "command": "gitlens.disableDebugLogging",
                    "when": "config.gitlens.outputLevel == debug"
                },
                {
                    "command": "gitlens.generateCommitMessage",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled"
                },
                {
                    "command": "gitlens.resetAIKey",
                    "when": "gitlens:enabled && gitlens:gk:organization:ai:enabled"
                }
            ],
            "editor/context": [
                {
                    "command": "gitlens.openWorkingFile",
                    "when": "editorTextFocus && config.gitlens.menus.editor.compare && resourceScheme == gitlens",
                    "group": "1_z_gitlens@0"
                },
                {
                    "submenu": "gitlens/editor/context/changes",
                    "when": "editorTextFocus && config.gitlens.menus.editor.compare && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_z_gitlens_open@1"
                },
                {
                    "submenu": "gitlens/editor/context/openOn",
                    "when": "editorTextFocus && gitlens:repos:withRemotes && config.gitlens.menus.editor.remote && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_z_gitlens_open@2"
                },
                {
                    "submenu": "gitlens/editor/annotations",
                    "when": "editorTextFocus && resource in gitlens:tabs:blameable && config.gitlens.menus.editor.blame && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_z_gitlens_open_file@1"
                },
                {
                    "submenu": "gitlens/editor/history",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editor.history && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_z_gitlens_open_file@2"
                }
            ],
            "editor/context/copy": [
                {
                    "command": "gitlens.copyRelativePathToClipboard",
                    "when": "editorTextFocus && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlToClipboard",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens_remote@1"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens_remote@2"
                },
                {
                    "command": "gitlens.copyRemoteCommitUrl",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens_remote@3"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.copyMessageToClipboard",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.copyDeepLinkToLines",
                    "when": "editorTextFocus && editorHasSelection && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.copyDeepLinkToFile",
                    "when": "editorTextFocus && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.copyDeepLinkToFileAtRevision",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_gitlens@4"
                }
            ],
            "editor/lineNumber/context": [
                {
                    "submenu": "gitlens/editor/lineNumber/context/share",
                    "when": "gitlens:repos:withRemotes && config.gitlens.menus.editorGutter.share && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "2_gitlens@2"
                },
                {
                    "submenu": "gitlens/editor/lineNumber/context/changes",
                    "when": "config.gitlens.menus.editorGutter.compare && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "3_gitlens@1"
                },
                {
                    "submenu": "gitlens/editor/lineNumber/context/openOn",
                    "when": "gitlens:repos:withRemotes && config.gitlens.menus.editorGutter.remote && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "3_gitlens@2"
                }
            ],
            "editor/title": [
                {
                    "command": "gitlens.openPatch",
                    "when": "false && editorLangId == diff"
                },
                {
                    "command": "gitlens.diffWithWorking",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && !isInDiffEditor",
                    "group": "navigation@-99"
                },
                {
                    "command": "gitlens.diffWithWorkingInDiffLeft",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@-99"
                },
                {
                    "command": "gitlens.diffWithWorkingInDiffRight",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffRightEditor",
                    "group": "navigation@-99"
                },
                {
                    "command": "gitlens.openWorkingFile",
                    "when": "gitlens:enabled && resourceScheme == git && !isInDiffEditor",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.openWorkingFile",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && !isInDiffEditor",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.openWorkingFileInDiffLeft",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.openWorkingFileInDiffRight",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffRightEditor",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.openRevisionFileInDiffLeft",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@-97"
                },
                {
                    "command": "gitlens.openRevisionFileInDiffRight",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|pr)$/ && isInDiffRightEditor",
                    "group": "navigation@-97"
                },
                {
                    "command": "gitlens.diffWithPrevious",
                    "alt": "gitlens.diffWithRevision",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
                    "group": "navigation@97"
                },
                {
                    "command": "gitlens.diffWithPreviousInDiffLeft",
                    "alt": "gitlens.diffWithRevision",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@97"
                },
                {
                    "command": "gitlens.diffWithPreviousInDiffRight",
                    "alt": "gitlens.diffWithRevision",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
                    "group": "navigation@97"
                },
                {
                    "command": "gitlens.showQuickRevisionDetails",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffRight",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.diffWithNext",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && !isInDiffEditor",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.diffWithNextInDiffLeft",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffEditor && !isInDiffRightEditor",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.diffWithNextInDiffRight",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editorGroup.compare && isInDiffRightEditor",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.toggleFileBlame",
                    "when": "config.gitlens.fileAnnotations.command == blame && resource in gitlens:tabs:blameable && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100",
                    "alt": "gitlens.toggleFileHeatmap"
                },
                {
                    "command": "gitlens.toggleFileHeatmap",
                    "when": "config.gitlens.fileAnnotations.command == heatmap && resource in gitlens:tabs:blameable && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100",
                    "alt": "gitlens.toggleFileBlame"
                },
                {
                    "command": "gitlens.toggleFileChanges",
                    "when": "config.gitlens.fileAnnotations.command == changes && resource in gitlens:tabs:blameable && !gitlens:hasVirtualFolders && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100",
                    "alt": "gitlens.toggleFileBlame"
                },
                {
                    "submenu": "gitlens/editor/annotations",
                    "when": "!config.gitlens.fileAnnotations.command && resource in gitlens:tabs:blameable && !gitlens:window:annotated && resource not in gitlens:tabs:annotated && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100"
                },
                {
                    "command": "gitlens.computingFileAnnotations",
                    "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated == computing || resource in gitlens:tabs:annotated:computing) && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100"
                },
                {
                    "command": "gitlens.clearFileAnnotations",
                    "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated == computed || (resource in gitlens:tabs:annotated && resource not in gitlens:tabs:annotated:computing)) && config.gitlens.menus.editorGroup.blame",
                    "group": "navigation@100"
                },
                {
                    "command": "gitlens.timeline.refresh",
                    "when": "activeWebviewPanelId === gitlens.timeline",
                    "group": "navigation@-99"
                },
                {
                    "command": "gitlens.graph.refresh",
                    "when": "activeWebviewPanelId === gitlens.graph",
                    "group": "navigation@-99"
                },
                {
                    "submenu": "gitlens/graph/configuration",
                    "when": "activeWebviewPanelId === gitlens.graph",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.launchpad.refresh",
                    "when": "activeWebviewPanelId === gitlens.focus",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.launchpad.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.focus && config.gitlens.launchpad.allowMultiple",
                    "group": "navigation@-97"
                },
                {
                    "command": "gitlens.graph.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.graph && config.gitlens.graph.allowMultiple",
                    "group": "navigation@-97"
                },
                {
                    "command": "gitlens.timeline.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.timeline && config.gitlens.visualHistory.allowMultiple",
                    "group": "navigation@-97"
                }
            ],
            "editor/title/context": [
                {
                    "command": "gitlens.copyRemoteFileUrlWithoutRange",
                    "when": "gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.editorTab.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_cutcopypaste@100"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.editorTab.clipboard && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "1_cutcopypaste@101"
                },
                {
                    "command": "gitlens.openWorkingFile",
                    "when": "resourceScheme == gitlens && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "2_a_gitlens@0"
                },
                {
                    "submenu": "gitlens/editor/changes",
                    "when": "gitlens:enabled && config.gitlens.menus.editorTab.compare && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "2_a_gitlens_open@1"
                },
                {
                    "submenu": "gitlens/editor/openOn",
                    "when": "gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.editorTab.remote && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "2_a_gitlens_open@2"
                },
                {
                    "submenu": "gitlens/editor/history",
                    "when": "gitlens:enabled && config.gitlens.menus.editorTab.history && isFileSystemResource && resourceScheme =~ /^(?!output$|vscode-(?!remote|vfs$)).*$/",
                    "group": "2_a_gitlens_open_file@1"
                },
                {
                    "command": "gitlens.launchpad.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.focus && config.gitlens.launchpad.allowMultiple",
                    "group": "6_split_in_group_gitlens@2"
                },
                {
                    "command": "gitlens.graph.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.graph && config.gitlens.graph.allowMultiple",
                    "group": "6_split_in_group_gitlens@2"
                },
                {
                    "command": "gitlens.timeline.split",
                    "when": "resourceScheme == webview-panel && activeWebviewPanelId === gitlens.timeline && config.gitlens.visualHistory.allowMultiple",
                    "group": "6_split_in_group_gitlens@2"
                }
            ],
            "explorer/context": [
                {
                    "submenu": "gitlens/explorer/changes",
                    "when": "!explorerResourceIsRoot && gitlens:enabled && config.gitlens.menus.explorer.compare",
                    "group": "4_t_gitlens@0"
                },
                {
                    "submenu": "gitlens/explorer/openOn",
                    "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.remote",
                    "group": "4_t_gitlens@1"
                },
                {
                    "submenu": "gitlens/explorer/history",
                    "when": "gitlens:enabled && config.gitlens.menus.explorer.history",
                    "group": "4_timeline@0"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlWithoutRange",
                    "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.clipboard",
                    "group": "6_copypath@100"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "!explorerResourceIsRoot && gitlens:enabled && gitlens:repos:withRemotes && config.gitlens.menus.explorer.clipboard",
                    "group": "6_copypath@101"
                }
            ],
            "extension/context": [
                {
                    "command": "gitlens.getStarted",
                    "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showWelcomePage",
                    "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
                    "group": "9_gitlens@2"
                },
                {
                    "command": "gitlens.showSettingsPage",
                    "when": "extension =~ /^eamodio.gitlens?$/ && extensionStatus == installed",
                    "group": "9_gitlens@3"
                }
            ],
            "git.commit": [
                {
                    "command": "gitlens.addAuthors",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && config.gitlens.menus.scmRepository.authors",
                    "group": "4_gitlens@1"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
                    "group": "4_gitlens@2"
                },
                {
                    "command": "gitlens.shareAsCloudPatch",
                    "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
                    "group": "4_gitlens@3"
                },
                {
                    "command": "gitlens.generateCommitMessage",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled && config.gitlens.menus.scmRepository.generateCommitMessage",
                    "group": "4_gitlens@4"
                }
            ],
            "menuBar/edit/copy": [
                {
                    "command": "gitlens.copyRemoteFileUrlToClipboard",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "resource in gitlens:tabs:tracked && config.gitlens.menus.editor.clipboard",
                    "group": "1_gitlens@2"
                }
            ],
            "scm/sourceControl": [
                {
                    "command": "gitlens.showGraph",
                    "when": "gitlens:enabled && config.gitlens.menus.scm.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
                    "group": "6_gitlens@1"
                }
            ],
            "scm/title": [
                {
                    "command": "gitlens.stashSave",
                    "when": "gitlens:enabled && config.gitlens.menus.scmRepositoryInline.stash && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git",
                    "group": "navigation@-1001"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "gitlens:enabled && config.gitlens.menus.scmRepositoryInline.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
                    "group": "navigation@-1000"
                },
                {
                    "command": "gitlens.addAuthors",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && config.gitlens.menus.scmRepository.authors",
                    "group": "2_z_gitlens@1"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
                    "group": "2_z_gitlens@2"
                },
                {
                    "command": "gitlens.shareAsCloudPatch",
                    "when": "gitlens:enabled && scmProvider == git && config.gitlens.menus.scmRepository.patch",
                    "group": "2_z_gitlens@3"
                },
                {
                    "command": "gitlens.generateCommitMessage",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:ai:enabled && config.gitlens.ai.experimental.generateCommitMessage.enabled && scmProvider == git && config.gitlens.menus.scmRepository.generateCommitMessage",
                    "group": "2_z_gitlens@4"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "gitlens:enabled && config.gitlens.menus.scmRepository.graph && gitlens:plus:enabled && scmProvider == git && scmProviderRootUri not in gitlens:plus:disallowedRepos",
                    "group": "2_z_gitlens@5"
                }
            ],
            "scm/resourceGroup/context": [
                {
                    "command": "gitlens.stashSave",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroupInline.stash",
                    "group": "inline@-1"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.stash",
                    "group": "1_modification@100"
                },
                {
                    "submenu": "gitlens/scm/resourceGroup/changes",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmGroup.compare",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.openChangedFiles",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.closeUnchangedFiles",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.openOnlyChangedFiles",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.openClose",
                    "group": "3_gitlens@3"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
                    "group": "7_cutcopypaste@97"
                },
                {
                    "command": "gitlens.shareAsCloudPatch",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
                    "group": "7_cutcopypaste@98"
                }
            ],
            "scm/resourceFolder/context": [
                {
                    "submenu": "gitlens/scm/resourceFolder/changes",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmGroup.patch",
                    "group": "7_cutcopypaste@97"
                }
            ],
            "scm/resourceState/context": [
                {
                    "command": "gitlens.stashSaveFiles",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItemInline.stash",
                    "group": "inline@1"
                },
                {
                    "submenu": "gitlens/scm/resourceState/changes",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.compare",
                    "group": "navigation"
                },
                {
                    "submenu": "gitlens/scm/resourceState/openOn",
                    "when": "gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.remote",
                    "group": "navigation"
                },
                {
                    "submenu": "gitlens/scm/resourceState/history",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.history",
                    "group": "1_a_gitlens@2"
                },
                {
                    "command": "gitlens.stashSaveFiles",
                    "when": "gitlens:enabled && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItem.stash",
                    "group": "1_modification@2"
                },
                {
                    "submenu": "gitlens/share",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.share",
                    "group": "7_a_gitlens_share@1"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "gitlens:enabled && scmProvider == git && scmResourceGroup =~ /^(workingTree|index)$/ && config.gitlens.menus.scmItem.patch",
                    "group": "7_cutcopypaste@97"
                },
                {
                    "command": "gitlens.copyRelativePathToClipboard",
                    "when": "gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/ && config.gitlens.menus.scmItem.clipboard",
                    "group": "7_cutcopypaste@98"
                }
            ],
            "timeline/item/context": [
                {
                    "command": "gitlens.openCommitOnRemote",
                    "when": "false && gitlens:enabled && gitlens:repos:withRemotes && timelineItem =~ /git:file:commit\\b/",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemoteCommitUrl"
                }
            ],
            "view/title": [
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.branches/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.title.createBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.branches\\b/",
                    "group": "navigation@11"
                },
                {
                    "command": "gitlens.views.branches.setLayoutToList",
                    "when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == tree",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.branches.setLayoutToTree",
                    "when": "view =~ /gitlens\\.views\\.branches/ && config.gitlens.views.branches.branches.layout == list",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.branches.refresh",
                    "when": "view =~ /^gitlens\\.views\\.branches/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.branches.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.branches.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.branches.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchComparisonOn",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchComparisonOff",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchPullRequestOn",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && !config.gitlens.views.branches.pullRequests.enabled && !config.gitlens.views.branches.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchPullRequestOff",
                    "when": "view =~ /^gitlens\\.views\\.branches/ && config.gitlens.views.branches.pullRequests.enabled && config.gitlens.views.branches.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.pushRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.pullRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
                    "group": "navigation@2"
                },
                {
                    "command": "gitlens.fetchRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
                    "group": "navigation@3"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:plus:enabled",
                    "group": "navigation@11"
                },
                {
                    "command": "gitlens.views.commitDetails.refresh",
                    "when": "view =~ /^gitlens\\.views\\.commitDetails/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.patchDetails.refresh",
                    "when": "view =~ /^gitlens\\.views\\.patchDetails/",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.views.patchDetails.close",
                    "when": "view =~ /^gitlens\\.views\\.patchDetails/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:filtered",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.commits.refresh",
                    "when": "view =~ /^gitlens\\.views\\.commits/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:filtered",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterAuthors",
                    "when": "view =~ /^gitlens\\.views\\.commits/",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.commits.setShowMergeCommitsOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && !gitlens:views:commits:hideMergeCommits",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setShowMergeCommitsOn",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:views:commits:hideMergeCommits",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == tree",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == auto",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.files.layout == list",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.commits.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchComparisonOn",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchComparisonOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchPullRequestOn",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && !config.gitlens.views.commits.pullRequests.enabled && !config.gitlens.views.commits.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchPullRequestOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && config.gitlens.views.commits.pullRequests.enabled && config.gitlens.views.commits.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && gitlens:plus:enabled",
                    "group": "8_gitlens_toggles@0"
                },
                {
                    "command": "gitlens.showRepositoriesView",
                    "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.commits/",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.addAuthors",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.contributors/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.contributors.refresh",
                    "when": "view =~ /^gitlens\\.views\\.contributors/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.contributors.setShowMergeCommitsOff",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && !gitlens:views:contributors:hideMergeCommits",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.contributors.setShowMergeCommitsOn",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && gitlens:views:contributors:hideMergeCommits",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.contributors.setShowAllBranchesOn",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.showAllBranches",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.contributors.setShowAllBranchesOff",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.showAllBranches",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == tree",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == auto",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.contributors.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.files.layout == list",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.contributors.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.contributors.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.contributors.setShowStatisticsOn",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && !config.gitlens.views.contributors.showStatistics",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.contributors.setShowStatisticsOff",
                    "when": "view =~ /^gitlens\\.views\\.contributors/ && config.gitlens.views.contributors.showStatistics",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.drafts.refresh",
                    "when": "view =~ /^gitlens\\.views\\.drafts/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.drafts.create",
                    "when": "view =~ /^gitlens\\.views\\.drafts/ && gitlens:plus",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.drafts.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.drafts/ && !config.gitlens.views.drafts.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.drafts.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.drafts/ && config.gitlens.views.drafts.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.drafts.info",
                    "when": "view =~ /^gitlens\\.views\\.drafts/",
                    "group": "8_info@1"
                },
                {
                    "command": "gitlens.views.fileHistory.setEditorFollowingOn",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && !gitlens:views:fileHistory:editorFollowing",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.fileHistory.setEditorFollowingOff",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:canPin && gitlens:views:fileHistory:editorFollowing",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.fileHistory.setCursorFollowingOn",
                    "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing",
                    "group": "navigation@11"
                },
                {
                    "command": "gitlens.views.fileHistory.setCursorFollowingOff",
                    "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/ && gitlens:views:fileHistory:cursorFollowing",
                    "group": "navigation@11"
                },
                {
                    "command": "gitlens.views.fileHistory.refresh",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.fileHistory.changeBase",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/",
                    "group": "1_gitlens@0"
                },
                {
                    "command": "gitlens.views.fileHistory.setRenameFollowingOn",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryFollowsRenames",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.fileHistory.setRenameFollowingOff",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryFollowsRenames",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowMergeCommitsOn",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowMergeCommits",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowMergeCommitsOff",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowMergeCommits",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAllBranchesOn",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && !config.gitlens.advanced.fileHistoryShowAllBranches",
                    "group": "3_gitlens@3"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAllBranchesOff",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !gitlens:views:fileHistory:cursorFollowing && config.gitlens.advanced.fileHistoryShowAllBranches",
                    "group": "3_gitlens@3"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && !config.gitlens.views.fileHistory.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.fileHistory.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/ && config.gitlens.views.fileHistory.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.graph.openInTab",
                    "when": "view =~ /^gitlens\\.views\\.graph\\b/",
                    "group": "navigation@-100"
                },
                {
                    "command": "gitlens.views.graph.refresh",
                    "when": "view =~ /^gitlens\\.views\\.graph\\b/",
                    "group": "navigation@-99"
                },
                {
                    "command": "gitlens.views.graphDetails.refresh",
                    "when": "view =~ /^gitlens\\.views\\.graphDetails/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.home.refresh",
                    "when": "view =~ /^gitlens\\.views\\.home/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.account.refresh",
                    "when": "view =~ /^gitlens\\.views\\.account/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.showLineHistoryView",
                    "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.fileHistory/",
                    "group": "8_gitlens_toggles@0"
                },
                {
                    "command": "gitlens.views.lineHistory.setEditorFollowingOn",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/ && !gitlens:views:lineHistory:editorFollowing",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.lineHistory.setEditorFollowingOff",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/ && gitlens:views:lineHistory:editorFollowing",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.lineHistory.refresh",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.lineHistory.changeBase",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/",
                    "group": "1_gitlens@0"
                },
                {
                    "command": "gitlens.views.lineHistory.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/ && !config.gitlens.views.lineHistory.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.lineHistory.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/ && config.gitlens.views.lineHistory.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.addRemote",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.remotes/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.pullRequest.refresh",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.views.pullRequest.close",
                    "when": "view =~ /gitlens\\.views\\.pullRequest/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == tree",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == auto",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.pullRequest.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.files.layout == list",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.pullRequest.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/ && !config.gitlens.views.pullRequest.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.pullRequest.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.pullRequest/ && config.gitlens.views.pullRequest.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setLayoutToList",
                    "when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == tree",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.remotes.setLayoutToTree",
                    "when": "view =~ /gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.branches.layout == list",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.remotes.refresh",
                    "when": "view =~ /^gitlens\\.views\\.remotes/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.remotes.setShowBranchPullRequestOn",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && !config.gitlens.views.remotes.pullRequests.enabled && !config.gitlens.views.remotes.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.views.remotes.setShowBranchPullRequestOff",
                    "when": "view =~ /^gitlens\\.views\\.remotes/ && config.gitlens.views.remotes.pullRequests.enabled && config.gitlens.views.remotes.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.pushRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.pullRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
                    "group": "navigation@2"
                },
                {
                    "command": "gitlens.fetchRepositories",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.repositories/",
                    "group": "navigation@3"
                },
                {
                    "command": "gitlens.views.repositories.refresh",
                    "when": "view =~ /^gitlens\\.views\\.repositories/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.repositories.setAutoRefreshToOn",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && !gitlens:views:repositories:autoRefresh",
                    "group": "2_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setAutoRefreshToOff",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.autoRefresh && gitlens:views:repositories:autoRefresh",
                    "group": "2_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "submenu": "gitlens/view/repositories/sections",
                    "when": "view =~ /^gitlens\\.views\\.repositories/",
                    "group": "4_gitlens@1"
                },
                {
                    "command": "gitlens.views.repositories.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && !config.gitlens.views.repositories.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.repositories/ && config.gitlens.views.repositories.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "submenu": "gitlens/view/searchAndCompare/new",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.searchAndCompare.clear",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "navigation@98"
                },
                {
                    "command": "gitlens.views.searchAndCompare.refresh",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && !config.gitlens.views.searchAndCompare.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/ && config.gitlens.views.searchAndCompare.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.stashes/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.stashes/",
                    "group": "navigation@11"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.stashes.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.stashes/ && config.gitlens.views.stashes.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.stashes.refresh",
                    "when": "view =~ /^gitlens\\.views\\.stashes/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.title.createTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view =~ /gitlens\\.views\\.tags\\b/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.tags.setLayoutToList",
                    "when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == tree",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.tags.setLayoutToTree",
                    "when": "view =~ /gitlens\\.views\\.tags/ && config.gitlens.views.tags.branches.layout == list",
                    "group": "navigation@50"
                },
                {
                    "command": "gitlens.views.tags.refresh",
                    "when": "view =~ /^gitlens\\.views\\.tags/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == tree",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == auto",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.tags.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.files.layout == list",
                    "group": "3_gitlens@0"
                },
                {
                    "command": "gitlens.views.tags.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.tags/ && !config.gitlens.views.tags.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.tags.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.tags/ && config.gitlens.views.tags.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.timeline.refresh",
                    "when": "view =~ /^gitlens\\.views\\.timeline/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.workspaces.info",
                    "when": "view =~ /^gitlens\\.views\\.workspaces/",
                    "group": "8_info@1"
                },
                {
                    "command": "gitlens.views.workspaces.create",
                    "when": "view =~ /^gitlens\\.views\\.workspaces/ && gitlens:plus",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.workspaces.refresh",
                    "when": "view =~ /^gitlens\\.views\\.workspaces/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.title.createWorktree",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.worktrees.refresh",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/",
                    "group": "navigation@99"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToAuto",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == tree",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToList",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == auto",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.worktrees.setFilesLayoutToTree",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.files.layout == list",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.worktrees.setShowAvatarsOn",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.worktrees.setShowAvatarsOff",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.avatars",
                    "group": "5_gitlens@0"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchComparisonOn",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchComparisonOff",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.showBranchComparison",
                    "group": "5_gitlens@1"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchPullRequestOn",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && !config.gitlens.views.worktrees.pullRequests.enabled && !config.gitlens.views.worktrees.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.views.worktrees.setShowBranchPullRequestOff",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/ && config.gitlens.views.worktrees.pullRequests.enabled && config.gitlens.views.worktrees.pullRequests.showForBranches",
                    "group": "5_gitlens@2"
                },
                {
                    "command": "gitlens.views.setShowRelativeDateMarkersOn",
                    "when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags|worktrees)/ && !config.gitlens.views.showRelativeDateMarkers",
                    "group": "5_gitlens@3"
                },
                {
                    "command": "gitlens.views.setShowRelativeDateMarkersOff",
                    "when": "view =~ /^gitlens\\.views\\.(branches|commits|fileHistory|lineHistory|remotes|repositories|tags|worktrees)/ && config.gitlens.views.showRelativeDateMarkers",
                    "group": "5_gitlens@3"
                },
                {
                    "submenu": "gitlens/graph/configuration",
                    "when": "view =~ /^gitlens\\.views\\.graph\\b/",
                    "group": "navigation@-98"
                },
                {
                    "command": "gitlens.showSettingsPage!branches-view",
                    "when": "view =~ /^gitlens\\.views\\.branches/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!commits-view",
                    "when": "view =~ /^gitlens\\.views\\.commits/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!contributors-view",
                    "when": "view =~ /^gitlens\\.views\\.contributors/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!file-history-view",
                    "when": "view =~ /^gitlens\\.views\\.fileHistory/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!line-history-view",
                    "when": "view =~ /^gitlens\\.views\\.lineHistory/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!remotes-view",
                    "when": "view =~ /^gitlens\\.views\\.remotes/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!repositories-view",
                    "when": "view =~ /^gitlens\\.views\\.repositories/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!search-compare-view",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!stashes-view",
                    "when": "view =~ /^gitlens\\.views\\.stashes/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!tags-view",
                    "when": "view =~ /^gitlens\\.views\\.tags/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!worktrees-view",
                    "when": "view =~ /^gitlens\\.views\\.worktrees/",
                    "group": "9_gitlens@1"
                }
            ],
            "view/item/context": [
                {
                    "command": "gitlens.plus.login",
                    "when": "viewItem == gitlens:message:signin",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.draft.openOnWeb",
                    "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.draft.open",
                    "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.draft.openOnWeb",
                    "when": "viewItem =~  /gitlens:draft\\b/ && gitlens:plus",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.drafts.delete",
                    "when": "viewItem =~  /gitlens:draft\\b(?=.*?\\b\\+mine\\b)/ && gitlens:plus",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.convert",
                    "when": "viewItem =~  /gitlens:repositories\\b(?=.*?\\b\\+workspaces\\b)/ && gitlens:plus",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.workspaces.convert",
                    "when": "viewItem =~  /gitlens:repositories\\b(?=.*?\\b\\+workspaces\\b)/ && gitlens:plus",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.addRepos",
                    "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.workspaces.locateAllRepos",
                    "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)(?!.*?\\b\\+empty\\b)/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.workspaces.createLocal",
                    "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?!.*?\\b\\+hasPath\\b)(?!.*?\\b\\+empty\\b)/",
                    "group": "inline@3"
                },
                {
                    "command": "gitlens.views.workspaces.openLocalNewWindow",
                    "when": "viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
                    "group": "inline@3",
                    "alt": "gitlens.views.workspaces.openLocal"
                },
                {
                    "command": "gitlens.views.workspaces.addRepos",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.locateAllRepos",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)(?!.*?\\b\\+empty\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.workspaces.addReposFromLinked",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repositories\\b(?=.*?\\b\\+linked\\b)(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.workspaces.createLocal",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+empty\\b)/",
                    "group": "2_gitlens_quickopen@3"
                },
                {
                    "command": "gitlens.views.workspaces.openLocal",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
                    "group": "2_gitlens_quickopen@4"
                },
                {
                    "command": "gitlens.views.workspaces.openLocalNewWindow",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?!.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)/",
                    "group": "2_gitlens_quickopen@5"
                },
                {
                    "command": "gitlens.views.workspaces.changeAutoAddSetting",
                    "when": "!listMultiSelection && viewItem =~ /(gitlens:workspace\\b(?=.*?\\b\\+(cloud|local)\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+hasPath\\b)|gitlens:repositories\\b(?=.*?\\b\\+linked\\b))/",
                    "group": "2_gitlens_quickopen@6"
                },
                {
                    "command": "gitlens.views.workspaces.delete",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b(?=.*?\\b\\+cloud\\b)/",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@10"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@11"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToList",
                    "when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == tree",
                    "group": "inline@50"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToTree",
                    "when": "viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.layout == list",
                    "group": "inline@50"
                },
                {
                    "command": "gitlens.openBranchesOnRemote",
                    "when": "viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
                    "group": "inline@98",
                    "alt": "gitlens.copyRemoteBranchesUrl"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branches\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.openBranchesOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:branches\\b(?=.*?\\b\\+remotes\\b)/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOn",
                    "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && !config.gitlens.views.repositories.branches.showBranchComparison",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
                    "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.repositories/ && viewItem =~ /gitlens:branches\\b/ && config.gitlens.views.repositories.branches.showBranchComparison",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.switchToBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@7"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@7"
                },
                {
                    "command": "gitlens.views.publishBranch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@8"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@8"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@8"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@8"
                },
                {
                    "command": "gitlens.views.createPullRequest",
                    "when": "gitlens:repos:withRemotes && gitlens:action:createPullRequest && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@9"
                },
                {
                    "command": "gitlens.views.undoCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
                    "group": "inline@78"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
                    "group": "inline@79",
                    "alt": "gitlens.views.pushWithForce"
                },
                {
                    "command": "gitlens.views.pushToCommit",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
                    "group": "inline@80"
                },
                {
                    "command": "gitlens.views.compareWithHead",
                    "when": "viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
                    "group": "inline@97",
                    "alt": "gitlens.views.compareWithWorking"
                },
                {
                    "command": "gitlens.views.compareWithWorking",
                    "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote",
                    "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemoteBranchUrl"
                },
                {
                    "command": "gitlens.views.switchToAnotherBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.switchToBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.publishBranch",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.mergeBranchInto",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.views.rebaseOntoBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.views.rebaseOntoUpstream",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.views.renameBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@6"
                },
                {
                    "command": "gitlens.views.deleteBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.views.deleteBranch.multi",
                    "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions_@7"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions_@8"
                },
                {
                    "command": "gitlens.views.createWorktree",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions_@9"
                },
                {
                    "command": "gitlens.views.createPullRequest",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && gitlens:action:createPullRequest && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions_@10"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithMergeBase",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "3_gitlens_explore@11"
                },
                {
                    "command": "gitlens.views.openDirectoryDiffWithWorking",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|tag)\\b/",
                    "group": "3_gitlens_explore@12"
                },
                {
                    "command": "gitlens.views.compareWithUpstream",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+tracking\\b)/",
                    "group": "4_gitlens_compare@1"
                },
                {
                    "command": "gitlens.views.compareWithHead",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
                    "group": "4_gitlens_compare@2"
                },
                {
                    "command": "gitlens.views.compareWithWorking",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "4_gitlens_compare@3"
                },
                {
                    "command": "gitlens.views.compareWithMergeBase",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "4_gitlens_compare@4"
                },
                {
                    "command": "gitlens.views.compareAncestryWithWorking",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "4_gitlens_compare@5"
                },
                {
                    "command": "gitlens.views.compareWithSelected",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/ && gitlens:views:canCompare",
                    "group": "4_gitlens_compare@98"
                },
                {
                    "command": "gitlens.views.selectForCompare",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "4_gitlens_compare@99"
                },
                {
                    "command": "gitlens.views.compareFileWithSelected",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/ && gitlens:views:canCompare:file",
                    "group": "4_gitlens_compare@98"
                },
                {
                    "command": "gitlens.views.selectFileForCompare",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
                    "group": "4_gitlens_compare@99"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.star.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.unstar.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.addAuthors",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributors\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.addAuthors",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributors\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.inviteToLiveShare",
                    "when": "gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.addAuthor",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.copy",
                    "when": "viewItem =~ /gitlens:contributor\\b/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.inviteToLiveShare",
                    "when": "!listMultiSelection && gitlens:vsls && gitlens:vsls != guest && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.addAuthor",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.addAuthor.multi",
                    "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.copyAsMarkdown",
                    "when": "viewItem =~ /gitlens:contributor\\b/",
                    "group": "7_gitlens_cutcopypaste@2"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "viewItem =~ /gitlens:commit\\b/",
                    "group": "inline@98",
                    "alt": "gitlens.copyMessageToClipboard"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote",
                    "when": "viewItem =~ /gitlens:commit\\b/ && gitlens:repos:withRemotes",
                    "group": "inline@99",
                    "alt": "gitlens.views.copyRemoteCommitUrl"
                },
                {
                    "command": "gitlens.views.cherryPick",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+(current|rebase)\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.cherryPick.multi",
                    "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+(current|rebase)\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.undoCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.pushToCommit",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.revert",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.resetToCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.views.resetToTip",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:branch\\b(?!.*?\\b\\+rebase\\b)/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.views.resetCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.views.rebaseOntoCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
                    "group": "1_gitlens_actions@6"
                },
                {
                    "command": "gitlens.views.switchToCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b(?!.*?\\b\\+rebase\\b)/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions_1@1"
                },
                {
                    "command": "gitlens.createPatch",
                    "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "1_gitlens_actions_1@2"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "7_gitlens_cutcopypaste@97"
                },
                {
                    "command": "gitlens.createCloudPatch",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "1_gitlens_actions_1@3"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions_1@4"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffs",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:results(?!:)\\b(?!.*?\\b\\+filtered\\b)|commit|stash|results:files|status-branch:files|status:upstream:(ahead|behind))\\b/ && config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
                    "group": "inline@90",
                    "alt": "gitlens.views.openChangedFileDiffsWithWorking"
                },
                {
                    "submenu": "gitlens/commit/changes",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:results(?!:)\\b(?!.*?\\b\\+filtered\\b)|commit|stash|results:files|status-branch:files|status:upstream:(ahead|behind))\\b/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.showInDetailsView",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "3_gitlens_explore@0"
                },
                {
                    "command": "gitlens.showInCommitGraph",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|commit|stash|tag)\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "command": "gitlens.revealCommitInView",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.(?!commits|branches\\b)/ && viewItem =~ /gitlens:commit\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:commit\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote.multi",
                    "when": "listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:commit\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "submenu": "gitlens/share",
                    "when": "viewItem =~ /gitlens:(branch|commit|compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))|remote|repo-folder|repository|stash|status:upstream|tag|workspace|file\\b(?=.*?\\b\\+committed\\b))\\b/",
                    "group": "7_gitlens_a_share@1"
                },
                {
                    "command": "gitlens.copyRelativePathToClipboard",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
                    "group": "7_gitlens_cutcopypaste@2"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "7_gitlens_cutcopypaste@3"
                },
                {
                    "command": "gitlens.copyMessageToClipboard",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "7_gitlens_cutcopypaste@4"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "7_gitlens_cutcopypaste@3"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && view =~ /gitlens\\.views\\.(file|line)History/",
                    "group": "7_gitlens_cutcopypaste@97"
                },
                {
                    "command": "gitlens.copyMessageToClipboard",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && view =~ /gitlens\\.views\\.(file|line)History/",
                    "group": "7_gitlens_cutcopypaste@98"
                },
                {
                    "submenu": "gitlens/commit/copy",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|commit|remote|repo-folder|repository|stash|tag|file\\b(?=.*?\\b\\+committed\\b))\\b/",
                    "group": "7_gitlens_cutcopypaste@10"
                },
                {
                    "command": "gitlens.views.openFile",
                    "when": "viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
                    "group": "inline@-1"
                },
                {
                    "command": "gitlens.views.pushToCommit",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
                    "group": "inline@-1"
                },
                {
                    "command": "gitlens.views.openFileRevision",
                    "when": "viewItem =~ /gitlens:file(:results|\\b(?=.*?\\b\\+(committed|stashed)\\b))/",
                    "group": "inline@1",
                    "alt": "gitlens.views.openFile"
                },
                {
                    "command": "gitlens.views.openChanges",
                    "when": "view =~ /gitlens\\.views\\.(?!fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
                    "group": "inline@96"
                },
                {
                    "command": "gitlens.views.openFile",
                    "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+conflicted\\b)/",
                    "group": "inline@96"
                },
                {
                    "command": "gitlens.views.openChangesWithWorking",
                    "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+(conflicted|unstaged)\\b)/",
                    "group": "inline@96"
                },
                {
                    "command": "gitlens.views.stageFile",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.unstageFile",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory)\\b/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "inline@98",
                    "alt": "gitlens.copyMessageToClipboard"
                },
                {
                    "command": "gitlens.openFileOnRemote",
                    "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "command": "gitlens.views.stageFile",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+unstaged\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.unstageFile",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+staged\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.stashSaveFiles",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+(un)?staged\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.openChanges",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "submenu": "gitlens/commit/file/changes",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.showInDetailsView",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "2_gitlens_quickopen@3"
                },
                {
                    "command": "gitlens.views.openFile",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(file|history:(file|line)|status:file)\\b/",
                    "group": "2_gitlens_quickopen_file@3"
                },
                {
                    "command": "gitlens.views.openFileRevision",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
                    "group": "2_gitlens_quickopen_file@4"
                },
                {
                    "command": "gitlens.openFileOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
                    "group": "2_gitlens_quickopen_file@5",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "submenu": "gitlens/commit/file/commit",
                    "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "submenu": "gitlens/commit/file/history",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "command": "gitlens.views.compareWithHead",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "4_gitlens_compare@2"
                },
                {
                    "command": "gitlens.views.compareWithWorking",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "4_gitlens_compare@3"
                },
                {
                    "command": "gitlens.views.applyChanges",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.restore",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+stashed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.applyChanges",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.restore",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results\\b)/",
                    "group": "8_gitlens_actions@2"
                },
                {
                    "command": "gitlens.openFileOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(history:(file|line)|status:file)\\b/ && gitlens:repos:withRemotes",
                    "group": "5_gitlens_open@2",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "command": "gitlens.connectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:autolinked:items\\b/ && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.showSettingsPage!autolinks",
                    "when": "viewItem =~ /gitlens:autolinked:items\\b/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.connectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:autolinked:items\\b/ && gitlens:repos:withHostingIntegrations && !gitlens:repos:withHostingIntegrationsConnected",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.showSettingsPage!autolinks",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:items\\b/",
                    "group": "8_gitlens_actions@99"
                },
                {
                    "command": "gitlens.views.openUrl",
                    "when": "viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "inline@99",
                    "alt": "gitlens.views.copyUrl"
                },
                {
                    "command": "gitlens.views.openUrl",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "1_gitlens_actions@99"
                },
                {
                    "command": "gitlens.views.openUrl.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "1_gitlens_actions@99"
                },
                {
                    "command": "gitlens.views.copyUrl",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "command": "gitlens.views.copyUrl.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "command": "gitlens.views.copyAsMarkdown",
                    "when": "viewItem =~ /gitlens:autolinked:item\\b/",
                    "group": "7_gitlens_cutcopypaste@2"
                },
                {
                    "command": "gitlens.views.openPullRequest",
                    "when": "gitlens:action:openPullRequest > 1 && viewItem =~ /gitlens:pullrequest\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.openPullRequestChanges",
                    "when": "viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.openPullRequestComparison",
                    "when": "viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
                    "group": "inline@3"
                },
                {
                    "command": "gitlens.openPullRequestOnRemote",
                    "when": "viewItem =~ /gitlens:pullrequest\\b/",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemotePullRequestUrl"
                },
                {
                    "command": "gitlens.views.openPullRequestChanges",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.openPullRequest",
                    "when": "!listMultiSelection && gitlens:action:openPullRequest > 1 && viewItem =~ /gitlens:pullrequest\\b/",
                    "group": "1_gitlens_actions@98"
                },
                {
                    "command": "gitlens.openPullRequestOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b/",
                    "group": "1_gitlens_actions@99"
                },
                {
                    "command": "gitlens.showInCommitGraph",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "command": "gitlens.views.openPullRequestComparison",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
                    "group": "4_gitlens_compare@1"
                },
                {
                    "command": "gitlens.copyRemotePullRequestUrl",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pullrequest\\b/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "command": "gitlens.views.addRemote",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remotes\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToList",
                    "when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == tree",
                    "group": "inline@50"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesLayoutToTree",
                    "when": "viewItem =~ /gitlens:remotes\\b/ && config.gitlens.views.repositories.branches.layout == list",
                    "group": "inline@50"
                },
                {
                    "command": "gitlens.views.addRemote",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remotes\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.connectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.disconnectRemoteProvider",
                    "when": "config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.openRepoOnRemote",
                    "when": "viewItem =~ /gitlens:remote\\b/",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemoteRepositoryUrl"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pruneRemote",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.openRepoOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b/",
                    "group": "5_gitlens_open@1"
                },
                {
                    "command": "gitlens.openBranchesOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b/",
                    "group": "5_gitlens_open@2"
                },
                {
                    "command": "gitlens.views.removeRemote",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:remote\\b/",
                    "group": "6_gitlens_terminal@1"
                },
                {
                    "command": "gitlens.views.setAsDefault",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b(?!.*?\\b\\+default\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.unsetAsDefault",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+default\\b)/",
                    "group": "8_gitlens_actions@1"
                },
                {
                    "command": "gitlens.connectRemoteProvider",
                    "when": "!listMultiSelection && config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+disconnected\\b)/",
                    "group": "8_gitlens_actions@2"
                },
                {
                    "command": "gitlens.disconnectRemoteProvider",
                    "when": "!listMultiSelection && config.gitlens.integrations.enabled && viewItem =~ /gitlens:remote\\b(?=.*?\\b\\+connected\\b)/",
                    "group": "8_gitlens_actions@2"
                },
                {
                    "submenu": "gitlens/commit/browse",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:(branch|commit|file\\b(?=.*?\\b\\+committed\\b)|stash|tag)\\b/",
                    "group": "3_gitlens_explore@10"
                },
                {
                    "command": "gitlens.views.workspaces.repo.locate",
                    "when": "viewItem =~ /gitlens:workspaceMissingRepository\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.workspaces.repo.locate",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspaceMissingRepository\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.repo.remove",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspaceMissingRepository\\b/",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.repo.openInNewWindow",
                    "when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
                    "group": "inline@100",
                    "alt": "gitlens.views.workspaces.repo.open"
                },
                {
                    "command": "gitlens.views.workspaces.repo.open",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
                    "group": "0_1gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.repo.openInNewWindow",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
                    "group": "0_1gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.workspaces.repo.addToWindow",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
                    "group": "0_1gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.revealRepositoryInExplorer",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)/",
                    "group": "0_2gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.workspaces.repo.locate",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)(?!.*?\\b\\+local\\b)/",
                    "group": "0_2gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.workspaces.repo.remove",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+workspace\\b)(?!.*?\\b\\+local\\b)/",
                    "group": "0_3gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@96",
                    "alt": "gitlens.views.pushWithForce"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pushWithForce",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.openInTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openInIntegratedTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.views.revealRepositoryInExplorer",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
                    "group": "2_gitlens_quickopen@3"
                },
                {
                    "command": "gitlens.openRepoOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b/ && gitlens:repos:withRemotes",
                    "group": "2_gitlens_quickopen@4"
                },
                {
                    "command": "gitlens.showCommitSearch",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b/",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
                    "group": "1_gitlens_actions_1@1"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+workspace\\b)/",
                    "group": "1_gitlens_actions_1@2"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.star.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+(starred|workspace)\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.unstar.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:repository\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.closeRepository",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repository\\b(?!.*?\\b\\+closed\\b)/",
                    "group": "8_gitlens_actions_@2"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
                    "group": "inline@96",
                    "alt": "gitlens.views.pushWithForce"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+behind\\b)/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "viewItem =~ /gitlens:repo-folder\\b/ && gitlens:plus:enabled",
                    "group": "inline@100"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterOff",
                    "when": "view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+filtered\\b)/ && gitlens:views:commits:filtered",
                    "group": "inline@101"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pushWithForce",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.openInTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openInIntegratedTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.openRepoOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/ && gitlens:repos:withRemotes",
                    "group": "2_gitlens_quickopen@3"
                },
                {
                    "command": "gitlens.showGraph",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/ && gitlens:plus:enabled",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "command": "gitlens.showCommitSearch",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions_1@1"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "1_gitlens_actions_1@2"
                },
                {
                    "command": "gitlens.views.star",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.star.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?!.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.unstar",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.unstar.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+starred\\b)/",
                    "group": "8_gitlens_actions_@1"
                },
                {
                    "command": "gitlens.views.closeRepository",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "8_gitlens_actions_@2"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterOff",
                    "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b(?=.*?\\b\\+filtered\\b)/ && gitlens:views:commits:filtered",
                    "group": "8_gitlens_filter_@1"
                },
                {
                    "command": "gitlens.views.commits.setCommitsFilterAuthors",
                    "when": "!listMultiSelection && view =~ /^gitlens\\.views\\.commits/ && viewItem =~ /gitlens:repo-folder\\b/",
                    "group": "8_gitlens_filter_@2"
                },
                {
                    "command": "gitlens.views.publishRepository",
                    "when": "!gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(missing|none)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.addRemote",
                    "when": "!gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:none/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.publishBranch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(missing|none)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:ahead/",
                    "group": "inline@99",
                    "alt": "gitlens.views.pushWithForce"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:behind/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status(\\-branch)?:upstream:(?!(missing|none))/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.createPullRequest",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:same/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream:same/",
                    "group": "inline@97",
                    "alt": "gitlens.copyRemoteBranchUrl"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:ahead",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pushWithForce",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:ahead",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.pull",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:status:upstream:behind",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.fetch",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream/",
                    "group": "1_gitlens_secondary_actions@1"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream/",
                    "group": "1_gitlens_secondary_actions@2"
                },
                {
                    "command": "gitlens.views.createPullRequest",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:action:createPullRequest && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
                    "group": "1_gitlens_secondary_actions@3"
                },
                {
                    "command": "gitlens.views.openBranchOnRemote",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
                    "group": "2_gitlens_quickopen_remote@1"
                },
                {
                    "command": "gitlens.views.openInTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream\\b/",
                    "group": "2_gitlens_quickopen_terminal@1"
                },
                {
                    "command": "gitlens.views.openInIntegratedTerminal",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:status:upstream\\b/",
                    "group": "2_gitlens_quickopen_terminal@2"
                },
                {
                    "command": "gitlens.copyRemoteBranchUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:status:upstream:(?!(missing|none))/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "command": "gitlens.views.dismissNode",
                    "when": "viewItem =~ /gitlens:(compare:picker|(compare|search):results(?!:)\\b)\\b(?!:(commits|files))/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.clearComparison",
                    "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.editNode",
                    "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
                    "group": "inline@96"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToWorking",
                    "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToBranch",
                    "when": "viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToWorking",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+branch\\b)/",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.setBranchComparisonToBranch",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+root\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+working\\b)/",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.editNode",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.views.clearReviewed",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.views.clearComparison",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:branch\\b(?=.*?\\b\\+comparing\\b)/",
                    "group": "1_gitlens@4"
                },
                {
                    "command": "gitlens.views.branches.setShowBranchComparisonOff",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.branches\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.commits.setShowBranchComparisonOff",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.commits\\b/ && viewItem =~ /gitlens:compare:branch\\b/",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.repositories.setBranchesShowBranchComparisonOff",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:compare:branch(?!.*?\\b\\+root\\b)\\b/",
                    "group": "8_gitlens_toggles@1"
                },
                {
                    "command": "gitlens.views.repositories.setShowSectionOff",
                    "when": "!listMultiSelection && view =~ /gitlens\\.views\\.repositories\\b/ && viewItem =~ /gitlens:(compare:branch(?=.*?\\b\\+root\\b)|branches|branch(?=.*?\\b\\+commits\\b)|reflog|remotes|stashes|status:upstream|tags)\\b/",
                    "group": "8_gitlens_toggles@99"
                },
                {
                    "command": "gitlens.views.searchAndCompare.swapComparison",
                    "when": "viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "inline@96"
                },
                {
                    "submenu": "gitlens/comparison/results/files/filter/inline",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?!.*?\\b\\+filtered\\b)/",
                    "group": "inline@99"
                },
                {
                    "submenu": "gitlens/comparison/results/files/filtered/inline",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?=.*?\\b\\+filtered\\b)/",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.clearReviewed",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b/",
                    "group": "1_gitlens@1"
                },
                {
                    "submenu": "gitlens/comparison/results/files/filter",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?!.*?\\b\\+filtered\\b)/",
                    "group": "1_gitlens@2"
                },
                {
                    "submenu": "gitlens/comparison/results/files/filtered",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filterable\\b)(?=.*?\\b\\+filtered\\b)/",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.views.refreshNode",
                    "when": "viewItem =~ /gitlens:compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))\\b/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.refreshNode",
                    "when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
                    "group": "inline@97"
                },
                {
                    "command": "gitlens.views.setResultsCommitsFilterOff",
                    "when": "viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "inline@96"
                },
                {
                    "command": "gitlens.views.searchAndCompare.swapComparison",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b(?!.*?\\b\\+working\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.clearReviewed",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.createPatch",
                    "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "1_gitlens_secondary_actions@1"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "7_gitlens_cutcopypaste@97"
                },
                {
                    "command": "gitlens.createCloudPatch",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "1_gitlens_secondary_actions@2"
                },
                {
                    "command": "gitlens.openComparisonOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "2_gitlens_quickopen@1 && gitlens:repos:withRemotes"
                },
                {
                    "command": "gitlens.views.openDirectoryDiff",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results(?!:)\\b/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.views.setResultsCommitsFilterOff",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "7_gitlens_filter@1"
                },
                {
                    "command": "gitlens.views.setResultsCommitsFilterAuthors",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(results(?!:)|branch)\\b/",
                    "group": "7_gitlens_filter@2"
                },
                {
                    "command": "gitlens.views.editNode",
                    "when": "viewItem =~ /gitlens:search:results(?!:)\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.editNode",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:search:results(?!:)\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.openComparisonOnRemote",
                    "when": "viewItem =~ /gitlens:compare:results:commits\\b/ && gitlens:repos:withRemotes",
                    "group": "inline@99",
                    "alt": "gitlens.copyRemoteComparisonUrl"
                },
                {
                    "command": "gitlens.openComparisonOnRemote",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:results:commits\\b/ && gitlens:repos:withRemotes",
                    "group": "3_gitlens_explore@0"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /^gitlens:(stashes|status:files)$/",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stashes",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.stashSave",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /^gitlens:(stashes|status:files)$/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.stashApply",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stashes",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.stash.apply",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.stash.rename",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "inline@98"
                },
                {
                    "command": "gitlens.views.stash.delete",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "inline@99"
                },
                {
                    "command": "gitlens.views.stash.apply",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.stash.rename",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.stash.delete",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.stash.delete.multi",
                    "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:stash",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tags\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tags\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.switchToTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
                    "group": "inline@10"
                },
                {
                    "command": "gitlens.views.switchToTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.deleteTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:tag",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.deleteTag.multi",
                    "when": "listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem == gitlens:tag",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.createWorktree",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:worktrees\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.createWorktree",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:worktrees\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.openWorktree",
                    "when": "viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
                    "group": "inline@1",
                    "alt": "gitlens.views.openWorktreeInNewWindow"
                },
                {
                    "command": "gitlens.views.openWorktree",
                    "when": "viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
                    "group": "inline@1",
                    "alt": "gitlens.views.openWorktreeInNewWindow"
                },
                {
                    "command": "gitlens.views.openWorktree",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openWorktree",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.views.openWorktreeInNewWindow",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+active\\b)/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.views.openWorktreeInNewWindow",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b(?=.*?\\b\\+active\\b)/ && workspaceFolderCount != 1",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.views.openWorktreeInNewWindow.multi",
                    "when": "listMultiSelection && viewItem =~ /gitlens:worktree\\b/",
                    "group": "2_gitlens_quickopen@2"
                },
                {
                    "command": "gitlens.views.revealWorktreeInExplorer",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:worktree\\b/",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.views.deleteWorktree",
                    "when": "!listMultiSelection && !gitlens:readonly && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+(active|main)\\b)/",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.deleteWorktree.multi",
                    "when": "listMultiSelection && !gitlens:readonly && viewItem =~ /gitlens:worktree\\b(?!.*?\\b\\+(active|main)\\b)/",
                    "group": "6_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.stageDirectory",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.unstageDirectory",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
                    "group": "inline@2"
                },
                {
                    "command": "gitlens.views.stageDirectory",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.unstageDirectory",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:folder\\b(?=.*?\\b\\+working\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.copy",
                    "when": "viewItem =~ /gitlens:(?=(autolinked:item\\b|branch|commit|contributor|file(?!.*?\\b\\+(staged|unstaged))\\b|folder|history:line|pullrequest|remote|repository|repo-folder|search:results|stash|tag|workspace|worktree)\\b)/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "command": "gitlens.views.dismissNode",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(compare:picker:ref|(compare|search):results(?!:)\\b)\\b(?!:(commits|files))/",
                    "group": "1_gitlens_actions@98"
                },
                {
                    "command": "gitlens.views.collapseNode",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|compare|folder|results|search|status|tag)\\b/",
                    "group": "9_gitlens@1"
                },
                {
                    "command": "gitlens.views.expandNode",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch|compare|folder|results|search|status|tag)\\b/",
                    "group": "9_gitlens@2"
                },
                {
                    "command": "gitlens.views.refreshNode",
                    "when": "viewItem =~ /gitlens:(?!(file|message|date-marker)\\b)/",
                    "group": "9_gitlens_z@99"
                },
                {
                    "command": "gitlens.views.loadAllChildren",
                    "when": "viewItem =~ /gitlens:pager\\b/",
                    "group": "inline@1"
                },
                {
                    "command": "gitlens.views.loadAllChildren",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:pager\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.setShowRelativeDateMarkersOff",
                    "when": "!listMultiSelection && viewItem == gitlens:date-marker && config.gitlens.views.showRelativeDateMarkers",
                    "group": "1_gitlens@0"
                },
                {
                    "command": "gitlens.ghpr.views.openOrCreateWorktree",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && view == pr:github && viewItem =~ /pullrequest(:local)?:nonactive|description/ && config.gitlens.menus.ghpr.worktree",
                    "group": "2_gitlens@1"
                }
            ],
            "webview/context": [
                {
                    "command": "gitlens.graph.switchToAnotherBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.switchToBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.publishBranch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+remote\\b)(?!.*?\\b\\+tracking\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+ahead\\b)(?!.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.pull",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+behind\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.fetch",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)(?!.*?\\b\\+closed\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.mergeBranchInto",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.graph.rebaseOntoBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.graph.rebaseOntoUpstream",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+current\\b)(?=.*?\\b\\+tracking\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.graph.renameBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
                    "group": "1_gitlens_actions@6"
                },
                {
                    "command": "gitlens.graph.deleteBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.graph.createBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
                    "group": "1_gitlens_actions_@7"
                },
                {
                    "command": "gitlens.graph.createTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
                    "group": "1_gitlens_actions_@8"
                },
                {
                    "command": "gitlens.graph.createWorktree",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
                    "group": "1_gitlens_actions_@9"
                },
                {
                    "command": "gitlens.graph.createPullRequest",
                    "when": "gitlens:repos:withRemotes && gitlens:action:createPullRequest && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "1_gitlens_actions_@10"
                },
                {
                    "command": "gitlens.graph.hideLocalBranch",
                    "when": "webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+(current|remote)\\b)/",
                    "group": "8_gitlens_actions@11"
                },
                {
                    "command": "gitlens.graph.hideRemote",
                    "when": "webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+remote\\b)(?!.*?\\b\\+current\\b)/",
                    "group": "8_gitlens_actions@10"
                },
                {
                    "command": "gitlens.graph.hideRemoteBranch",
                    "when": "webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+remote\\b)(?!.*?\\b\\+current\\b)/",
                    "group": "8_gitlens_actions@11"
                },
                {
                    "command": "gitlens.graph.hideRefGroup",
                    "when": "webviewItemGroup =~ /gitlens:refGroup\\b(?!.*?\\b\\+current\\b)/",
                    "group": "8_gitlens_actions@12"
                },
                {
                    "command": "gitlens.graph.openBranchOnRemote",
                    "when": "gitlens:repos:withRemotes && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.graph.cherryPick",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.undoCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?=.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.revert",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.resetToCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.graph.resetToTip",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.graph.resetCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.graph.rebaseOntoCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions@6"
                },
                {
                    "command": "gitlens.graph.switchToCommit",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.graph.createBranch",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions_1@1"
                },
                {
                    "command": "gitlens.createPatch",
                    "when": "!listMultiSelection && false && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "1_gitlens_actions_1@2"
                },
                {
                    "command": "gitlens.copyPatchToClipboard",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "7_cutcopypaste@97"
                },
                {
                    "command": "gitlens.createCloudPatch",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && webviewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "1_gitlens_actions_1@3"
                },
                {
                    "command": "gitlens.graph.createTag",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens_actions_1@4"
                },
                {
                    "submenu": "gitlens/graph/commit/changes",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:(commit|stash|wip)\\b/",
                    "group": "2_gitlens_quickopen@1"
                },
                {
                    "command": "gitlens.graph.showInDetailsView",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:(commit|stash|wip)\\b/",
                    "group": "3_gitlens_explore@0"
                },
                {
                    "command": "gitlens.graph.openSCM",
                    "when": "!listMultiSelection && webviewItem == gitlens:wip",
                    "group": "3_gitlens_explore@1"
                },
                {
                    "command": "gitlens.graph.openCommitOnRemote",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:commit\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "command": "gitlens.graph.openCommitOnRemote.multi",
                    "when": "listMultiSelection && gitlens:repos:withRemotes && webviewItems =~ /gitlens:commit\\b/",
                    "group": "3_gitlens_explore@2"
                },
                {
                    "submenu": "gitlens/share",
                    "when": "webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "7_gitlens_a_share@1"
                },
                {
                    "command": "gitlens.graph.copySha",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "7_gitlens_cutcopypaste@2"
                },
                {
                    "command": "gitlens.graph.copyMessage",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "7_gitlens_cutcopypaste@3"
                },
                {
                    "command": "gitlens.graph.stash.apply",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.stash.rename",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.stash.delete",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:stash",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.stash.save",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:wip",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.copyWorkingChangesToWorktree",
                    "when": "!listMultiSelection && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:wip",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.graph.switchToTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.deleteTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem == gitlens:tag",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.createBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.hideTag",
                    "when": "webviewItem =~ /gitlens:tag\\b/",
                    "group": "8_gitlens_actions@10"
                },
                {
                    "command": "gitlens.graph.openPullRequestChanges",
                    "when": "webviewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/ && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.openPullRequest",
                    "when": "gitlens:action:openPullRequest > 1 && webviewItem =~ /gitlens:pullrequest\\b/",
                    "group": "1_gitlens_actions@98"
                },
                {
                    "command": "gitlens.graph.openPullRequestOnRemote",
                    "when": "webviewItem =~ /gitlens:pullrequest\\b/",
                    "group": "1_gitlens_actions@99"
                },
                {
                    "command": "gitlens.graph.openPullRequestComparison",
                    "when": "webviewItem =~ /gitlens:pullrequest\\b(?=.*?\\b\\+refs\\b)/",
                    "group": "4_gitlens_compare@1"
                },
                {
                    "command": "gitlens.graph.push",
                    "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.graph.pull",
                    "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.fetch",
                    "when": "webviewItem =~ /gitlens:upstreamStatus\\b/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithMergeBase",
                    "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "3_gitlens_explore@11"
                },
                {
                    "command": "gitlens.graph.compareWithUpstream",
                    "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+tracking\\b)/",
                    "group": "4_gitlens_compare@1"
                },
                {
                    "command": "gitlens.graph.compareWithHead",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(branch\\b(?!.*?\\b\\+current\\b)|commit\\b|stash\\b|tag\\b)/",
                    "group": "4_gitlens_compare@2"
                },
                {
                    "command": "gitlens.graph.compareWithWorking",
                    "when": "!listMultiSelection && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:(branch|commit|stash|tag)\\b/",
                    "group": "4_gitlens_compare@3"
                },
                {
                    "command": "gitlens.graph.compareWithMergeBase",
                    "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "4_gitlens_compare@4"
                },
                {
                    "command": "gitlens.graph.compareAncestryWithWorking",
                    "when": "!gitlens:hasVirtualFolders && webviewItem =~ /gitlens:branch\\b(?!.*?\\b\\+current\\b)/",
                    "group": "4_gitlens_compare@5"
                },
                {
                    "command": "gitlens.graph.addAuthor",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && webviewItem =~ /gitlens:contributor\\b(?!.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.graph.copy",
                    "when": "webviewItem =~ /gitlens:(branch|commit|contributor|pullrequest|stash|tag)\\b/",
                    "group": "7_gitlens_cutcopypaste@1"
                },
                {
                    "submenu": "gitlens/graph/markers",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
                    "group": "0_markers@0"
                },
                {
                    "command": "gitlens.graph.columnAuthorOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:author:hidden\\b/",
                    "group": "1_columns@1"
                },
                {
                    "command": "gitlens.graph.columnAuthorOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:author:visible\\b/",
                    "group": "1_columns@1"
                },
                {
                    "command": "gitlens.graph.columnRefOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:ref:hidden\\b/",
                    "group": "1_columns@2"
                },
                {
                    "command": "gitlens.graph.columnRefOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:ref:visible\\b/",
                    "group": "1_columns@2"
                },
                {
                    "command": "gitlens.graph.columnChangesOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:changes:hidden\\b/",
                    "group": "1_columns@3"
                },
                {
                    "command": "gitlens.graph.columnChangesOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:changes:visible\\b/",
                    "group": "1_columns@3"
                },
                {
                    "command": "gitlens.graph.columnMessageOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:message:hidden\\b/",
                    "group": "1_columns@4"
                },
                {
                    "command": "gitlens.graph.columnMessageOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:message:visible\\b/",
                    "group": "1_columns@4"
                },
                {
                    "command": "gitlens.graph.columnDateTimeOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:datetime:hidden\\b/",
                    "group": "1_columns@5"
                },
                {
                    "command": "gitlens.graph.columnDateTimeOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:datetime:visible\\b/",
                    "group": "1_columns@5"
                },
                {
                    "command": "gitlens.graph.columnGraphOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:hidden\\b/",
                    "group": "1_columns@6"
                },
                {
                    "command": "gitlens.graph.columnGraphOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible\\b/",
                    "group": "1_columns@6"
                },
                {
                    "command": "gitlens.graph.columnShaOn",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:sha:hidden\\b/",
                    "group": "1_columns@7"
                },
                {
                    "command": "gitlens.graph.columnShaOff",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:sha:visible\\b/",
                    "group": "1_columns@7"
                },
                {
                    "command": "gitlens.graph.columnGraphDefault",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible[^,]*\\+compact\\b/",
                    "group": "2_columns@1"
                },
                {
                    "command": "gitlens.graph.columnGraphCompact",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/ && webviewItemValue =~ /\\bcolumn:graph:visible(?![^,]*\\+compact\\b)/",
                    "group": "2_columns@1"
                },
                {
                    "command": "gitlens.graph.resetColumnsDefault",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
                    "group": "3_columns@1"
                },
                {
                    "command": "gitlens.graph.resetColumnsCompact",
                    "when": "webviewItem =~ /gitlens:graph:(columns|settings)\\b/",
                    "group": "3_columns@2"
                }
            ],
            "gitlens/commit/browse": [
                {
                    "command": "gitlens.views.browseRepoAtRevision",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.browseRepoAtRevisionInNewWindow",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.views.browseRepoBeforeRevision",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.views.browseRepoBeforeRevisionInNewWindow",
                    "group": "1_gitlens@4"
                }
            ],
            "gitlens/commit/copy": [
                {
                    "command": "gitlens.copyShaToClipboard",
                    "when": "viewItem =~ /gitlens:(?!(commit|file|remote|repo-folder|repository|stash)\\b)/",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.copyMessageToClipboard",
                    "when": "viewItem =~ /gitlens:(?!(commit|file|remote|repo-folder|repository|stash)\\b)/",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.copyRemoteBranchUrl",
                    "when": "viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(tracking|remote)\\b)/",
                    "group": "1_gitlens@4"
                }
            ],
            "gitlens/share": [
                {
                    "command": "gitlens.shareAsCloudPatch",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:((commit|stash|compare:results(?!:)|)\\b|file\\b(?=.*?\\b\\+committed\\b))/",
                    "group": "1_a_gitlens@1"
                },
                {
                    "command": "gitlens.graph.shareAsCloudPatch",
                    "when": "!listMultiSelection && !gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && webviewItem =~ /gitlens:(commit|stash)\\b/",
                    "group": "1_a_gitlens@1"
                },
                {
                    "command": "gitlens.copyDeepLinkToBranch",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch\\b(?=.*?\\b\\+(remote|tracking)\\b)|status:upstream(?!:none))\\b/",
                    "group": "1_gitlens@50"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToBranch",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
                    "group": "1_gitlens@50"
                },
                {
                    "command": "gitlens.copyRemoteBranchUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
                    "group": "2_gitlens@50"
                },
                {
                    "command": "gitlens.graph.copyRemoteBranchUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
                    "group": "2_gitlens@50"
                },
                {
                    "command": "gitlens.copyDeepLinkToCommit",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
                    "group": "1_gitlens@25"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToCommit",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:commit\\b/",
                    "group": "1_gitlens@25"
                },
                {
                    "command": "gitlens.copyDeepLinkToComparison",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:compare:(branch(?=.*?\\b\\+comparing\\b)|results(?!:))\\b/",
                    "group": "1_gitlens@25"
                },
                {
                    "command": "gitlens.copyDeepLinkToFile",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
                    "group": "1_gitlens@26"
                },
                {
                    "command": "gitlens.copyDeepLinkToFileAtRevision",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/ && gitlens:repos:withRemotes",
                    "group": "1_gitlens@27"
                },
                {
                    "command": "gitlens.copyDeepLinkToWorkspace",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:workspace\\b/",
                    "group": "1_gitlens@25"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlWithoutRange",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(file\\b(?=.*?\\b\\+committed\\b)|history:(file|line)|status:file)\\b/",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(file\\b(?=.*?\\b\\+committed\\b)|history:(file|line)|status:file)\\b/",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlWithoutRange",
                    "when": "!listMultiSelection && gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "when": "!listMultiSelection && gitlens:enabled && gitlens:repos:withRemotes && scmProvider == git && scmResourceGroup =~ /^(workingTree|index|merge)$/",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.views.copyRemoteCommitUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
                    "group": "2_gitlens@25"
                },
                {
                    "command": "gitlens.views.copyRemoteCommitUrl.multi",
                    "when": "listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(commit|file\\b(?=.*?\\b\\+committed\\b))/",
                    "group": "2_gitlens@25"
                },
                {
                    "command": "gitlens.graph.copyRemoteCommitUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && webviewItem =~ /gitlens:commit\\b/",
                    "group": "2_gitlens@25"
                },
                {
                    "command": "gitlens.graph.copyRemoteCommitUrl.multi",
                    "when": "listMultiSelection && gitlens:repos:withRemotes && webviewItems =~ /gitlens:commit\\b/",
                    "group": "2_gitlens@25"
                },
                {
                    "command": "gitlens.copyDeepLinkToRepo",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:(branch\\b(?=.*?\\b\\+(remote|tracking)\\b)|remote|repo-folder|repository|status:upstream(?!:none))\\b/",
                    "group": "1_gitlens@99"
                },
                {
                    "command": "gitlens.copyDeepLinkToTag",
                    "when": "!listMultiSelection && viewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens@50"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToTag",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:tag\\b/",
                    "group": "1_gitlens@50"
                },
                {
                    "command": "gitlens.graph.copyDeepLinkToRepo",
                    "when": "!listMultiSelection && webviewItem =~ /gitlens:branch\\b(?=.*?\\b\\+(remote|tracking)\\b)/",
                    "group": "1_gitlens@99"
                },
                {
                    "command": "gitlens.copyRemoteRepositoryUrl",
                    "when": "!listMultiSelection && gitlens:repos:withRemotes && viewItem =~ /gitlens:(remote|repo-folder|repository)\\b/",
                    "group": "2_gitlens@99"
                }
            ],
            "gitlens/commit/changes": [
                {
                    "command": "gitlens.views.openChangedFileDiffs",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsIndividually",
                    "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithWorking",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.views.openChangedFileDiffsWithWorkingIndividually",
                    "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens@4"
                },
                {
                    "command": "gitlens.views.openChangedFiles",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.views.openChangedFileRevisions",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.views.openOnlyChangedFiles",
                    "group": "2_gitlens@3"
                }
            ],
            "gitlens/graph/commit/changes": [
                {
                    "command": "gitlens.graph.openChangedFileDiffs",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsIndividually",
                    "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithWorking",
                    "when": "webviewItem != gitlens:wip",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.graph.openChangedFileDiffsWithWorkingIndividually",
                    "when": "config.gitlens.views.openChangesInMultiDiffEditor && config.multiDiffEditor.experimental.enabled",
                    "group": "1_gitlens@4"
                },
                {
                    "command": "gitlens.graph.openChangedFiles",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.graph.openChangedFileRevisions",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.graph.openOnlyChangedFiles",
                    "group": "2_gitlens@3"
                }
            ],
            "gitlens/commit/file/commit": [
                {
                    "command": "gitlens.showInDetailsView",
                    "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.showInCommitGraph",
                    "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)\\b/",
                    "group": "navigation@2"
                },
                {
                    "command": "gitlens.views.openCommitOnRemote",
                    "when": "view =~ /^gitlens\\.views\\.(fileHistory|lineHistory)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/ && gitlens:repos:withRemotes",
                    "group": "navigation@3",
                    "alt": "gitlens.copyRemoteCommitUrl"
                },
                {
                    "command": "gitlens.revealCommitInView",
                    "when": "view =~ /gitlens\\.views\\.(fileHistory|lineHistory\\b)/ && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "navigation@4"
                },
                {
                    "command": "gitlens.views.undoCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@0"
                },
                {
                    "command": "gitlens.views.push",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?=.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@1"
                },
                {
                    "command": "gitlens.views.pushToCommit",
                    "when": "gitlens:repos:withRemotes && !gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)(?=.*?\\b\\+unpublished\\b)(?!.*?\\b\\+HEAD\\b)/",
                    "group": "1_gitlens_actions@2"
                },
                {
                    "command": "gitlens.views.revert",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@3"
                },
                {
                    "command": "gitlens.views.resetToCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_actions@4"
                },
                {
                    "command": "gitlens.views.resetCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_actions@5"
                },
                {
                    "command": "gitlens.views.rebaseOntoCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)(?=.*?\\b\\+current\\b)/",
                    "group": "1_gitlens_actions@6"
                },
                {
                    "command": "gitlens.views.switchToCommit",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_actions@7"
                },
                {
                    "command": "gitlens.views.createBranch",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_secondary_actions@1"
                },
                {
                    "command": "gitlens.createPatch",
                    "when": "false && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_secondary_actions@2"
                },
                {
                    "command": "gitlens.createCloudPatch",
                    "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_secondary_actions@3"
                },
                {
                    "command": "gitlens.views.createTag",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?=.*?\\b\\+committed\\b)/",
                    "group": "1_gitlens_secondary_actions@4"
                }
            ],
            "gitlens/commit/file/changes": [
                {
                    "command": "gitlens.views.openPreviousChangesWithWorking",
                    "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+(conflicted|stashed|staged|unstaged)\\b)/",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.openChangesWithWorking",
                    "when": "viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithRevision",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "group": "1_gitlens@4"
                },
                {
                    "command": "gitlens.externalDiff",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders && viewItem =~ /gitlens:file\\b(?!.*?\\b\\+conflicted\\b)/",
                    "group": "1_gitlens_@1"
                },
                {
                    "command": "gitlens.views.highlightChanges",
                    "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+(committed|stashed)\\b)|:results)/",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.views.highlightRevisionChanges",
                    "when": "viewItem =~ /gitlens:file\\b((?=.*?\\b\\+committed\\b)|:results)/",
                    "group": "2_gitlens@2"
                }
            ],
            "gitlens/commit/file/history": [
                {
                    "command": "gitlens.openFileHistory",
                    "when": "view != gitlens.views.fileHistory/",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.showInTimeline",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.quickOpenFileHistory",
                    "group": "1_gitlens_quick@1"
                }
            ],
            "gitlens/editor/annotations": [
                {
                    "command": "gitlens.clearFileAnnotations",
                    "when": "resource in gitlens:tabs:blameable && (gitlens:window:annotated || resource in gitlens:tabs:annotated)",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.toggleFileBlame",
                    "when": "resource in gitlens:tabs:blameable && !isInDiffEditor",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.toggleFileBlameInDiffLeft",
                    "when": "resource in gitlens:tabs:blameable && isInDiffEditor && !isInDiffRightEditor",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.toggleFileBlameInDiffRight",
                    "when": "resource in gitlens:tabs:blameable && isInDiffRightEditor",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.toggleFileHeatmap",
                    "when": "resource in gitlens:tabs:blameable && !isInDiffEditor",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.toggleFileHeatmapInDiffLeft",
                    "when": "resource in gitlens:tabs:blameable && isInDiffEditor && !isInDiffRightEditor",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.toggleFileHeatmapInDiffRight",
                    "when": "resource in gitlens:tabs:blameable && isInDiffRightEditor",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.toggleFileChanges",
                    "when": "resource in gitlens:tabs:blameable && !gitlens:hasVirtualFolders",
                    "group": "2_gitlens@3"
                },
                {
                    "command": "gitlens.showSettingsPage!file-annotations",
                    "when": "resource in gitlens:tabs:blameable",
                    "group": "8_gitlens@1"
                }
            ],
            "gitlens/editor/context/changes": [
                {
                    "command": "gitlens.diffLineWithPrevious",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffLineWithWorking",
                    "when": "editorTextFocus && resource in gitlens:tabs:tracked",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithPrevious",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.diffWithWorking",
                    "when": "resourceScheme == gitlens",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithRevision",
                    "group": "2_gitlens@3"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "group": "2_gitlens@4"
                },
                {
                    "command": "gitlens.showQuickCommitFileDetails",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.showLineCommitInView",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.showCommitsInView",
                    "when": "editorTextFocus && editorHasSelection",
                    "group": "3_gitlens@2"
                },
                {
                    "command": "gitlens.showQuickRevisionDetails",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && !isInDiffEditor",
                    "group": "3_gitlens_1@1"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffLeft",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffEditor && !isInDiffRightEditor",
                    "group": "3_gitlens_1@1"
                },
                {
                    "command": "gitlens.showQuickRevisionDetailsInDiffRight",
                    "when": "gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffRightEditor",
                    "group": "3_gitlens_1@1"
                }
            ],
            "gitlens/editor/context/openOn": [
                {
                    "command": "gitlens.openFileOnRemote",
                    "group": "1_gitlens@2",
                    "alt": "gitlens.copyRemoteFileUrlToClipboard"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "group": "1_gitlens@3",
                    "alt": "gitlens.copyRemoteFileUrlFrom"
                },
                {
                    "command": "gitlens.openCommitOnRemote",
                    "group": "1_gitlens_commit@1",
                    "alt": "gitlens.copyRemoteCommitUrl"
                }
            ],
            "gitlens/editor/changes": [
                {
                    "command": "gitlens.diffWithPrevious",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffWithWorking",
                    "when": "resourceScheme == gitlens",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithRevision",
                    "group": "1_gitlens@3"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "group": "1_gitlens@4"
                }
            ],
            "gitlens/editor/history": [
                {
                    "command": "gitlens.openFileHistory",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.showInTimeline",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.quickOpenFileHistory",
                    "group": "1_gitlens_quick@1"
                }
            ],
            "gitlens/editor/openOn": [
                {
                    "command": "gitlens.openFileOnRemote",
                    "group": "1_gitlens@1",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "group": "1_gitlens@2",
                    "alt": "gitlens.copyRemoteFileUrlFrom"
                }
            ],
            "gitlens/editor/lineNumber/context/changes": [
                {
                    "command": "gitlens.diffLineWithPrevious",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffLineWithWorking",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.showQuickCommitFileDetails",
                    "group": "3_gitlens@1"
                },
                {
                    "command": "gitlens.showLineCommitInView",
                    "group": "3_gitlens@2"
                }
            ],
            "gitlens/editor/lineNumber/context/openOn": [
                {
                    "command": "gitlens.openFileOnRemote",
                    "group": "1_gitlens@2",
                    "alt": "gitlens.copyRemoteFileUrlToClipboard"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "group": "1_gitlens@3",
                    "alt": "gitlens.copyRemoteFileUrlFrom"
                },
                {
                    "command": "gitlens.openCommitOnRemote",
                    "group": "1_gitlens_commit@1",
                    "alt": "gitlens.copyRemoteCommitUrl"
                }
            ],
            "gitlens/editor/lineNumber/context/share": [
                {
                    "command": "gitlens.copyRemoteFileUrlToClipboard",
                    "group": "1_gitlens_remote@2"
                },
                {
                    "command": "gitlens.copyRemoteFileUrlFrom",
                    "group": "1_gitlens_remote@3"
                },
                {
                    "command": "gitlens.copyRemoteCommitUrl",
                    "group": "1_gitlens_remote_commit@1"
                },
                {
                    "command": "gitlens.copyDeepLinkToLines",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.copyDeepLinkToFile",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.copyDeepLinkToFileAtRevision",
                    "when": "resource in gitlens:tabs:tracked",
                    "group": "1_gitlens@3"
                }
            ],
            "gitlens/explorer/changes": [
                {
                    "command": "gitlens.diffWithPrevious",
                    "when": "!explorerResourceIsFolder",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffFolderWithRevision",
                    "when": "!gitlens:hasVirtualFolders && explorerResourceIsFolder",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffFolderWithRevisionFrom",
                    "when": "!gitlens:hasVirtualFolders && explorerResourceIsFolder",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithRevision",
                    "when": "!explorerResourceIsFolder",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "when": "!explorerResourceIsFolder",
                    "group": "1_gitlens@3"
                }
            ],
            "gitlens/explorer/history": [
                {
                    "command": "gitlens.openFileHistory",
                    "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.openFolderHistory",
                    "when": "explorerResourceIsFolder && gitlens:enabled",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.showInTimeline",
                    "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.quickOpenFileHistory",
                    "when": "!explorerResourceIsRoot && !explorerResourceIsFolder && gitlens:enabled",
                    "group": "1_gitlens_quick@1"
                }
            ],
            "gitlens/explorer/openOn": [
                {
                    "command": "gitlens.openFileOnRemote",
                    "group": "1_gitlens@1",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "group": "1_gitlens@2",
                    "alt": "gitlens.copyRemoteFileUrlFrom"
                }
            ],
            "gitlens/graph/configuration": [
                {
                    "command": "gitlens.graph.switchToEditorLayout",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.graph.switchToPanelLayout",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.showSettingsPage!commit-graph",
                    "group": "9_gitlens@1"
                }
            ],
            "gitlens/graph/markers": [
                {
                    "command": "gitlens.graph.scrollMarkerLocalBranchOn",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:localBranches:disabled\\b/",
                    "group": "4_settings@1"
                },
                {
                    "command": "gitlens.graph.scrollMarkerLocalBranchOff",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:localBranches:enabled\\b/",
                    "group": "4_settings@1"
                },
                {
                    "command": "gitlens.graph.scrollMarkerRemoteBranchOn",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:remoteBranches:disabled\\b/",
                    "group": "4_settings@2"
                },
                {
                    "command": "gitlens.graph.scrollMarkerRemoteBranchOff",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:remoteBranches:enabled\\b/",
                    "group": "4_settings@2"
                },
                {
                    "command": "gitlens.graph.scrollMarkerPullRequestOn",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:pullRequests:disabled\\b/",
                    "group": "4_settings@3"
                },
                {
                    "command": "gitlens.graph.scrollMarkerPullRequestOff",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:pullRequests:enabled\\b/",
                    "group": "4_settings@3"
                },
                {
                    "command": "gitlens.graph.scrollMarkerStashOn",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:stashes:disabled\\b/",
                    "group": "4_settings@4"
                },
                {
                    "command": "gitlens.graph.scrollMarkerStashOff",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:stashes:enabled\\b/",
                    "group": "4_settings@4"
                },
                {
                    "command": "gitlens.graph.scrollMarkerTagOn",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:tags:disabled\\b/",
                    "group": "4_settings@5"
                },
                {
                    "command": "gitlens.graph.scrollMarkerTagOff",
                    "when": "webviewItem =~ /gitlens:graph:settings\\b/ && webviewItemValue =~ /\\bscrollMarker:tags:enabled\\b/",
                    "group": "4_settings@5"
                }
            ],
            "gitlens/scm/resourceGroup/changes": [
                {
                    "command": "gitlens.externalDiffAll",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders",
                    "group": "2_gitlens@1"
                },
                {
                    "command": "gitlens.diffDirectoryWithHead",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.diffDirectory",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "2_gitlens@3"
                }
            ],
            "gitlens/scm/resourceFolder/changes": [
                {
                    "command": "gitlens.diffFolderWithRevision",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffFolderWithRevisionFrom",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "1_gitlens@2"
                }
            ],
            "gitlens/scm/resourceState/changes": [
                {
                    "command": "gitlens.diffWithRevision",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.diffWithRevisionFrom",
                    "when": "!gitlens:hasVirtualFolders",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.externalDiff",
                    "when": "!gitlens:readonly && !gitlens:untrusted && !gitlens:hasVirtualFolders",
                    "group": "2_gitlens@1"
                }
            ],
            "gitlens/scm/resourceState/history": [
                {
                    "command": "gitlens.openFileHistory",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.showInTimeline",
                    "group": "1_gitlens@2"
                },
                {
                    "command": "gitlens.quickOpenFileHistory",
                    "group": "1_gitlens_quick@1"
                }
            ],
            "gitlens/scm/resourceState/openOn": [
                {
                    "command": "gitlens.openFileOnRemote",
                    "group": "1_gitlens@1",
                    "alt": "gitlens.copyRemoteFileUrlWithoutRange"
                },
                {
                    "command": "gitlens.openFileOnRemoteFrom",
                    "group": "1_gitlens@2",
                    "alt": "gitlens.copyRemoteFileUrlFrom"
                }
            ],
            "gitlens/view/repositories/sections": [
                {
                    "command": "gitlens.views.repositories.setShowBranchComparisonOn",
                    "when": "!config.gitlens.views.repositories.showBranchComparison",
                    "group": "1_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchComparisonOff",
                    "when": "config.gitlens.views.repositories.showBranchComparison",
                    "group": "1_gitlens@0"
                },
                {
                    "command": "gitlens.views.repositories.setShowUpstreamStatusOn",
                    "when": "!config.gitlens.views.repositories.showUpstreamStatus",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.repositories.setShowUpstreamStatusOff",
                    "when": "config.gitlens.views.repositories.showUpstreamStatus",
                    "group": "1_gitlens@1"
                },
                {
                    "command": "gitlens.views.repositories.setShowCommitsOn",
                    "when": "!config.gitlens.views.repositories.showCommits",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.views.repositories.setShowCommitsOff",
                    "when": "config.gitlens.views.repositories.showCommits",
                    "group": "2_gitlens@2"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchesOn",
                    "when": "!config.gitlens.views.repositories.showBranches",
                    "group": "2_gitlens@3"
                },
                {
                    "command": "gitlens.views.repositories.setShowBranchesOff",
                    "when": "config.gitlens.views.repositories.showBranches",
                    "group": "2_gitlens@3"
                },
                {
                    "command": "gitlens.views.repositories.setShowRemotesOn",
                    "when": "!config.gitlens.views.repositories.showRemotes",
                    "group": "2_gitlens@4"
                },
                {
                    "command": "gitlens.views.repositories.setShowRemotesOff",
                    "when": "config.gitlens.views.repositories.showRemotes",
                    "group": "2_gitlens@4"
                },
                {
                    "command": "gitlens.views.repositories.setShowStashesOn",
                    "when": "!config.gitlens.views.repositories.showStashes",
                    "group": "2_gitlens@5"
                },
                {
                    "command": "gitlens.views.repositories.setShowStashesOff",
                    "when": "config.gitlens.views.repositories.showStashes",
                    "group": "2_gitlens@5"
                },
                {
                    "command": "gitlens.views.repositories.setShowTagsOn",
                    "when": "!config.gitlens.views.repositories.showTags",
                    "group": "2_gitlens@6"
                },
                {
                    "command": "gitlens.views.repositories.setShowTagsOff",
                    "when": "config.gitlens.views.repositories.showTags",
                    "group": "2_gitlens@6"
                },
                {
                    "command": "gitlens.views.repositories.setShowWorktreesOn",
                    "when": "!config.gitlens.views.repositories.showWorktrees",
                    "group": "2_gitlens@7"
                },
                {
                    "command": "gitlens.views.repositories.setShowWorktreesOff",
                    "when": "config.gitlens.views.repositories.showWorktrees",
                    "group": "2_gitlens@7"
                },
                {
                    "command": "gitlens.views.repositories.setShowContributorsOn",
                    "when": "!config.gitlens.views.repositories.showContributors",
                    "group": "2_gitlens@8"
                },
                {
                    "command": "gitlens.views.repositories.setShowContributorsOff",
                    "when": "config.gitlens.views.repositories.showContributors",
                    "group": "2_gitlens@8"
                }
            ],
            "gitlens/view/searchAndCompare/new": [
                {
                    "command": "gitlens.views.searchAndCompare.searchCommits",
                    "when": "view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "navigation@10"
                },
                {
                    "command": "gitlens.views.searchAndCompare.selectForCompare",
                    "when": "!gitlens:hasVirtualFolders && view =~ /^gitlens\\.views\\.searchAndCompare\\b/",
                    "group": "navigation@11"
                }
            ],
            "gitlens/comparison/results/files/filter": [
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
                    "group": "navigation_1@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
                    "group": "navigation_1@2"
                }
            ],
            "gitlens/comparison/results/files/filter/inline": [
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
                    "group": "navigation_1@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
                    "group": "navigation_1@2"
                }
            ],
            "gitlens/comparison/results/files/filtered": [
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
                    "group": "navigation_1@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
                    "group": "navigation_1@2"
                }
            ],
            "gitlens/comparison/results/files/filtered/inline": [
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOff",
                    "when": "viewItem =~ /gitlens:results:files\\b(?=.*?\\b\\+filtered\\b)/",
                    "group": "navigation@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnLeft",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~left\\b)/",
                    "group": "navigation_1@1"
                },
                {
                    "command": "gitlens.views.searchAndCompare.setFilesFilterOnRight",
                    "when1": "viewItem =~ /gitlens:results:files\\b(?!.*?\\b\\+filtered~right\\b)/",
                    "group": "navigation_1@2"
                }
            ]
        },
        "submenus": [
            {
                "id": "gitlens/commit/browse",
                "label": "Browse"
            },
            {
                "id": "gitlens/commit/copy",
                "label": "Copy As"
            },
            {
                "id": "gitlens/commit/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/graph/commit/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/commit/file/commit",
                "label": "Commit"
            },
            {
                "id": "gitlens/commit/file/changes",
                "label": "Open Changes with"
            },
            {
                "id": "gitlens/commit/file/history",
                "label": "File History"
            },
            {
                "id": "gitlens/editor/annotations",
                "label": "File Annotations",
                "icon": "$(gitlens-gitlens)"
            },
            {
                "id": "gitlens/editor/context/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/editor/context/openOn",
                "label": "Open on Remote (Web)"
            },
            {
                "id": "gitlens/editor/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/editor/history",
                "label": "File History"
            },
            {
                "id": "gitlens/editor/openOn",
                "label": "Open on Remote (Web)"
            },
            {
                "id": "gitlens/editor/lineNumber/context/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/editor/lineNumber/context/openOn",
                "label": "Open on Remote (Web)"
            },
            {
                "id": "gitlens/editor/lineNumber/context/share",
                "label": "Share"
            },
            {
                "id": "gitlens/explorer/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/explorer/history",
                "label": "File History"
            },
            {
                "id": "gitlens/explorer/openOn",
                "label": "Open on Remote (Web)"
            },
            {
                "id": "gitlens/graph/configuration",
                "label": "Commit Graph Settings",
                "icon": "$(gear)"
            },
            {
                "id": "gitlens/graph/markers",
                "label": "Scroll Markers"
            },
            {
                "id": "gitlens/scm/resourceGroup/changes",
                "label": "Open Changes"
            },
            {
                "id": "gitlens/scm/resourceFolder/changes",
                "label": "Open Changes with"
            },
            {
                "id": "gitlens/scm/resourceState/changes",
                "label": "Open Changes with"
            },
            {
                "id": "gitlens/scm/resourceState/history",
                "label": "File History"
            },
            {
                "id": "gitlens/scm/resourceState/openOn",
                "label": "Open on Remote (Web)"
            },
            {
                "id": "gitlens/share",
                "label": "Share"
            },
            {
                "id": "gitlens/view/repositories/sections",
                "label": "Sections"
            },
            {
                "id": "gitlens/view/searchAndCompare/new",
                "label": "New Search or Compare",
                "icon": "$(add)"
            },
            {
                "id": "gitlens/comparison/results/files/filter",
                "label": "Filter Files",
                "icon": "$(filter)"
            },
            {
                "id": "gitlens/comparison/results/files/filter/inline",
                "label": "Filter Files",
                "icon": "$(filter)"
            },
            {
                "id": "gitlens/comparison/results/files/filtered",
                "label": "Filter Files",
                "icon": "$(filter-filled)"
            },
            {
                "id": "gitlens/comparison/results/files/filtered/inline",
                "label": "Filter Files",
                "icon": "$(filter-filled)"
            }
        ],
        "keybindings": [
            {
                "command": "gitlens.key.left",
                "key": "left",
                "when": "gitlens:key:left"
            },
            {
                "command": "gitlens.key.alt+left",
                "key": "alt+left",
                "when": "gitlens:key:alt+left"
            },
            {
                "command": "gitlens.key.ctrl+left",
                "key": "ctrl+left",
                "mac": "cmd+left",
                "when": "gitlens:key:ctrl+left"
            },
            {
                "command": "gitlens.key.right",
                "key": "right",
                "when": "gitlens:key:right"
            },
            {
                "command": "gitlens.key.alt+right",
                "key": "alt+right",
                "when": "gitlens:key:alt+right"
            },
            {
                "command": "gitlens.key.ctrl+right",
                "key": "ctrl+right",
                "mac": "cmd+right",
                "when": "gitlens:key:ctrl+right"
            },
            {
                "command": "gitlens.key.alt+,",
                "key": "alt+,",
                "when": "gitlens:key:,"
            },
            {
                "command": "gitlens.key.alt+.",
                "key": "alt+.",
                "when": "gitlens:key:."
            },
            {
                "command": "gitlens.key.alt+enter",
                "key": "alt+enter",
                "when": "gitlens:key:alt+enter"
            },
            {
                "command": "gitlens.key.ctrl+enter",
                "key": "ctrl+enter",
                "when": "gitlens:key:ctrl+enter"
            },
            {
                "command": "gitlens.key.escape",
                "key": "escape",
                "when": "gitlens:key:escape && editorTextFocus && !findWidgetVisible && !quickFixWidgetVisible && !renameInputVisible && !suggestWidgetVisible && !referenceSearchVisible && !codeActionMenuVisible && !parameterHintsVisible && !isInEmbeddedEditor"
            },
            {
                "command": "gitlens.gitCommands",
                "key": "alt+/",
                "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
            },
            {
                "command": "gitlens.gitCommands",
                "key": "ctrl+shift+g /",
                "mac": "cmd+alt+g /",
                "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
            },
            {
                "command": "gitlens.toggleFileBlame",
                "key": "alt+b",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:blameable"
            },
            {
                "command": "gitlens.toggleFileBlame",
                "key": "ctrl+shift+g b",
                "mac": "cmd+alt+g b",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:blameable"
            },
            {
                "command": "gitlens.toggleCodeLens",
                "key": "shift+alt+b",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
            },
            {
                "command": "gitlens.toggleCodeLens",
                "key": "ctrl+shift+g shift+b",
                "mac": "cmd+alt+g shift+b",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens"
            },
            {
                "command": "gitlens.showQuickFileHistory",
                "key": "alt+h",
                "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickFileHistory",
                "key": "ctrl+shift+g h",
                "mac": "cmd+alt+g h",
                "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickRepoHistory",
                "key": "shift+alt+h",
                "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickRepoHistory",
                "key": "ctrl+shift+g shift+h",
                "mac": "cmd+alt+g shift+h",
                "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickRepoStatus",
                "key": "alt+s",
                "when": "config.gitlens.keymap == alternate && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickRepoStatus",
                "key": "ctrl+shift+g s",
                "mac": "cmd+alt+g s",
                "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickCommitFileDetails",
                "key": "alt+c",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && !gitlens:disabled"
            },
            {
                "command": "gitlens.showQuickCommitFileDetails",
                "key": "ctrl+shift+g c",
                "mac": "cmd+alt+g c",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && !gitlens:disabled"
            },
            {
                "command": "gitlens.diffWithPrevious",
                "key": "alt+,",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && !isInDiffEditor"
            },
            {
                "command": "gitlens.diffWithPrevious",
                "key": "ctrl+shift+g ,",
                "mac": "cmd+alt+g ,",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && !isInDiffEditor"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffLeft",
                "key": "alt+,",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffLeft",
                "key": "ctrl+shift+g ,",
                "mac": "cmd+alt+g ,",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffEditor && !isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffRight",
                "key": "alt+,",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithPreviousInDiffRight",
                "key": "ctrl+shift+g ,",
                "mac": "cmd+alt+g ,",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked && isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithNext",
                "key": "alt+.",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && !isInDiffEditor"
            },
            {
                "command": "gitlens.diffWithNext",
                "key": "ctrl+shift+g .",
                "mac": "cmd+alt+g .",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && !isInDiffEditor"
            },
            {
                "command": "gitlens.diffWithNextInDiffLeft",
                "key": "alt+.",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffEditor && !isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithNextInDiffLeft",
                "key": "ctrl+shift+g .",
                "mac": "cmd+alt+g .",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffEditor && !isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithNextInDiffRight",
                "key": "alt+.",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithNextInDiffRight",
                "key": "ctrl+shift+g .",
                "mac": "cmd+alt+g .",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/ && isInDiffRightEditor"
            },
            {
                "command": "gitlens.diffWithWorking",
                "key": "shift+alt+.",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
            },
            {
                "command": "gitlens.diffWithWorking",
                "key": "ctrl+shift+g shift+.",
                "mac": "cmd+alt+g shift+.",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && gitlens:enabled && resourceScheme =~ /^(gitlens|git|pr)$/"
            },
            {
                "command": "gitlens.diffLineWithPrevious",
                "key": "shift+alt+,",
                "when": "config.gitlens.keymap == alternate && editorTextFocus && resource in gitlens:tabs:tracked"
            },
            {
                "command": "gitlens.diffLineWithPrevious",
                "key": "ctrl+shift+g shift+,",
                "mac": "cmd+alt+g shift+,",
                "when": "config.gitlens.keymap == chorded && editorTextFocus && resource in gitlens:tabs:tracked"
            },
            {
                "command": "workbench.view.scm",
                "key": "ctrl+shift+g g",
                "mac": "ctrl+shift+g",
                "when": "config.gitlens.keymap == chorded && !gitlens:disabled"
            },
            {
                "command": "gitlens.views.branches.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.branches/"
            },
            {
                "command": "gitlens.views.commits.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.commits/"
            },
            {
                "command": "gitlens.views.contributors.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.contributors/"
            },
            {
                "command": "gitlens.views.drafts.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.drafts/"
            },
            {
                "command": "gitlens.views.fileHistory.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.fileHistory/"
            },
            {
                "command": "gitlens.views.lineHistory.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.lineHistory/"
            },
            {
                "command": "gitlens.views.pullRequest.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.pullRequest/"
            },
            {
                "command": "gitlens.views.remotes.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.remotes/"
            },
            {
                "command": "gitlens.views.repositories.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.repositories/"
            },
            {
                "command": "gitlens.views.stashes.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.stashes/"
            },
            {
                "command": "gitlens.views.searchAndCompare.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.searchAndCompare\\b/"
            },
            {
                "command": "gitlens.views.tags.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.tags/"
            },
            {
                "command": "gitlens.views.worktrees.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.worktrees/"
            },
            {
                "command": "gitlens.views.workspaces.copy",
                "key": "ctrl+c",
                "mac": "cmd+c",
                "when": "gitlens:enabled && focusedView =~ /^gitlens\\.views\\.workspaces/"
            }
        ],
        "customEditors": [
            {
                "viewType": "gitlens.rebase",
                "displayName": "GitLens Interactive Rebase Editor",
                "selector": [
                    {
                        "filenamePattern": "git-rebase-todo"
                    }
                ]
            }
        ],
        "resourceLabelFormatters": [
            {
                "scheme": "gitlens",
                "authority": "*",
                "formatting": {
                    "label": "${path} (${query.ref})",
                    "normalizeDriveLetter": true,
                    "tildify": true,
                    "workspaceSuffix": "GitLens"
                }
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "gitlens",
                    "title": "吉特透镜",
                    "icon": "$(gitlens-gitlens)"
                },
                {
                    "id": "gitlensInspect",
                    "title": "GitLens 检查",
                    "icon": "$(gitlens-gitlens-inspect)"
                },
                {
                    "id": "gitlensPatch",
                    "title": "GitLens 补丁",
                    "icon": "$(gitlens-cloud-patch)"
                }
            ],
            "panel": [
                {
                    "id": "gitlensPanel",
                    "title": "吉特透镜",
                    "icon": "$(gitlens-graph)"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "gitlens.views.searchAndCompare",
                "contents": "Search for commits by [message](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22message%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [author](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22author%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [SHA](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22commit%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [file](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22file%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), or [changes](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22change%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D)\n\n[Search Commits...](command:gitlens.views.searchAndCompare.searchCommits)",
                "when": "!gitlens:hasVirtualFolders"
            },
            {
                "view": "gitlens.views.searchAndCompare",
                "contents": "Search for commits by [message](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22message%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), [author](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22author%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D), or [SHA](command:gitlens.views.searchAndCompare.searchCommits?%7B%22search%22%3A%7B%22query%22%3A%22commit%3A%22%7D%2C%22prefillOnly%22%3Atrue%7D)\n\n[Search Commits...](command:gitlens.views.searchAndCompare.searchCommits)",
                "when": "gitlens:hasVirtualFolders"
            },
            {
                "view": "gitlens.views.searchAndCompare",
                "contents": "Compare a <branch, tag, or ref> with another <branch, tag, or ref>\n\n[Compare References...](command:gitlens.views.searchAndCompare.selectForCompare)",
                "when": "!gitlens:hasVirtualFolders"
            },
            {
                "view": "gitlens.views.drafts",
                "contents": "Cloud Patches ᴘʀᴇᴠɪᴇᴡ — easily and securely share code with your teammates or other developers, accessible from anywhere, streamlining your workflow with better collaboration."
            },
            {
                "view": "gitlens.views.drafts",
                "contents": "[Create Cloud Patch](command:gitlens.views.drafts.create)",
                "when": "gitlens:plus"
            },
            {
                "view": "gitlens.views.drafts",
                "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22cloud-patches%22%7D)\n\nStart your free 7-day Pro trial to try Cloud Patches and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22cloud-patches%22%7D).",
                "when": "!gitlens:plus"
            },
            {
                "view": "gitlens.views.drafts",
                "contents": "Preview feature ☁️ — requires an account and may require a paid plan in the future."
            },
            {
                "view": "gitlens.views.workspaces",
                "contents": "Workspaces ᴘʀᴇᴠɪᴇᴡ — group and manage multiple repositories together, accessible from anywhere, streamlining your workflow.\n\nCreate workspaces just for yourself or share (coming soon in GitLens) them with your team for faster onboarding and better collaboration."
            },
            {
                "view": "gitlens.views.workspaces",
                "contents": "[Create Cloud Workspace](command:gitlens.views.workspaces.create)",
                "when": "gitlens:plus"
            },
            {
                "view": "gitlens.views.workspaces",
                "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22workspaces%22%7D)\n\nStart your free 7-day Pro trial to try GitKraken (GK) Workspaces and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22workspaces%22%7D).",
                "when": "!gitlens:plus"
            },
            {
                "view": "gitlens.views.workspaces",
                "contents": "Preview feature ☁️ — requires an account and may require a paid plan in the future."
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Worktrees](https://help.gitkraken.com/gitlens/side-bar/#worktrees-view%e2%9c%a8) ᴾᴿᴼ — minimize context switching by allowing you to work on multiple branches simultaneously."
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Create Worktree...](command:gitlens.views.createWorktree)",
                "when": "!gitlens:plus:required"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Resend Verification Email](command:gitlens.plus.resendVerification?%7B%22source%22%3A%22worktrees%22%7D)\n\nYou must verify your email before you can continue or [recheck Status](command:gitlens.plus.validate?%7B%22source%22%3A%22worktrees%22%7D).",
                "when": "gitlens:plus:state == -1"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Continue](command:gitlens.plus.startPreviewTrial?%7B%22source%22%3A%22worktrees%22%7D)\n\nContinuing gives you 3 days to preview Worktrees and other local Pro features for 3 days. [Start 7-day Pro trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22worktrees%22%7D) or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22worktrees%22%7D) for full access to Pro features.",
                "when": "gitlens:plus:required && gitlens:plus:state == 0"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Start Pro Trial](command:gitlens.plus.signUp?%7B%22source%22%3A%22worktrees%22%7D)\n\nStart your free 7-day Pro trial to try Worktrees and other Pro features, or [sign in](command:gitlens.plus.login?%7B%22source%22%3A%22worktrees%22%7D).",
                "when": "gitlens:plus:required && gitlens:plus:state == 2"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Upgrade to Pro](command:gitlens.plus.upgrade?%7B%22source%22%3A%22worktrees%22%7D)\n\nYour Pro trial has ended. Please upgrade for full access to Worktrees and other Pro features.\nSpecial: 1st seat of Pro is now 50%+ off.",
                "when": "gitlens:plus:required && gitlens:plus:state == 4"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "[Continue](command:gitlens.plus.reactivateProTrial?%7B%22source%22%3A%22worktrees%22%7D)\n\nReactivate your Pro trial and experience Worktrees and all the new Pro features — free for another 7 days!",
                "when": "gitlens:plus:required && gitlens:plus:state == 5"
            },
            {
                "view": "gitlens.views.worktrees",
                "contents": "Pro feature — requires a paid plan for use on privately-hosted repos."
            }
        ],
        "views": {
            "gitlens": [
                {
                    "type": "webview",
                    "id": "gitlens.views.home",
                    "name": "Home",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-gitlens)",
                    "initialSize": 6,
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.drafts",
                    "name": "Cloud Patches",
                    "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders && gitlens:gk:organization:drafts:enabled && config.gitlens.cloudPatches.enabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-cloud-patch)",
                    "initialSize": 2,
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.workspaces",
                    "name": "GK Workspaces",
                    "when": "!gitlens:untrusted && !gitlens:hasVirtualFolders",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-workspaces-view)",
                    "initialSize": 2,
                    "visibility": "visible"
                },
                {
                    "type": "webview",
                    "id": "gitlens.views.account",
                    "name": "GitKraken Account",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-gitlens)",
                    "initialSize": 1,
                    "visibility": "collapsed"
                }
            ],
            "gitlensInspect": [
                {
                    "type": "webview",
                    "id": "gitlens.views.commitDetails",
                    "name": "Inspect",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-commit-view)",
                    "initialSize": 6,
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.pullRequest",
                    "name": "Pull Request",
                    "when": "!gitlens:disabled && gitlens:views:pullRequest:visible",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(git-pull-request)",
                    "initialSize": 1,
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.lineHistory",
                    "name": "Line History",
                    "when": "!gitlens:disabled && !gitlens:hasVirtualFolders",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-history-view)",
                    "initialSize": 1,
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.fileHistory",
                    "name": "File History",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-history-view)",
                    "initialSize": 2,
                    "visibility": "visible"
                },
                {
                    "type": "webview",
                    "id": "gitlens.views.timeline",
                    "name": "Visual File History",
                    "when": "!gitlens:disabled && gitlens:plus:enabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(graph-scatter)",
                    "initialSize": 1,
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.searchAndCompare",
                    "name": "Search & Compare",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-search-view)",
                    "initialSize": 2,
                    "visibility": "visible"
                }
            ],
            "gitlensPanel": [
                {
                    "type": "webview",
                    "id": "gitlens.views.graph",
                    "name": "Graph",
                    "when": "!gitlens:disabled && gitlens:plus:enabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-graph)",
                    "initialSize": 4,
                    "visibility": "visible"
                },
                {
                    "type": "webview",
                    "id": "gitlens.views.graphDetails",
                    "name": "Graph Details",
                    "when": "!gitlens:disabled && gitlens:plus:enabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-commit-view)",
                    "initialSize": 1,
                    "visibility": "visible"
                }
            ],
            "gitlensPatch": [
                {
                    "type": "webview",
                    "id": "gitlens.views.patchDetails",
                    "name": "Patch",
                    "when": "!gitlens:untrusted && config.gitlens.cloudPatches.enabled && gitlens:views:patchDetails:mode",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-cloud-patch)",
                    "initialSize": 24
                }
            ],
            "scm": [
                {
                    "id": "gitlens.views.repositories",
                    "name": "Repositories",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-repositories-view)",
                    "visibility": "hidden"
                },
                {
                    "id": "gitlens.views.commits",
                    "name": "Commits",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-commits-view)",
                    "visibility": "visible"
                },
                {
                    "id": "gitlens.views.branches",
                    "name": "Branches",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-branches-view)",
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.remotes",
                    "name": "Remotes",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-remotes-view)",
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.stashes",
                    "name": "Stashes",
                    "when": "!gitlens:disabled && !gitlens:hasVirtualFolders",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-stashes-view)",
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.tags",
                    "name": "Tags",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-tags-view)",
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.worktrees",
                    "name": "Worktrees",
                    "when": "!gitlens:disabled && !gitlens:hasVirtualFolders && gitlens:plus:enabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-worktrees-view)",
                    "visibility": "collapsed"
                },
                {
                    "id": "gitlens.views.contributors",
                    "name": "Contributors",
                    "when": "!gitlens:disabled",
                    "contextualTitle": "吉特透镜",
                    "icon": "$(gitlens-contributors-view)",
                    "visibility": "collapsed"
                }
            ]
        },
        "walkthroughs": [
            {
                "id": "welcome",
                "title": "开始使用 GitLens",
                "description": "发现和个性化可增强您的 Git 体验的功能",
                "steps": [
                    {
                        "id": "get-started",
                        "title": "欢迎与概述",
                        "description": "快速[开始]（命令：gitlens.showWelcomePage“打开 GitLens 欢迎”）并发现许多强大的 GitLens 功能，或者坐下来观看我们的[教程视频](https://www.youtube.com/watch?v= UQPb73Zz9qk“观看入门教程视频”）。\n\n**侧栏和面板概述**\n\n$(gitlens-gitlens-inspect)  **GitLens Inspect** — 深入了解代码历史记录。提供针对您当前正在处理的内容的上下文见解和详细信息。\n\n[打开 GitLens Inspect]（命令：workbench.view.extension.gitlensInspect）\n\n$(gitlens-gitlens)  **GitLens** — 快速访问许多 GitLens 功能。也是我们团队和协作服务的所在地。\n\n[打开 GitLens]（命令：workbench.view.extension.gitlens）\n\n$(source-control) **源代码控制** — 包含用于使用、探索和管理存储库的附加功能。\n\n[开源控制]（命令：workbench.view.scm）\n\n$(layout-panel)  **(Bottom) Panel** — 访问强大的提交图及其专用的详细信息视图。\n\n[打开提交图]（命令：gitlens.showGraphView）\n💡 虽然我们的视图是为了集中注意力和提高工作效率而排列的，但您可以轻松地拖动它们以满足您的需求。使用 [重置视图布局](命令:workbench.action.quickOpen?%22>GitLens%3A%20Reset%20Views%20Layout%22) 命令快速恢复到默认布局。\n💡 **想要更多控制？** 使用交互式 [GitLens 设置]（命令：gitlens.showSettingsPage“打开 GitLens 设置”）编辑器自定义 GitLens 以满足您的需求。",
                        "media": {
                            "markdown": "walkthroughs/welcome/get-started.md"
                        }
                    },
                    {
                        "id": "core-features",
                        "title": "发现核心功能",
                        "description": "**内联责备**和状态栏责备提供有关行更改的历史背景。\n💡 将鼠标悬停在注释上可显示丰富的细节和操作。\n**Git CodeLens** 在每个文件的顶部和每个代码块的开头添加上下文和可操作的作者信息。\n💡 使用 [Toggle Line Blame](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20Line%20Blame%22) 和 [Toggle Git CodeLens](command:workbench.action.quickOpen?%22> GitLens%3A%20Toggle%20Git%20CodeLens%22) 命令。\n**文件注释**，视觉指示器可以增强您的编辑器，提供对作者身份、最近更改或热图的见解。注释可以按需针对单个文件或整体进行切换。\n💡 使用[切换文件责备](命令:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20File%20Blame%22)、[切换文件更改](命令:workbench.action.quickOpen?%22> GitLens%3A%20Toggle%20File%20Changes%22) 和 [切换文件热图](command:workbench.action.quickOpen?%22>GitLens%3A%20Toggle%20File%20Heatmap%22) 对活动文件执行命令。\n\n**只需单击任何文件顶部的按钮即可浏览修订历史记录**，并比较随时间的变化。",
                        "media": {
                            "altText": "Illustrations of Inline Blame, Codelens, File Annotations and Revision Navigation",
                            "svg": "walkthroughs/welcome/core-features.svg"
                        }
                    },
                    {
                        "id": "pro-features",
                        "title": "使用 Pro 启动",
                        "description": "通过 [Pro 功能](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) 解锁 GitLens 的全部功能，并访问完整的 [GitKraken DevEx 平台]( https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links）。\n\n[开始专业试用](命令:gitlens.plus.signUp?%7B%22source%22%3A%22walkthrough%22%7D)\n\n已经有帐户？ [登录]（命令：gitlens.plus.login？%7B%22source%22%3A%22walkthrough%22%7D）\n\n**专业功能**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化您的存储库并跟踪所有正在进行的工作\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — 保持专注并让您的团队畅通无阻\n$(gitlens-code-suggestion)  [代码建议](命令:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 释放您的代码审查免受不必要的限制\n$(gitlens-cloud-patch)  [云补丁](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 轻松且与您的队友安全地共享代码\n$(gitlens-worktrees-view) **Worktrees** — 同时在多个分支上工作\n$(gitlens-workspaces-view) **工作区** — 对多个存储库进行分组和管理\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化归档并快速确定何时进行了最有影响力的更改以及由谁进行",
                        "media": {
                            "markdown": "walkthroughs/welcome/pro-features.md"
                        },
                        "when": "gitlens:plus:state >= 0 && gitlens:plus:state <= 2"
                    },
                    {
                        "id": "pro-trial",
                        "title": "开始使用专业版",
                        "description": "在试用期间，您可以访问所有 [Pro 功能](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) 和完整的 [GitKraken DevEx 平台]( https://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links）。请务必充分利用这些强大的功能。\n\n[升级到专业版](命令:gitlens.plus.upgrade?%7B%22source%22%3A%22walkthrough%22%7D)\n\n💡特别优惠：Pro 1 号座位现在可享受 50% 以上的折扣。\n**专业功能**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化您的存储库并跟踪所有正在进行的工作\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — 保持专注并让您的团队畅通无阻\n$(gitlens-code-suggestion)  [代码建议](命令:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 释放您的代码审查免受不必要的限制\n$(gitlens-cloud-patch)  [云补丁](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 轻松且与您的队友安全地共享代码\n$(gitlens-worktrees-view) **Worktrees** — 同时在多个分支上工作\n$(gitlens-workspaces-view) **工作区** — 对多个存储库进行分组和管理\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化归档并快速确定何时进行了最有影响力的更改以及由谁进行",
                        "media": {
                            "markdown": "walkthroughs/welcome/pro-trial.md"
                        },
                        "when": "gitlens:plus:state == 3"
                    },
                    {
                        "id": "pro-upgrade",
                        "title": "升级到专业版",
                        "description": "您的专业版试用已结束。请升级以获得对所有 [Pro 功能](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) 和完整 [GitKraken DevEx 平台](https: //gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links）。\n\n[升级到专业版](命令:gitlens.plus.upgrade?%7B%22source%22%3A%22walkthrough%22%7D)\n\n💡特别优惠：Pro 1 号座位现在可享受 50% 以上的折扣。\n**专业功能**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化您的存储库并跟踪所有正在进行的工作\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — 保持专注并让您的团队畅通无阻\n$(gitlens-code-suggestion)  [代码建议](命令:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 释放您的代码审查免受不必要的限制\n$(gitlens-cloud-patch)  [云补丁](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 轻松且与您的队友安全地共享代码\n$(gitlens-worktrees-view) **Worktrees** — 同时在多个分支上工作\n$(gitlens-workspaces-view) **工作区** — 对多个存储库进行分组和管理\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化归档并快速确定何时进行了最有影响力的更改以及由谁进行",
                        "media": {
                            "markdown": "walkthroughs/welcome/pro-upgrade.md"
                        },
                        "when": "gitlens:plus:state == 4"
                    },
                    {
                        "id": "pro-reactivate",
                        "title": "重新激活 Pro 电源",
                        "description": "重新激活您的 Pro 试用版并体验所有新的 [Pro 功能](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) 和完整的 [GitKraken DevEx 平台](https ://gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links）——另外 7 天免费！\n\n[重新激活 Pro 试用版](命令:gitlens.plus.reactivateProTrial?%7B%22source%22%3A%22walkthrough%22%7D)\n\n**专业功能**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化您的存储库并跟踪所有正在进行的工作\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — 保持专注并让您的团队畅通无阻\n$(gitlens-code-suggestion)  [代码建议](命令:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 释放您的代码审查免受不必要的限制\n$(gitlens-cloud-patch)  [云补丁](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 轻松且与您的队友安全地共享代码\n$(gitlens-worktrees-view) **Worktrees** — 同时在多个分支上工作\n$(gitlens-workspaces-view) **工作区** — 对多个存储库进行分组和管理\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化归档并快速确定何时进行了最有影响力的更改以及由谁进行",
                        "media": {
                            "markdown": "walkthroughs/welcome/pro-reactivate.md"
                        },
                        "when": "gitlens:plus:state == 5"
                    },
                    {
                        "id": "pro-paid",
                        "title": "与 Pro 一起供电",
                        "description": "您可以充分利用 GitLens 的 [专业功能](https://gitkraken.com/gitlens/pro-features?utm_source=gitlens-extension&utm_medium=in-app-links) 和 [GitKraken DevEx 平台](https://gitlens-extension&utm_medium=in-app-links) /gitkraken.com/devex?utm_source=gitlens-extension&utm_medium=in-app-links）。\n\n**专业功能**\n$(gitlens-graph)  [Commit Graph](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化您的存储库并跟踪所有正在进行的工作\n$(rocket)  [Launchpad](command:gitlens.openWalkthrough?%7B%22step%22%3A%22launchpad%22,%22source%22%3A%22walkthrough%22%7D) — 保持专注并让您的团队畅通无阻\n$(gitlens-code-suggestion)  [代码建议](命令:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 释放您的代码审查免受不必要的限制\n$(gitlens-cloud-patch)  [云补丁](command:gitlens.openWalkthrough?%7B%22step%22%3A%22code-collab%22,%22source%22%3A%22walkthrough%22%7D) — 轻松且与您的队友安全地共享代码\n$(gitlens-worktrees-view) **Worktrees** — 同时在多个分支上工作\n$(gitlens-workspaces-view) **工作区** — 对多个存储库进行分组和管理\n$(graph-scatter)  [Visual File History](command:gitlens.openWalkthrough?%7B%22step%22%3A%22visualize%22,%22source%22%3A%22walkthrough%22%7D) — 可视化归档并快速确定何时进行了最有影响力的更改以及由谁进行",
                        "media": {
                            "markdown": "walkthroughs/welcome/pro-paid.md"
                        },
                        "when": "gitlens:plus:state == 6"
                    },
                    {
                        "id": "visualize",
                        "title": "使用提交图和可视文件历史记录进行可视化",
                        "description": "**提交图**\n轻松可视化您的存储库并跟踪所有正在进行的工作。\n使用丰富的提交搜索来准确找到您要查找的内容。其强大的过滤器允许您按特定的提交、消息、作者、更改的文件，甚至特定的代码更改进行搜索。 [了解更多](https://gitkraken.com/solutions/commit-graph?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[打开提交图]（命令：gitlens.showGraph）\n\n💡通过 [Toggle Commit Graph](command:gitlens.toggleGraph) 命令快速切换 Graph，或使用 [Toggle Maximized Commit Graph](command:gitlens.toggleMaximizedGraph) 命令将其最大化。\n**可视文件历史记录**\n可视化文件的演变并快速识别最有影响力的更改何时以及由谁进行\n\n[打开可视文件历史记录](命令:gitlens.showTimelineView)",
                        "media": {
                            "altText": "Illustrations of the Commit Graph & Visual File History",
                            "svg": "walkthroughs/welcome/visualize.svg"
                        }
                    },
                    {
                        "id": "launchpad",
                        "title": "使用 Launchpad 解锁您的团队",
                        "description": "**Launchpad** ᴘʀᴇᴠɪᴇᴡ 将所有 GitHub 拉取请求放入统一的、可操作的列表中，以更好地跟踪正在进行的工作、待处理的工作、评论等。保持专注，对最重要的事项采取行动，以确保您的团队畅通无阻。 [了解更多](https://gitkraken.com/solutions/launchpad?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[打开启动板](命令:gitlens.showLaunchpad?%7B%22source%22%3A%22walkthrough%22%7D)",
                        "media": {
                            "altText": "Illustrations of Launchpad",
                            "svg": "walkthroughs/welcome/launchpad-quick.svg"
                        }
                    },
                    {
                        "id": "code-collab",
                        "title": "与代码建议和云补丁协作",
                        "description": "**代码建议** ᴘʀᴇᴠɪᴇᴡ\n\n将您的代码审查从 GitHub 的限制性、仅限评论的反馈风格中解放出来。就像建议对 Google 文档进行更改一样，建议从您已经编码的位置（您的 IDE 和项目中的任何内容）进行代码更改，而不仅仅是 PR 中更改的代码行。 [了解更多](https://gitkraken.com/solutions/code-suggest?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n**云补丁** ᴘʀᴇᴠɪᴇᴡ\n\n通过从 WIP 创建云补丁、提交或存储并共享生成的链接，轻松安全地与您的团队成员或其他开发人员共享代码更改。使用云补丁尽早进行协作，以获得有关方向、方法等的反馈，以最大程度地减少返工并简化工作流程。 [了解更多](https://gitkraken.com/solutions/cloud-patches?utm_source=gitlens-extension&utm_medium=in-app-links)\n\n[开放云补丁](命令:gitlens.showDraftsView)",
                        "media": {
                            "altText": "Illustrations of Code Suggest & Cloud Patches",
                            "image": "walkthroughs/welcome/code-collab.png"
                        }
                    },
                    {
                        "id": "integrations",
                        "title": "与 Git 托管和问题服务集成",
                        "description": "GitLens 自动检测提交消息中的模式，以生成自动链接以拉取请求和 Git 托管服务（包括 GitHub、GitLab、Gitea、Gerrit、Google Source、Bitbucket、Azure DevOps 和自定义服务器）的问题。\n\n[配置自动链接](command:gitlens.showSettingsPage!auto​​links) 用于与其他服务进行自定义模式匹配。\n\n**与 GitHub、GitLab 和 Jira 的丰富集成**\n连接 [GitHub]（命令：gitlens.connectRemoteProvider）、[GitLab]（命令：gitlens.connectRemoteProvider）和 [Jira]（命令：gitlens.plus.cloudIntegrations.manage?%7B%22integrationId%22%3A%22jira%22 %2C%22source%22%3A%22演练%22%2C%22detail%22%3A%7B%22action%22%3A%22connect%22%2C%22integration%22%3A%22jira%22%7D%7D) 集成通过 API 提供更多可用数据来增强自动链接，将分支和提交与 PR 相关联，并在 VS Code 中审查拉取请求。",
                        "media": {
                            "markdown": "walkthroughs/welcome/integrations.md"
                        }
                    },
                    {
                        "id": "more",
                        "title": "还有更多！",
                        "description": "**Rebase 让你失望了？**\n使用直观且用户友好的交互式变基编辑器轻松可视化和配置交互式变基操作\n\n**难以记住 Git 命令？**\n现在，您不必再使用 Git Command Palette——这是许多常见 Git 命令的引导式分步体验。\n\n[打开 Git 命令面板](命令:gitlens.gitCommands)\n\n**终止你的果酱？**\n使用集成终端中的自动链接快速跳转到有关提交、分支、标签等的更多详细信息。\n\n**不确定您在寻找什么？**\n打开命令面板并探索许多可用的命令。\n\n[打开 GitLens 命令](命令:workbench.action.quickOpen?%22>GitLens%3A%22)",
                        "media": {
                            "markdown": "walkthroughs/welcome/more-features.md"
                        }
                    }
                ]
            }
        ]
    },
    "scripts": {
        "analyze:bundle": "webpack --mode production --env analyzeBundle",
        "analyze:deps": "webpack --env analyzeDeps",
        "build": "webpack --mode development",
        "build:quick": "webpack --mode development --env skipLint",
        "build:extension": "webpack --mode development --config-name extension:node",
        "build:extension:browser": "webpack --mode development --config-name extension:webworker",
        "build:webviews": "webpack --mode development --config-name webviews",
        "build:icons": "yarn icons:svgo && yarn fantasticon && yarn icons:apply",
        "build:tests": "tsc -p tsconfig.test.json && tsc-alias -p tsconfig.test.json",
        "-build:tests": "webpack -c webpack.config.test.js --mode development",
        "bundle": "webpack --mode production",
        "bundle:extension": "webpack --mode production --config-name extension:node",
        "clean": "npx rimraf dist out .vscode-test .vscode-test-web .eslintcache* tsconfig*.tsbuildinfo",
        "copy:images": "webpack --config webpack.config.images.js",
        "graph:link": "yarn link @gitkraken/gitkraken-components",
        "graph:link:main": "pushd \"../GitKrakenComponents\" && yarn link && popd && yarn graph:link",
        "graph:unlink": "yarn unlink @gitkraken/gitkraken-components && yarn install --force",
        "graph:unlink:main": "yarn graph:unlink && pushd \"../GitKrakenComponents\" && yarn unlink && popd",
        "icons:apply": "node ./scripts/applyIconsContribution.mjs",
        "icons:svgo": "svgo -q -f ./images/icons/ --config svgo.config.js",
        "lint": "yarn run lint:clear-cache && eslint \"src/**/*.ts?(x)\"",
        "lint:webviews": "yarn run lint:clear-cache && eslint \"src/webviews/apps/**/*.ts?(x)\"",
        "lint:clear-cache": "npx rimraf .eslintcache",
        "package": "vsce package --yarn",
        "package-pre": "yarn run patch-pre && yarn run package --pre-release",
        "patch-pre": "node ./scripts/applyPreReleasePatch.js",
        "prep-release": "node ./scripts/prep-release.js",
        "pretty": "prettier --config .prettierrc --write .",
        "pretty:check": "prettier --config .prettierrc --check .",
        "pub": "vsce publish --yarn",
        "pub-pre": "vsce publish --yarn --pre-release",
        "rebuild": "yarn run reset && yarn run build",
        "reset": "yarn run clean && yarn --frozen-lockfile",
        "test": "node ./out/test/runTest.js",
        "watch": "webpack --watch --mode development",
        "watch:extension": "webpack --watch --mode development --config-name extension",
        "watch:webviews": "webpack --watch --mode development --config-name webviews",
        "watch:tests": "concurrently \"tsc-alias -p tsconfig.test.json -w\" \"tsc -p tsconfig.test.json -w\"",
        "-watch:tests": "webpack --watch -c webpack.config.test.js --mode development",
        "web": "vscode-test-web --extensionDevelopmentPath=. --folder-uri=vscode-vfs://github/gitkraken/vscode-gitlens",
        "web:serve": "node -e \"const p = require('path'); const h = require('os').homedir(); require('child_process').execSync('npx serve --cors -l 5000 --ssl-cert '+p.resolve(h, 'certs/localhost.pem')+' --ssl-key '+p.resolve(h, 'certs/localhost-key.pem'), { stdio: 'inherit' })\"",
        "update-dts": "pushd \"src/@types\" && npx @vscode/dts dev && popd",
        "update-dts:main": "pushd \"src/@types\" && npx @vscode/dts main && popd",
        "update-emoji": "node ./scripts/generateEmojiShortcodeMap.mjs",
        "update-licenses": "node ./scripts/generateLicenses.mjs",
        "-pretest": "yarn run build:tests",
        "vscode:prepublish": "yarn run bundle"
    },
    "dependencies": {
        "@gitkraken/gitkraken-components": "10.5.1",
        "@gitkraken/provider-apis": "0.22.9",
        "@gitkraken/shared-web-components": "0.1.1-rc.15",
        "@lit/react": "1.0.5",
        "@microsoft/fast-element": "1.13.0",
        "@octokit/graphql": "8.1.1",
        "@octokit/request": "9.1.1",
        "@octokit/types": "13.5.0",
        "@opentelemetry/api": "1.9.0",
        "@opentelemetry/exporter-trace-otlp-http": "0.52.1",
        "@opentelemetry/sdk-trace-base": "1.25.1",
        "@shoelace-style/shoelace": "2.15.1",
        "@vscode/codicons": "0.0.36",
        "@vscode/webview-ui-toolkit": "1.4.0",
        "ansi-regex": "6.0.1",
        "billboard.js": "3.12.4",
        "fast-string-truncated-width": "1.1.0",
        "https-proxy-agent": "5.0.1",
        "iconv-lite": "0.6.3",
        "lit": "3.1.4",
        "marked": "12.0.2",
        "node-fetch": "2.7.0",
        "os-browserify": "0.3.0",
        "path-browserify": "1.0.1",
        "react": "16.8.4",
        "react-dom": "16.8.4",
        "sortablejs": "1.15.0"
    },
    "devDependencies": {
        "@eamodio/eslint-lite-webpack-plugin": "0.0.8",
        "@swc/core": "1.7.0",
        "@twbs/fantasticon": "3.0.0",
        "@types/mocha": "10.0.7",
        "@types/node": "18.15.0",
        "@types/react": "17.0.80",
        "@types/react-dom": "17.0.21",
        "@types/sortablejs": "1.15.8",
        "@types/vscode": "1.82.0",
        "@typescript-eslint/eslint-plugin": "7.16.1",
        "@typescript-eslint/parser": "7.16.1",
        "@vscode/test-electron": "2.4.1",
        "@vscode/test-web": "0.0.56",
        "@vscode/vsce": "2.31.1",
        "circular-dependency-plugin": "5.2.2",
        "clean-webpack-plugin": "4.0.0",
        "concurrently": "8.2.2",
        "copy-webpack-plugin": "12.0.2",
        "csp-html-webpack-plugin": "5.1.0",
        "css-loader": "7.1.2",
        "css-minimizer-webpack-plugin": "7.0.0",
        "cssnano-preset-advanced": "7.0.4",
        "esbuild": "0.23.0",
        "esbuild-loader": "4.2.2",
        "esbuild-sass-plugin": "3.3.1",
        "eslint": "8.57.0",
        "eslint-cli": "1.1.1",
        "eslint-import-resolver-typescript": "3.6.1",
        "eslint-plugin-anti-trojan-source": "1.1.1",
        "eslint-plugin-import": "2.29.1",
        "eslint-plugin-lit": "1.14.0",
        "eslint-plugin-wc": "2.1.0",
        "fork-ts-checker-webpack-plugin": "6.5.3",
        "glob": "11.0.0",
        "html-loader": "5.0.0",
        "html-webpack-plugin": "5.6.0",
        "image-minimizer-webpack-plugin": "4.0.2",
        "license-checker-rseidelsohn": "4.3.0",
        "lz-string": "1.5.0",
        "mini-css-extract-plugin": "2.9.0",
        "mocha": "10.6.0",
        "prettier": "3.1.0",
        "sass": "1.77.6",
        "sass-loader": "14.2.1",
        "schema-utils": "4.2.0",
        "sharp": "0.32.6",
        "svgo": "3.3.2",
        "terser-webpack-plugin": "5.3.10",
        "ts-loader": "9.5.1",
        "tsc-alias": "1.8.10",
        "typescript": "5.5.3",
        "webpack": "5.93.0",
        "webpack-bundle-analyzer": "4.10.2",
        "webpack-cli": "5.1.4",
        "webpack-node-externals": "3.0.0",
        "webpack-require-from": "1.8.6"
    },
    "resolutions": {
        "esbuild": "0.23.0",
        "iconv-lite": "0.6.3",
        "node-fetch": "2.7.0",
        "semver-regex": "4.0.5"
    },
    "__metadata": {
        "id": "4de763bd-505d-4978-9575-2b7696ecf94e",
        "publisherId": "678d198b-9b2e-49d3-96ff-6d801c9575df",
        "publisherDisplayName": "GitKraken",
        "targetPlatform": "undefined",
        "isApplicationScoped": false,
        "isPreReleaseVersion": false,
        "hasPreReleaseVersion": false,
        "installedTimestamp": 1722039716538,
        "pinned": false,
        "preRelease": false,
        "source": "gallery"
    }
}